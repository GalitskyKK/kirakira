/**
 * üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –ú–∏–≥—Ä–∞—Ü–∏—é —É—Ä–æ–≤–Ω–µ–π 1-30
 * 2. –§—É–Ω–∫—Ü–∏—é add_user_experience
 * 3. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ (—Ä–æ—Å—Ç–∫–∏ + –∫—Ä–∏—Å—Ç–∞–ª–ª—ã)
 * 4. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/test-level-system.js
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
const TEST_TELEGRAM_ID = 123456789 // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö 30 —É—Ä–æ–≤–Ω–µ–π
 */
async function testLevelsExist() {
  log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 30 —É—Ä–æ–≤–Ω–µ–π...', 'cyan')

  const { data, error } = await supabase
    .from('gardener_levels')
    .select('level, name, emoji, sprout_reward, gem_reward')
    .order('level', { ascending: true })

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  if (data.length !== 30) {
    log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${data.length} —É—Ä–æ–≤–Ω–µ–π, –æ–∂–∏–¥–∞–ª–æ—Å—å 30`, 'red')
    return false
  }

  log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ 30 —É—Ä–æ–≤–Ω–µ–π`, 'green')

  // –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
  const samples = [1, 5, 10, 15, 20, 25, 30]
  samples.forEach(lvl => {
    const level = data.find(l => l.level === lvl)
    if (level) {
      log(
        `   –£—Ä.${level.level}: ${level.emoji} ${level.name} - ${level.sprout_reward}üåø ${level.gem_reward}üíé`,
        'blue'
      )
    }
  })

  return true
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
 */
async function testNewColumns() {
  log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π...', 'cyan')

  const { data, error } = await supabase
    .from('gardener_levels')
    .select('sprout_reward, gem_reward, special_unlock')
    .eq('level', 1)
    .single()

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  if (data.sprout_reward === undefined) {
    log('‚ùå –ü–æ–ª–µ sprout_reward –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red')
    return false
  }

  if (data.gem_reward === undefined) {
    log('‚ùå –ü–æ–ª–µ gem_reward –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red')
    return false
  }

  log('‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'green')
  log(`   sprout_reward: ${data.sprout_reward}`, 'blue')
  log(`   gem_reward: ${data.gem_reward}`, 'blue')
  log(`   special_unlock: ${data.special_unlock || 'null'}`, 'blue')

  return true
}

/**
 * –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
 */
async function ensureTestUser() {
  log('\nüë§ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'cyan')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
  const { data: existingUser } = await supabase
    .from('users')
    .select('telegram_id, experience, level')
    .eq('telegram_id', TEST_TELEGRAM_ID)
    .single()

  if (existingUser) {
    log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${TEST_TELEGRAM_ID} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'green')
    log(
      `   –û–ø—ã—Ç: ${existingUser.experience}, –£—Ä–æ–≤–µ–Ω—å: ${existingUser.level}`,
      'blue'
    )
    return true
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  log(`üìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TEST_TELEGRAM_ID}...`, 'yellow')

  const { error: createError } = await supabase.from('users').insert({
    telegram_id: TEST_TELEGRAM_ID,
    user_id: `tg_${TEST_TELEGRAM_ID}`,
    first_name: 'Test',
    last_name: 'User',
    username: 'test_level_system',
    experience: 0,
    level: 1,
  })

  if (createError) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createError.message}`, 'red')
    return false
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
  const { error: currencyError } = await supabase.from('user_currency').insert({
    telegram_id: TEST_TELEGRAM_ID,
    sprouts: 0,
    gems: 0,
  })

  if (currencyError && currencyError.code !== '23505') {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º duplicate key
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã: ${currencyError.message}`, 'yellow')
  }

  log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', 'green')
  return true
}

/**
 * –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ level up
 */
async function testLevelUp() {
  log('\nüéØ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è...', 'cyan')

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1
  await supabase
    .from('users')
    .update({ experience: 0, level: 1 })
    .eq('telegram_id', TEST_TELEGRAM_ID)

  // –û—á–∏—â–∞–µ–º –≤–∞–ª—é—Ç—É
  await supabase
    .from('user_currency')
    .update({
      sprouts: 0,
      gems: 0,
      total_sprouts_earned: 0,
      total_gems_earned: 0,
    })
    .eq('telegram_id', TEST_TELEGRAM_ID)

  log('   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 0 –æ–ø—ã—Ç–∞, —É—Ä–æ–≤–µ–Ω—å 1', 'blue')

  // –î–æ–±–∞–≤–ª—è–µ–º 150 –æ–ø—ã—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ø–æ–¥–Ω—è—Ç—å –¥–æ —É—Ä–æ–≤–Ω—è 2)
  log('   –î–æ–±–∞–≤–ª—è—é 150 –æ–ø—ã—Ç–∞...', 'blue')

  const { data, error } = await supabase.rpc('add_user_experience', {
    p_telegram_id: TEST_TELEGRAM_ID,
    p_experience_points: 150,
  })

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  const result = data[0]

  log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, 'blue')
  log(`   - –ù–æ–≤—ã–π –æ–ø—ã—Ç: ${result.new_experience}`, 'blue')
  log(`   - –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.new_level}`, 'blue')
  log(`   - Level up: ${result.level_up}`, 'blue')
  log(`   - –ù–∞–≥—Ä–∞–¥–∞ —Ä–æ—Å—Ç–∫–∞–º–∏: ${result.sprout_reward}üåø`, 'blue')
  log(`   - –ù–∞–≥—Ä–∞–¥–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏: ${result.gem_reward}üíé`, 'blue')

  if (result.new_level !== 2) {
    log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è —É—Ä–æ–≤–µ–Ω—å 2, –ø–æ–ª—É—á–µ–Ω ${result.new_level}`, 'red')
    return false
  }

  if (!result.level_up) {
    log('‚ùå Level up –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª', 'red')
    return false
  }

  if (result.sprout_reward !== 150) {
    log(`‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 150 —Ä–æ—Å—Ç–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${result.sprout_reward}`, 'red')
    return false
  }

  log('‚úÖ Level up —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green')
  return true
}

/**
 * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
 */
async function testCurrencyReward() {
  log('\nüí∞ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã...', 'cyan')

  const { data, error } = await supabase
    .from('user_currency')
    .select('sprouts, gems, total_sprouts_earned, total_gems_earned')
    .eq('telegram_id', TEST_TELEGRAM_ID)
    .single()

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  log('   –ë–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç—ã:', 'blue')
  log(
    `   - –†–æ—Å—Ç–∫–∏: ${data.sprouts}üåø (–≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.total_sprouts_earned})`,
    'blue'
  )
  log(
    `   - –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ${data.gems}üíé (–≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.total_gems_earned})`,
    'blue'
  )

  if (data.sprouts !== 150) {
    log(`‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 150 —Ä–æ—Å—Ç–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${data.sprouts}`, 'red')
    return false
  }

  log('‚úÖ –í–∞–ª—é—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green')
  return true
}

/**
 * –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function testTransactions() {
  log('\nüìú –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...', 'cyan')

  const { data, error } = await supabase
    .from('currency_transactions')
    .select('*')
    .eq('telegram_id', TEST_TELEGRAM_ID)
    .order('created_at', { ascending: false })
    .limit(5)

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  if (data.length === 0) {
    log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'red')
    return false
  }

  log(`   –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.length}`, 'blue')

  data.forEach((tx, i) => {
    log(
      `   ${i + 1}. ${tx.transaction_type} - ${tx.amount} ${tx.currency_type} (${tx.reason})`,
      'blue'
    )
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è reward —Å reason level_up
  const levelUpTransaction = data.find(
    tx => tx.transaction_type === 'reward' && tx.reason === 'level_up'
  )

  if (!levelUpTransaction) {
    log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è level_up –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'red')
    return false
  }

  log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green')
  return true
}

/**
 * –¢–µ—Å—Ç 7: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ level up
 */
async function testMultipleLevelUps() {
  log('\nüöÄ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö level up...', 'cyan')

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await supabase
    .from('users')
    .update({ experience: 0, level: 1 })
    .eq('telegram_id', TEST_TELEGRAM_ID)

  log('   –î–æ–±–∞–≤–ª—è—é 1000 –æ–ø—ã—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ø–æ–¥–Ω—è—Ç—å—Å—è –¥–æ —É—Ä–æ–≤–Ω—è 4)...', 'blue')

  const { data, error } = await supabase.rpc('add_user_experience', {
    p_telegram_id: TEST_TELEGRAM_ID,
    p_experience_points: 1000,
  })

  if (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    return false
  }

  const result = data[0]

  log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, 'blue')
  log(`   - –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${result.new_level}`, 'blue')
  log(`   - –ù–∞–≥—Ä–∞–¥–∞ —Ä–æ—Å—Ç–∫–∞–º–∏: ${result.sprout_reward}üåø`, 'blue')
  log(`   - –ù–∞–≥—Ä–∞–¥–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏: ${result.gem_reward}üíé`, 'blue')

  // –ü—Ä–∏ –ø—Ä—ã–∂–∫–µ —Å 0 –¥–æ 1000 –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å 4
  // –û–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω–µ–π: 1(0-99), 2(100-249), 3(250-499), 4(500-799), 5(800+)
  const expectedLevel = 4

  if (result.new_level !== expectedLevel) {
    log(
      `‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —É—Ä–æ–≤–µ–Ω—å ${expectedLevel}, –ø–æ–ª—É—á–µ–Ω ${result.new_level}`,
      'yellow'
    )
    log(
      `   (–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)`,
      'yellow'
    )
  }

  log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ level up –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è', 'green')
  return true
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan')
  log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–†–û–í–ù–ï–ô', 'cyan')
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan')

  const tests = [
    { name: '–ù–∞–ª–∏—á–∏–µ 30 —É—Ä–æ–≤–Ω–µ–π', fn: testLevelsExist },
    { name: '–ù–æ–≤—ã–µ –ø–æ–ª—è –≤ –ë–î', fn: testNewColumns },
    { name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', fn: ensureTestUser },
    { name: 'Level up', fn: testLevelUp },
    { name: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã', fn: testCurrencyReward },
    { name: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', fn: testTransactions },
    { name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ level up', fn: testMultipleLevelUps },
  ]

  let passed = 0
  let failed = 0

  for (const test of tests) {
    try {
      const result = await test.fn()
      if (result) {
        passed++
      } else {
        failed++
      }
    } catch (error) {
      log(
        `‚ùå –¢–µ—Å—Ç "${test.name}" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`,
        'red'
      )
      failed++
    }
  }

  // –ò—Ç–æ–≥–∏
  log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan')
  log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'cyan')
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan')
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green')
  if (failed > 0) {
    log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red')
  }
  log(`üìà –£—Å–ø–µ—Ö: ${Math.round((passed / tests.length) * 100)}%`, 'blue')

  if (failed === 0) {
    log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green')
    log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'green')
  } else {
    log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å', 'yellow')
    log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π', 'yellow')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red')
  console.error(error)
  process.exit(1)
})
