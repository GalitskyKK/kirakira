-- =============================================
-- –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∞–≥–∞–∑–∏–Ω–∞ —Å RLS
-- =============================================

-- 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
CREATE TABLE IF NOT EXISTS public.shop_purchases (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  telegram_id bigint NOT NULL,
  item_type text NOT NULL CHECK (item_type = ANY (ARRAY['garden_theme'::text, 'premium_feature'::text, 'decoration'::text])),
  item_id text NOT NULL,
  price_sprouts integer DEFAULT 0 CHECK (price_sprouts >= 0),
  price_gems integer DEFAULT 0 CHECK (price_gems >= 0),
  purchased_at timestamp with time zone DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT shop_purchases_pkey PRIMARY KEY (id),
  CONSTRAINT shop_purchases_telegram_id_fkey FOREIGN KEY (telegram_id) REFERENCES public.users(telegram_id),
  CONSTRAINT shop_purchases_unique UNIQUE (telegram_id, item_type, item_id)
);

-- 2. –í–∫–ª—é—á–∞–µ–º RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã shop_purchases
ALTER TABLE public.shop_purchases ENABLE ROW LEVEL SECURITY;

-- 3. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è telegram_id –∏–∑ JWT
CREATE OR REPLACE FUNCTION public.get_telegram_id()
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
STABLE
AS $$
DECLARE
  jwt_payload jsonb;
  telegram_id_value bigint;
BEGIN
  -- –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
  jwt_payload := auth.jwt();
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JWT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  IF jwt_payload IS NULL THEN
    RETURN NULL;
  END IF;
  
  -- –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ JWT payload
  telegram_id_value := (jwt_payload ->> 'telegram_id')::bigint;
  
  RETURN telegram_id_value;
EXCEPTION
  WHEN OTHERS THEN
    -- –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NULL
    RETURN NULL;
END;
$$;

-- 4. –°–æ–∑–¥–∞–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è shop_purchases (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
DROP POLICY IF EXISTS "Users can view own purchases" ON public.shop_purchases;
DROP POLICY IF EXISTS "Users can insert own purchases" ON public.shop_purchases;
DROP POLICY IF EXISTS "Users can update own purchases" ON public.shop_purchases;

-- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
CREATE POLICY "Users can view own purchases" ON public.shop_purchases
  FOR SELECT USING (
    telegram_id = public.get_telegram_id()
  );

CREATE POLICY "Users can insert own purchases" ON public.shop_purchases
  FOR INSERT WITH CHECK (
    telegram_id = public.get_telegram_id()
  );

CREATE POLICY "Users can update own purchases" ON public.shop_purchases
  FOR UPDATE USING (
    telegram_id = public.get_telegram_id()
  );

-- 5. –û–±–Ω–æ–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_currency (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
DROP POLICY IF EXISTS "Users can view own currency" ON public.user_currency;
DROP POLICY IF EXISTS "Users can update own currency" ON public.user_currency;

-- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
CREATE POLICY "Users can view own currency" ON public.user_currency
  FOR SELECT USING (
    telegram_id = public.get_telegram_id()
  );

CREATE POLICY "Users can update own currency" ON public.user_currency
  FOR UPDATE USING (
    telegram_id = public.get_telegram_id()
  );

-- 6. –û–±–Ω–æ–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è currency_transactions (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
DROP POLICY IF EXISTS "Users can view own transactions" ON public.currency_transactions;
DROP POLICY IF EXISTS "Users can insert own transactions" ON public.currency_transactions;

-- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
CREATE POLICY "Users can view own transactions" ON public.currency_transactions
  FOR SELECT USING (
    telegram_id = public.get_telegram_id()
  );

CREATE POLICY "Users can insert own transactions" ON public.currency_transactions
  FOR INSERT WITH CHECK (
    telegram_id = public.get_telegram_id()
  );

-- 7. –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç—Ä–∞—Ç—ã –≤–∞–ª—é—Ç—ã
CREATE OR REPLACE FUNCTION public.spend_currency(
  p_telegram_id bigint,
  p_currency_type text,
  p_amount integer,
  p_reason text,
  p_description text DEFAULT NULL,
  p_metadata jsonb DEFAULT '{}'::jsonb
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_current_balance integer;
  v_new_balance integer;
  v_transaction_id uuid;
  v_auth_telegram_id bigint;
BEGIN
  -- üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
  v_auth_telegram_id := public.get_telegram_id();
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  IF v_auth_telegram_id IS NULL THEN
    RETURN jsonb_build_object('success', false, 'error', 'User not authenticated');
  END IF;
  
  -- üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏
  IF p_telegram_id != v_auth_telegram_id THEN
    RETURN jsonb_build_object('success', false, 'error', 'Access denied: cannot spend other user currency');
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  IF p_telegram_id IS NULL OR p_currency_type IS NULL OR p_amount IS NULL OR p_reason IS NULL THEN
    RETURN jsonb_build_object('success', false, 'error', 'Missing required parameters');
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã
  IF p_currency_type NOT IN ('sprouts', 'gems') THEN
    RETURN jsonb_build_object('success', false, 'error', 'Invalid currency type');
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
  IF p_amount <= 0 THEN
    RETURN jsonb_build_object('success', false, 'error', 'Amount must be positive');
  END IF;

  -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (—Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è RLS)
  SELECT 
    CASE 
      WHEN p_currency_type = 'sprouts' THEN sprouts
      WHEN p_currency_type = 'gems' THEN gems
    END
  INTO v_current_balance
  FROM public.user_currency
  WHERE telegram_id = p_telegram_id;

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  IF v_current_balance IS NULL THEN
    RETURN jsonb_build_object('success', false, 'error', 'User not found');
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
  IF v_current_balance < p_amount THEN
    RETURN jsonb_build_object(
      'success', false, 
      'error', 'Insufficient funds',
      'current_balance', v_current_balance,
      'required_amount', p_amount
    );
  END IF;

  -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
  v_new_balance := v_current_balance - p_amount;

  -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è RLS)
  UPDATE public.user_currency
  SET 
    sprouts = CASE WHEN p_currency_type = 'sprouts' THEN v_new_balance ELSE sprouts END,
    gems = CASE WHEN p_currency_type = 'gems' THEN v_new_balance ELSE gems END,
    total_sprouts_spent = CASE WHEN p_currency_type = 'sprouts' THEN total_sprouts_spent + p_amount ELSE total_sprouts_spent END,
    total_gems_spent = CASE WHEN p_currency_type = 'gems' THEN total_gems_spent + p_amount ELSE total_gems_spent END,
    last_updated = now(),
    updated_at = now()
  WHERE telegram_id = p_telegram_id;

  -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è RLS)
  INSERT INTO public.currency_transactions (
    telegram_id, transaction_type, currency_type, amount,
    balance_before, balance_after, reason, description, metadata
  ) VALUES (
    p_telegram_id, 'spend', p_currency_type, p_amount,
    v_current_balance, v_new_balance, p_reason, p_description, p_metadata
  ) RETURNING id INTO v_transaction_id;

  -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  RETURN jsonb_build_object(
    'success', true,
    'transaction_id', v_transaction_id,
    'balance_before', v_current_balance,
    'balance_after', v_new_balance,
    'amount_spent', p_amount
  );

EXCEPTION
  WHEN OTHERS THEN
    RETURN jsonb_build_object('success', false, 'error', 'Database error: ' || SQLERRM);
END;
$$;

-- 8. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_shop_purchases_telegram_id ON public.shop_purchases(telegram_id);
CREATE INDEX IF NOT EXISTS idx_shop_purchases_item_type ON public.shop_purchases(item_type);
CREATE INDEX IF NOT EXISTS idx_shop_purchases_item_id ON public.shop_purchases(item_id);

-- 9. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
GRANT SELECT, INSERT, UPDATE ON public.shop_purchases TO authenticated;
GRANT EXECUTE ON FUNCTION public.spend_currency TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_telegram_id TO authenticated;

-- 10. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
COMMENT ON TABLE public.shop_purchases IS '–ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ (—Ç–µ–º—ã, –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏, –¥–µ–∫–æ—Ä–∞—Ü–∏–∏) - –∑–∞—â–∏—â–µ–Ω–æ RLS';
COMMENT ON FUNCTION public.spend_currency IS '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞—Ç—ã –≤–∞–ª—é—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π JWT –∏ RLS';
COMMENT ON FUNCTION public.get_telegram_id IS '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è telegram_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞';
