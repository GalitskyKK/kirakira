/**
 * üçÇ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è seasonal_variant –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–∞–¥–∞
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–∑–æ–Ω –ø–æ –¥–∞—Ç–µ
 */
function getSeasonFromDate(date) {
  const month = date.getMonth() + 1 // 1-12

  if (month >= 3 && month <= 5) return 'spring'
  if (month >= 6 && month <= 8) return 'summer'
  if (month >= 9 && month <= 11) return 'autumn'
  return 'winter'
}

async function fixSeasonalVariants() {
  console.log('üçÇ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ seasonal_variant...\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å NULL seasonal_variant
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å NULL seasonal_variant...')
    const { data: elementsToFix, error: fetchError } = await supabase
      .from('garden_elements')
      .select('id, unlock_date, seasonal_variant')
      .is('seasonal_variant', null)

    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fetchError.message}`)
    }

    if (!elementsToFix || elementsToFix.length === 0) {
      console.log('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–∂–µ –∏–º–µ—é—Ç seasonal_variant!')
      return
    }

    console.log(
      `üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${elementsToFix.length}\n`
    )

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    let successCount = 0
    let errorCount = 0

    for (const element of elementsToFix) {
      const unlockDate = new Date(element.unlock_date)
      const season = getSeasonFromDate(unlockDate)

      const { error: updateError } = await supabase
        .from('garden_elements')
        .update({ seasonal_variant: season })
        .eq('id', element.id)

      if (updateError) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${element.id}:`,
          updateError.message
        )
        errorCount++
      } else {
        successCount++
      }
    }

    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:')
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`)
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n`)

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–∑–æ–Ω–∞–º
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:')
    const { data: stats, error: statsError } = await supabase
      .from('garden_elements')
      .select('seasonal_variant')

    if (statsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError.message}`)
    }

    const seasonCounts = stats.reduce((acc, element) => {
      const season = element.seasonal_variant || 'null'
      acc[season] = (acc[season] || 0) + 1
      return acc
    }, {})

    console.table(seasonCounts)

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:')
    const { data: examples, error: examplesError } = await supabase
      .from('garden_elements')
      .select('id, element_type, unlock_date, seasonal_variant')
      .order('unlock_date', { ascending: false })
      .limit(10)

    if (examplesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: ${examplesError.message}`)
    }

    console.table(
      examples.map(e => ({
        id: e.id.substring(0, 8) + '...',
        type: e.element_type,
        date: new Date(e.unlock_date).toLocaleDateString('ru-RU'),
        season: e.seasonal_variant,
      }))
    )

    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixSeasonalVariants()
