#!/usr/bin/env node

/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 *
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

import fetch from 'node-fetch'

const API_BASE = process.env.VITE_APP_URL || 'http://localhost:3000'

async function testNotificationSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π KiraKira...\n')

  const results = {
    apiStatus: false,
    smartNotifications: false,
    webhookStatus: false,
    errors: [],
  }

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
    const response = await fetch(`${API_BASE}/api/notifications`)
    const data = await response.json()

    if (response.ok && data.status) {
      console.log('‚úÖ API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log(`   –°—Ç–∞—Ç—É—Å: ${data.status}`)
      console.log(`   –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${data.botConfigured}`)
      console.log(`   –í—Ä–µ–º—è –ú–°–ö: ${data.moscowTime}`)
      results.apiStatus = true
    } else {
      throw new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`)
    }
  } catch (error) {
    console.log('‚ùå API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    results.errors.push(`API status: ${error.message}`)
  }

  console.log('')

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π endpoint)
  try {
    console.log('üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
    const response = await fetch(`${API_BASE}/api/notifications?type=smart`)
    const data = await response.json()

    if (response.ok && data.status) {
      console.log('‚úÖ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç')
      console.log(`   –°—Ç–∞—Ç—É—Å: ${data.status}`)
      results.smartNotifications = true
    } else {
      throw new Error(`Smart API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`)
    }
  } catch (error) {
    console.log('‚ùå –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message)
    results.errors.push(`Smart notifications: ${error.message}`)
  }

  console.log('')

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram webhook
  try {
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram webhook...')
    const response = await fetch(`${API_BASE}/api/telegram`)
    const data = await response.json()

    if (response.ok && data.status) {
      console.log('‚úÖ Telegram webhook —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log(`   –°—Ç–∞—Ç—É—Å: ${data.status}`)
      console.log(`   –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${data.botConfigured}`)
      results.webhookStatus = true
    } else {
      throw new Error(`Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`)
    }
  } catch (error) {
    console.log('‚ùå Telegram webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    results.errors.push(`Webhook: ${error.message}`)
  }

  console.log('')

  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç)
  if (results.apiStatus) {
    try {
      console.log('üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
      const response = await fetch(`${API_BASE}/api/notifications`, {
        method: 'POST',
      })
      const data = await response.json()

      if (response.ok) {
        console.log('‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω')
        console.log(
          `   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.results?.processed || 0}`
        )
        console.log(
          `   –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${data.results?.dailyReminders || 0}`
        )
        console.log(
          `   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–∫–∞—Ö: ${data.results?.streakLost || 0}`
        )
        console.log(`   –û –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${data.results?.inactivity || 0}`)
        console.log(`   –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö: ${data.results?.weeklyMotivation || 0}`)
        console.log(`   –û—à–∏–±–æ–∫: ${data.results?.errors || 0}`)
      } else {
        throw new Error(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${response.status}`)
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:', error.message)
      results.errors.push(`Send test: ${error.message}`)
    }
  } else {
    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  }

  console.log('')

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:')
  console.log(`API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${results.apiStatus ? '‚úÖ' : '‚ùå'}`)
  console.log(`–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${results.smartNotifications ? '‚úÖ' : '‚ùå'}`)
  console.log(`Telegram webhook: ${results.webhookStatus ? '‚úÖ' : '‚ùå'}`)

  if (results.errors.length > 0) {
    console.log('\n‚ùå –û—à–∏–±–∫–∏:')
    results.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`))
  }

  const allWorking =
    results.apiStatus && results.smartNotifications && results.webhookStatus
  console.log(
    `\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${allWorking ? '‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' : '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`
  )

  if (allWorking) {
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
    console.log('\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log(
      '1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –ë–î: docs/database/add_notification_settings_column.sql'
    )
    console.log('2. –î–µ–ø–ª–æ–π—Ç–µ –≤ Vercel: `vercel --prod`')
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel Dashboard')
    console.log('4. Cron job –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
  } else {
    console.log('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:')
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: `npm run dev`')
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç —Ç–æ–∫–µ–Ω')
  }

  return allWorking
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNotificationSystem()
  .then(success => {
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
    process.exit(1)
  })
