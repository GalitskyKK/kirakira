/**
 * Telegram Bot –¥–ª—è –∫–æ–º—å—é–Ω–∏—Ç–∏-—Ñ—É–Ω–∫—Ü–∏–π KiraKira
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline queries –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 */

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const WEBAPP_URL =
  process.env.WEBAPP_URL || 'https://t.me/KiraKiraGardenBot/app'

// –ö–æ–º—å—é–Ω–∏—Ç–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏
const COMMUNITY_CHALLENGES = {
  mood_streak_7: {
    title: '7 –¥–Ω–µ–π —ç–º–æ—Ü–∏–π',
    description: '–û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
    emoji: 'üî•',
    participants: 42,
  },
  garden_competition: {
    title: '–ë–∏—Ç–≤–∞ —Å–∞–¥–æ–≤',
    description: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: –∫—Ç–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é?',
    emoji: 'üèÜ',
    participants: 18,
  },
  mindfulness_week: {
    title: '–ù–µ–¥–µ–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
    description: '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
    emoji: 'üßò‚Äç‚ôÄÔ∏è',
    participants: 156,
  },
}

// –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–∞–¥—ã
const GARDEN_REACTIONS = {
  'üåü': '–í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç!',
  'üíö': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é',
  'üåà': '–ö—Ä–∞—Å–∏–≤–æ!',
  'ü§ó': '–û–±–Ω–∏–º–∞—é',
  'üí™': '–°–∏–ª—å–Ω–æ!',
  '‚ú®': '–í–æ–ª—à–µ–±–Ω–æ!',
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline queries –¥–ª—è –∫–æ–º—å—é–Ω–∏—Ç–∏-—Ñ—É–Ω–∫—Ü–∏–π
 */
async function handleInlineQuery(query) {
  const queryText = query.query.toLowerCase()
  const results = []

  // –ß–µ–ª–ª–µ–Ω–¥–∂–∏
  if (queryText.startsWith('challenge_')) {
    const challengeId = queryText.replace('challenge_', '')
    const challenge = COMMUNITY_CHALLENGES[challengeId]

    if (challenge) {
      results.push({
        type: 'article',
        id: `challenge_${challengeId}`,
        title: `üéØ ${challenge.title}`,
        description: `${challenge.description}\nüí™ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${challenge.participants}`,
        input_message_content: {
          message_text: `${challenge.emoji} **${challenge.title}**\n\n${challenge.description}\n\nüí™ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${challenge.participants}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 7 –¥–Ω–µ–π\n\nüå∏ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ KiraKira!`,
          parse_mode: 'Markdown',
        },
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂',
                web_app: {
                  url: `${WEBAPP_URL}?start=challenge_${challengeId}`,
                },
              },
            ],
          ],
        },
      })
    }
  }

  // –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–∞–¥—ã
  else if (queryText.startsWith('react_')) {
    const reactionEmoji = queryText.replace('react_', '')
    const reactionLabel = GARDEN_REACTIONS[reactionEmoji]

    if (reactionLabel) {
      results.push({
        type: 'article',
        id: `reaction_${reactionEmoji}`,
        title: `${reactionEmoji} ${reactionLabel}`,
        description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–∞–¥ –¥—Ä—É–≥–∞',
        input_message_content: {
          message_text: `${reactionEmoji} ${reactionLabel}\n\nüå∏ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –º–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –≤ KiraKira!\n\nüíö –í–º–µ—Å—Ç–µ –ª–µ–≥—á–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ`,
          parse_mode: 'Markdown',
        },
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üå± –û—Ç–∫—Ä—ã—Ç—å –º–æ–π —Å–∞–¥',
                web_app: { url: WEBAPP_URL },
              },
            ],
          ],
        },
      })
    }
  }

  // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–∞–¥—ã
  else if (queryText === 'group_garden_create') {
    results.push({
      type: 'article',
      id: 'group_garden_create',
      title: 'üåø –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∞–¥',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–∞–¥—É',
      input_message_content: {
        message_text: `üåø **–°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∞–¥!**\n\nü§ù –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n‚ú® –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\nüìä –ì—Ä—É–ø–ø–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nüíö –í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüå∏ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ KiraKira!`,
        parse_mode: 'Markdown',
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
              web_app: { url: `${WEBAPP_URL}?start=group_garden` },
            },
          ],
        ],
      },
    })
  }

  // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
  else if (queryText.includes('–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ kirakira')) {
    results.push({
      type: 'article',
      id: 'invite_friends',
      title: 'üå∏ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ KiraKira',
      description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏',
      input_message_content: {
        message_text: `üå∏ **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ KiraKira!**\n\n–°–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π! üíö\n\n‚ú® –£—á–∞—Å—Ç–≤—É–π –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\nü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥—Ä—É–∑–µ–π\nüèÜ –î–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–∏\n\nüöÄ –ù–∞—á–Ω–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏!`,
        parse_mode: 'Markdown',
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üå± –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
              web_app: { url: WEBAPP_URL },
            },
          ],
        ],
      },
    })
  }

  return results
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */
async function handleBotCommands(message) {
  const chatId = message.chat.id
  const command = message.text

  switch (command) {
    case '/start':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üå∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KiraKira!**\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–¥–∞.\n\nüå± –û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\nüèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\nüë• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }],
            [
              { text: 'üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
              { text: 'üë• –ö–æ–º—å—é–Ω–∏—Ç–∏', callback_data: 'community' },
            ],
          ],
        },
      }

    case '/garden':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üå± **–í–∞—à —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥**\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∞–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Ç–µ—Ç –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏.`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üå∏ –û—Ç–∫—Ä—ã—Ç—å —Å–∞–¥',
                web_app: { url: `${WEBAPP_URL}?tab=garden` },
              },
            ],
          ],
        },
      }

    case '/mood':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üíö **–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?**\n\n–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–∞–¥–∞!`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                web_app: { url: `${WEBAPP_URL}?tab=mood` },
              },
            ],
          ],
        },
      }

    case '/challenge':
      const challengeList = Object.entries(COMMUNITY_CHALLENGES)
        .map(
          ([id, challenge]) =>
            `${challenge.emoji} ${challenge.title} (${challenge.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`
        )
        .join('\n')

      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:**\n\n${challengeList}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üèÜ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
                web_app: { url: `${WEBAPP_URL}?tab=community` },
              },
            ],
          ],
        },
      }

    case '/stats':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìà –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                web_app: { url: `${WEBAPP_URL}?tab=stats` },
              },
            ],
          ],
        },
      }

    case '/help':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üÜò **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n/garden - –û—Ç–∫—Ä—ã—Ç—å –º–æ–π —Å–∞–¥\n/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n/challenge - –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\nüí° **–°–æ–≤–µ—Ç—ã:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @KiraKiraBot –≤ —á–∞—Ç–∞—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üå∏ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }],
          ],
        },
      }

    default:
      return null
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
 */
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id
  const data = callbackQuery.data

  switch (data) {
    case 'challenges':
      const challengeButtons = Object.entries(COMMUNITY_CHALLENGES).map(
        ([id, challenge]) => [
          {
            text: `${challenge.emoji} ${challenge.title}`,
            web_app: { url: `${WEBAPP_URL}?start=challenge_${id}` },
          },
        ]
      )

      return {
        method: 'editMessageText',
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        text: `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂:**\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –≤—ã–∑–æ–≤–∞–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º!`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            ...challengeButtons,
            [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
          ],
        },
      }

    case 'community':
      return {
        method: 'editMessageText',
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        text: `üë• **–ö–æ–º—å—é–Ω–∏—Ç–∏ KiraKira**\n\nü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\nüéØ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\nüåà –î–µ–ª–∏—Ç–µ—Å—å —ç–º–æ—Ü–∏—è–º–∏\nüèÜ –î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏',
                web_app: { url: `${WEBAPP_URL}?tab=community` },
              },
            ],
            [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
          ],
        },
      }

    case 'back_to_main':
      return {
        method: 'editMessageText',
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        text: `üå∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KiraKira!**\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–¥–∞.`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }],
            [
              { text: 'üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
              { text: 'üë• –ö–æ–º—å—é–Ω–∏—Ç–∏', callback_data: 'community' },
            ],
          ],
        },
      }

    default:
      return null
  }
}

// Webhook handler –¥–ª—è Vercel/Netlify
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const update = req.body

    let response = null

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline queries
    if (update.inline_query) {
      const results = await handleInlineQuery(update.inline_query)

      const answerInlineQuery = {
        method: 'answerInlineQuery',
        inline_query_id: update.inline_query.id,
        results: results,
        cache_time: 300,
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram API
      await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerInlineQuery`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(answerInlineQuery),
        }
      )
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    else if (update.message) {
      response = await handleBotCommands(update.message)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
    else if (update.callback_query) {
      response = await handleCallbackQuery(update.callback_query)

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback query
      await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: update.callback_query.id,
          }),
        }
      )
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if (response) {
      await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/${response.method}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(response),
        }
      )
    }

    res.status(200).json({ ok: true })
  } catch (error) {
    console.error('Bot webhook error:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
}
