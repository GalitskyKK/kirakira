-- ===============================================
-- üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö –§–ê–ô–õ–£ daily_quests_migration_fixed.sql
-- ===============================================

-- 1. –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
WITH duplicate_quests AS (
  SELECT 
    id,
    ROW_NUMBER() OVER (
      PARTITION BY telegram_id, quest_type, generated_at::date 
      ORDER BY generated_at ASC
    ) as rn
  FROM daily_quests
  WHERE status IN ('active', 'completed')
    AND generated_at >= CURRENT_DATE - INTERVAL '7 days'
)
DELETE FROM daily_quests 
WHERE id IN (
  SELECT id 
  FROM duplicate_quests 
  WHERE rn > 1
);

-- 2. –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
-- –ò—Å–ø–æ–ª—å–∑—É–µ–º generated_at::date –≤–º–µ—Å—Ç–æ DATE() —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
CREATE UNIQUE INDEX IF NOT EXISTS idx_daily_quests_unique_daily 
ON daily_quests (telegram_id, quest_type, generated_at::date)
WHERE status IN ('active', 'completed');

-- 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_daily_quests —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
DROP FUNCTION IF EXISTS generate_daily_quests(BIGINT, INTEGER);

CREATE OR REPLACE FUNCTION generate_daily_quests(
  p_telegram_id BIGINT,
  p_user_level INTEGER DEFAULT 1
)
RETURNS SETOF daily_quests AS $$
DECLARE
  quest_templates JSONB;
  selected_quests JSONB;
  quest_template JSONB;
  quest_record daily_quests%ROWTYPE;
  target_value INTEGER;
  rewards JSONB;
  expires_at TIMESTAMP WITH TIME ZONE;
  quest_count INTEGER := 3;
  i INTEGER;
BEGIN
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  IF EXISTS (
    SELECT 1 FROM daily_quests 
    WHERE telegram_id = p_telegram_id 
      AND generated_at >= CURRENT_DATE 
      AND status IN ('active', 'completed')
  ) THEN
    RAISE EXCEPTION 'User already has active quests for today';
  END IF;

  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü –¥–Ω—è)
  expires_at := (CURRENT_DATE + INTERVAL '1 day')::timestamp;
  
  -- –®–∞–±–ª–æ–Ω—ã –∫–≤–µ—Å—Ç–æ–≤
  quest_templates := '[
    {
      "type": "record_specific_mood",
      "category": "mood",
      "name": "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è",
      "description": "–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "emoji": "üòä",
      "weight": 8,
      "getTargetValue": "specific_mood"
    },
    {
      "type": "record_with_note",
      "category": "mood",
      "name": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
      "description": "–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π",
      "emoji": "üìù",
      "weight": 6,
      "getTargetValue": "with_note"
    },
    {
      "type": "collect_elements",
      "category": "garden",
      "name": "–°–∞–¥–æ–≤–æ–¥",
      "description": "–°–æ–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç",
      "emoji": "üå±",
      "weight": 10,
      "getTargetValue": "garden_elements"
    },
    {
      "type": "collect_rare_element",
      "category": "garden",
      "name": "–ò—Å–∫–∞—Ç–µ–ª—å —Å–æ–∫—Ä–æ–≤–∏—â",
      "description": "–ù–∞–π–¥–∏ —Ä–µ–¥–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç",
      "emoji": "üíé",
      "weight": 4,
      "getTargetValue": "rare_element"
    },
    {
      "type": "upgrade_element",
      "category": "garden",
      "name": "–£–ª—É—á—à–∞—Ç–µ–ª—å",
      "description": "–£–ª—É—á—à–∏ —ç–ª–µ–º–µ–Ω—Ç",
      "emoji": "‚¨ÜÔ∏è",
      "weight": 6,
      "getTargetValue": "upgrade_elements"
    },
    {
      "type": "visit_friend_garden",
      "category": "social",
      "name": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
      "description": "–ü–æ—Å–µ—Ç–∏ —Å–∞–¥ –¥—Ä—É–≥–∞",
      "emoji": "üë•",
      "weight": 7,
      "getTargetValue": "friend_visits"
    },
    {
      "type": "share_garden",
      "category": "social",
      "name": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
      "description": "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Å–∞–¥–æ–º",
      "emoji": "üì§",
      "weight": 4,
      "getTargetValue": "share_garden"
    },
    {
      "type": "maintain_streak",
      "category": "streak",
      "name": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
      "description": "–ü–æ–¥–¥–µ—Ä–∂–∏ —Å—Ç—Ä–∏–∫",
      "emoji": "üî•",
      "weight": 10,
      "getTargetValue": "maintain_streak"
    },
    {
      "type": "login_streak",
      "category": "streak",
      "name": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∏–∑–∏—Ç",
      "description": "–í–æ–π–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      "emoji": "üö™",
      "weight": 3,
      "getTargetValue": "login_streak"
    }
  ]'::jsonb;
  
  -- –í—ã–±–∏—Ä–∞–µ–º –∫–≤–µ—Å—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
  WITH quest_elements AS (
    SELECT 
      jsonb_array_elements(quest_templates) as quest,
      (jsonb_array_elements(quest_templates)->>'weight')::integer as weight
  ),
  weighted_quests AS (
    SELECT 
      quest,
      quest->>'type' as quest_type,
      ROW_NUMBER() OVER (ORDER BY RANDOM()) as rn
    FROM quest_elements
    CROSS JOIN generate_series(1, quest_elements.weight)
  ),
  selected AS (
    SELECT DISTINCT ON (quest_type) quest
    FROM weighted_quests
    ORDER BY quest_type, RANDOM()
    LIMIT quest_count
  )
  SELECT jsonb_agg(quest) INTO selected_quests
  FROM selected;
  
  -- –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç—ã
  FOR i IN 0..(jsonb_array_length(selected_quests) - 1) LOOP
    quest_template := selected_quests->i;
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º target_value (–ò–°–ü–†–ê–í–õ–ï–ù–û: collect_elements –≤—Å–µ–≥–¥–∞ 1)
    target_value := CASE quest_template->>'getTargetValue'
      WHEN 'specific_mood' THEN 1
      WHEN 'with_note' THEN 1
      WHEN 'garden_elements' THEN 1  -- –í–°–ï–ì–î–ê 1, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ–Ω—å
      WHEN 'rare_element' THEN 1
      WHEN 'upgrade_elements' THEN 1
      WHEN 'friend_visits' THEN 1
      WHEN 'share_garden' THEN 1
      WHEN 'maintain_streak' THEN 1
      WHEN 'login_streak' THEN 1
      ELSE 1
    END;
    
    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    rewards := jsonb_build_object(
      'sprouts', 30 * target_value + (p_user_level * 2),
      'gems', CASE WHEN target_value >= 3 AND p_user_level >= 10 THEN 1 ELSE 0 END,
      'experience', 50 * target_value + (p_user_level * 5),
      'description', (quest_template->>'description') || ' (' || target_value || ')'
    );
    
    -- –í—Å—Ç–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç
    INSERT INTO daily_quests (
      telegram_id,
      quest_type,
      quest_category,
      target_value,
      current_progress,
      status,
      rewards,
      expires_at,
      metadata
    ) VALUES (
      p_telegram_id,
      quest_template->>'type',
      quest_template->>'category',
      target_value,
      0,
      'active',
      rewards,
      expires_at,
      jsonb_build_object(
        'name', quest_template->>'name',
        'emoji', quest_template->>'emoji',
        'description', quest_template->>'description'
      )
    ) RETURNING * INTO quest_record;
    
    RETURN NEXT quest_record;
  END LOOP;
  
  RETURN;
END;
$$ LANGUAGE plpgsql;

-- 4. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
DO $$
DECLARE
  deleted_count INTEGER;
BEGIN
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RAISE NOTICE 'Applied quest fixes: deleted % duplicate quests, added unique constraint, updated function', deleted_count;
END $$;
