#!/usr/bin/env node

/**
 * ü§ñ –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î TELEGRAM –ë–û–¢–ê
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */

import fetch from 'node-fetch'

const BOT_TOKEN =
  process.env.TELEGRAM_BOT_TOKEN || process.env.VITE_TELEGRAM_BOT_TOKEN

if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

async function checkBotCommands() {
  console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞...\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã...')
    const response = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/getMyCommands`
    )
    const data = await response.json()

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${data.description}`)
    }

    console.log('‚úÖ –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:')
    if (data.result && data.result.length > 0) {
      data.result.forEach(cmd => {
        console.log(`   /${cmd.command} - ${cmd.description}`)
      })
    } else {
      console.log('   (–∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)')
    }

    console.log('')

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ notifications
    const hasNotificationsCommand = data.result?.some(
      cmd => cmd.command === 'notifications'
    )

    if (hasNotificationsCommand) {
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /notifications —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!')
    } else {
      console.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /notifications –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')

      // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      console.log('\nüîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...')

      const commands = [
        {
          command: 'start',
          description: 'üå∏ –ó–∞–ø—É—Å–∫ KiraKira - —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥',
        },
        { command: 'mood', description: 'üòä –ë—ã—Å—Ç—Ä–æ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
        { command: 'garden', description: 'üå± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–∞–¥' },
        { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' },
        { command: 'notifications', description: 'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' },
        { command: 'share', description: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏' },
        { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
      ]

      const setCommandsResponse = await fetch(
        `https://api.telegram.org/bot${BOT_TOKEN}/setMyCommands`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ commands }),
        }
      )

      const setCommandsData = await setCommandsResponse.json()

      if (setCommandsResponse.ok && setCommandsData.ok) {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        console.log('\nüìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:')
        commands.forEach(cmd => {
          console.log(`   /${cmd.command} - ${cmd.description}`)
        })
      } else {
        console.error(
          '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:',
          setCommandsData.description
        )
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook...')
    const webhookResponse = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`
    )
    const webhookData = await webhookResponse.json()

    if (webhookResponse.ok) {
      console.log('‚úÖ Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
      console.log(`   URL: ${webhookData.result.url || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`)
      console.log(
        `   –°—Ç–∞—Ç—É—Å: ${webhookData.result.has_custom_certificate ? '—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º' : '–±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'}`
      )
      console.log(
        `   –û—à–∏–±–∫–∏: ${webhookData.result.last_error_message || '–Ω–µ—Ç'}`
      )
      console.log(`   –ú–∞–∫—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${webhookData.result.max_connections}`)
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message)
    return false
  }

  return true
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkBotCommands()
  .then(success => {
    console.log(
      success ? '\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '\nüí• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!'
    )
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
