-- ===============================================
-- üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò generate_daily_quests
-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ target_value –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ —Å–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
-- ===============================================

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
DROP FUNCTION IF EXISTS generate_daily_quests(BIGINT, INTEGER);

-- –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
CREATE OR REPLACE FUNCTION generate_daily_quests(
  p_telegram_id BIGINT,
  p_user_level INTEGER DEFAULT 1
) RETURNS SETOF daily_quests AS $$
DECLARE
  quest_record daily_quests%ROWTYPE;
  quest_templates JSONB;
  selected_quests JSONB;
  quest_count INTEGER;
  i INTEGER;
  quest_template JSONB;
  target_value INTEGER;
  rewards JSONB;
  expires_at TIMESTAMP WITH TIME ZONE;
BEGIN
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  IF EXISTS (
    SELECT 1 FROM daily_quests 
    WHERE telegram_id = p_telegram_id 
      AND generated_at >= CURRENT_DATE 
      AND status IN ('active', 'completed')
  ) THEN
    RAISE EXCEPTION 'User already has active quests for today';
  END IF;

  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ 00:00 UTC
  expires_at := (CURRENT_DATE + INTERVAL '1 day')::timestamp with time zone;
  
  -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ (3-5 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è)
  quest_count := CASE 
    WHEN p_user_level <= 5 THEN 3
    WHEN p_user_level <= 15 THEN 4
    ELSE 5
  END;
  
  -- –®–∞–±–ª–æ–Ω—ã –∫–≤–µ—Å—Ç–æ–≤ —Å –≤–µ—Å–∞–º–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
  quest_templates := '[
    {
      "type": "record_mood_count",
      "category": "mood",
      "name": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "description": "–ó–∞–ø–∏—à–∏ {target} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π",
      "emoji": "üòä",
      "weight": 15,
      "getTargetValue": "mood_count"
    },
    {
      "type": "record_specific_mood",
      "category": "mood", 
      "name": "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "description": "–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–¥–æ—Å—Ç–∏",
      "emoji": "üòÑ",
      "weight": 8,
      "getTargetValue": "specific_mood"
    },
    {
      "type": "record_with_note",
      "category": "mood",
      "name": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
      "description": "–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π",
      "emoji": "üìù",
      "weight": 6,
      "getTargetValue": "with_note"
    },
    {
      "type": "collect_elements",
      "category": "garden",
      "name": "–°–∞–¥–æ–≤–æ–¥",
      "description": "–°–æ–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç",
      "emoji": "üå±",
      "weight": 12,
      "getTargetValue": "garden_elements"
    },
    {
      "type": "collect_rare_element",
      "category": "garden",
      "name": "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏",
      "description": "–ù–∞–π–¥–∏ —Ä–µ–¥–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç",
      "emoji": "üíé",
      "weight": 5,
      "getTargetValue": "rare_element"
    },
    {
      "type": "upgrade_element",
      "category": "garden",
      "name": "–£–ª—É—á—à–∞—Ç–µ–ª—å",
      "description": "–£–ª—É—á—à–∏ {target} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
      "emoji": "‚¨ÜÔ∏è",
      "weight": 8,
      "getTargetValue": "upgrade_elements"
    },
    {
      "type": "visit_friend_garden",
      "category": "social",
      "name": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–¥–æ–≤–æ–¥",
      "description": "–ü–æ—Å–µ—Ç–∏ {target} —Å–∞–¥–æ–≤ –¥—Ä—É–∑–µ–π",
      "emoji": "üë•",
      "weight": 6,
      "getTargetValue": "friend_visits"
    },
    {
      "type": "share_garden",
      "category": "social",
      "name": "–ü–æ–¥–µ–ª–∏—Å—å –∫—Ä–∞—Å–æ—Ç–æ–π",
      "description": "–ü–æ–¥–µ–ª–∏—Å—åÂ•π‰∏ç—Å–≤–æ–∏–º —Å–∞–¥–æ–º",
      "emoji": "üì§",
      "weight": 4,
      "getTargetValue": "share_garden"
    },
    {
      "type": "like_gardens",
      "category": "social",
      "name": "–õ–∞–π–∫–µ—Ä",
      "description": "–õ–∞–π–∫–Ω–∏ {target} —Å–∞–¥–æ–≤",
      "emoji": "‚ù§Ô∏è",
      "weight": 5,
      "getTargetValue": "like_gardens"
    },
    {
      "type": "maintain_streak",
      "category": "streak",
      "name": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
      "description": "–ü–æ–¥–¥–µ—Ä–∂–∏ —Å—Ç—Ä–∏–∫ {target} –¥–Ω–µ–π",
      "emoji": "üî•",
      "weight": 10,
      "getTargetValue": "maintain_streak"
    },
    {
      "type": "login_streak",
      "category": "streak",
      "name": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∏–∑–∏—Ç",
      "description": "–í–æ–π–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      "emoji": "üö™",
      "weight": 3,
      "getTargetValue": "login_streak"
    }
  ]'::jsonb;
  
  -- –í—ã–±–∏—Ä–∞–µ–º –∫–≤–µ—Å—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
  WITH quest_elements AS (
    SELECT 
      jsonb_array_elements(quest_templates) as quest,
      (jsonb_array_elements(quest_templates)->>'weight')::integer as weight
  ),
  weighted_quests AS (
    SELECT 
      quest,
      quest->>'type' as quest_type,
      ROW_NUMBER() OVER (ORDER BY RANDOM()) as rn
    FROM quest_elements
    CROSS JOIN generate_series(1, quest_elements.weight)
  ),
  selected AS (
    SELECT DISTINCT ON (quest_type) quest
    FROM weighted_quests
    ORDER BY quest_type, RANDOM()
    LIMIT quest_count
  )
  SELECT jsonb_agg(quest) INTO selected_quests
  FROM selected;
  
  -- –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç—ã
  FOR i IN 0..(jsonb_array_length(selected_quests) - 1) LOOP
    quest_template := selected_quests->i;
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º target_value –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: collect_elements –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç target_value = 1
    target_value := CASE quest_template->>'getTargetValue'
      WHEN 'mood_count' THEN LEAST(1 + FLOOR(p_user_level / 5), 3)
      WHEN 'specific_mood' THEN 1
      WHEN 'with_note' THEN 1
      WHEN 'garden_elements' THEN 1  -- –í–°–ï–ì–î–ê 1, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ–Ω—å
      WHEN 'rare_element' THEN 1
      WHEN 'upgrade_elements' THEN LEAST(1, FLOOR(p_user_level / 10))
      WHEN 'friend_visits' THEN LEAST(1 + FLOOR(p_user_level / 6), 3)
      WHEN 'share_garden' THEN 1
      WHEN 'like_gardens' THEN LEAST(2 + FLOOR(p_user_level / 4), 5)
      WHEN 'maintain_streak' THEN LEAST(1, FLOOR(p_user_level / 5))
      WHEN 'login_streak' THEN 1
      ELSE 1
    END;
    
    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    rewards := jsonb_build_object(
      'sprouts', 30 * target_value + (p_user_level * 2),
      'gems', CASE WHEN target_value >= 3 AND p_user_level >= 10 THEN 1 ELSE 0 END,
      'experience', 50 * target_value + (p_user_level * 5),
      'description', (quest_template->>'description') || ' (' || target_value || ')'
    );
    
    -- –í—Å—Ç–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç
    INSERT INTO daily_quests (
      telegram_id,
      quest_type,
      quest_category,
      target_value,
      current_progress,
      status,
      rewards,
      expires_at,
      metadata
    ) VALUES (
      p_telegram_id,
      quest_template->>'type',
      quest_template->>'category',
      target_value,
      0,
      'active',
      rewards,
      expires_at,
      jsonb_build_object(
        'name', quest_template->>'name',
        'emoji', quest_template->>'emoji',
        'description', quest_template->>'description'
      )
    ) RETURNING * INTO quest_record;
    
    RETURN NEXT quest_record;
  END LOOP;
  
  RETURN;
END;
$$ LANGUAGE plpgsql;

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
COMMENT ON FUNCTION generate_daily_quests IS '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3-5 —Å–ª—É—á–∞–π–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–°–ü–†–ê–í–õ–ï–ù–û: collect_elements –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç target_value = 1';
