/**
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
 * POST /api/premium/activate
 * Body: { telegramUserId: number, featureId: string }
 */

/**
 * üóÑÔ∏è SUPABASE: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} featureId - ID –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
 * @param {string} transactionId - ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} jwt - JWT —Ç–æ–∫–µ–Ω –¥–ª—è RLS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
async function activatePremiumFeature(
  telegramUserId,
  featureId,
  transactionId = null,
  jwt = null
) {
  try {
    console.log(
      `üóÑÔ∏è Activating premium feature in Supabase for user ${telegramUserId}:`,
      {
        featureId,
        transactionId,
        activatedAt: new Date().toISOString(),
      }
    )

    // üîí –ü–æ–ª—É—á–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç —Å JWT
    if (process.env.SUPABASE_URL) {
      try {
        let supabase

        // ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (jwt) {
          const { createAuthenticatedSupabaseClient } = await import(
            './_jwt.js'
          )
          console.log(
            '‚úÖ Using JWT-authenticated Supabase client (RLS enabled)'
          )
          supabase = await createAuthenticatedSupabaseClient(jwt)
        } else {
          // ‚ö†Ô∏è FALLBACK: SERVICE_ROLE_KEY –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
            throw new Error('Supabase credentials not configured')
          }
          console.warn('‚ö†Ô∏è Using SERVICE_ROLE_KEY (bypasses RLS)')
          const { createClient } = await import('@supabase/supabase-js')
          supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          )
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        const activationRecord = {
          telegram_id: telegramUserId,
          feature_id: featureId,
          transaction_id: transactionId,
          activated_at: new Date().toISOString(),
          expires_at: null, // –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏—Å—Ç–µ–∫–∞—é—Ç (–ø–æ–∫–∞)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π)
        const { data, error } = await supabase
          .from('premium_features')
          .upsert(activationRecord, {
            onConflict: 'telegram_id,feature_id',
          })
          .select()

        if (error) {
          throw new Error(
            `Supabase premium activation failed: ${error.message}`
          )
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏
        switch (featureId) {
          case 'rare_elements':
            console.log(
              `‚úÖ REALLY unlocked rare elements for user ${telegramUserId}`
            )
            break

          case 'seasonal_themes':
            console.log(
              `‚úÖ REALLY unlocked seasonal themes for user ${telegramUserId}`
            )
            break

          case 'analytics':
            console.log(
              `‚úÖ REALLY unlocked analytics for user ${telegramUserId}`
            )
            break

          case 'premium_bundle':
            console.log(
              `‚úÖ REALLY unlocked premium bundle (ALL features) for user ${telegramUserId}`
            )

            // –î–ª—è premium_bundle –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
            const allFeatures = [
              'rare_elements',
              'seasonal_themes',
              'analytics',
            ]
            const bundlePromises = allFeatures.map(feature =>
              supabase.from('premium_features').upsert(
                {
                  telegram_id: telegramUserId,
                  feature_id: feature,
                  transaction_id: transactionId,
                  activated_at: new Date().toISOString(),
                  expires_at: null,
                },
                {
                  onConflict: 'telegram_id,feature_id',
                }
              )
            )

            const bundleResults = await Promise.allSettled(bundlePromises)
            const failedFeatures = bundleResults.filter(
              result => result.status === 'rejected'
            )

            if (failedFeatures.length > 0) {
              console.warn(
                `‚ö†Ô∏è Some bundle features failed to activate:`,
                failedFeatures
              )
            } else {
              console.log(
                `‚úÖ All bundle features activated for user ${telegramUserId}`
              )
            }
            break

          default:
            console.error(`Unknown feature ID: ${featureId}`)
            return false
        }

        console.log(
          `‚úÖ Premium feature ${featureId} saved to Supabase for user ${telegramUserId}`
        )
        return true
      } catch (supabaseError) {
        console.error(
          `‚ùå Supabase premium activation failed:`,
          supabaseError.message
        )
        return false
      }
    }

    // üîÑ Fallback: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üìù Premium feature activated (no database):`, {
      telegramUserId,
      featureId,
      transactionId,
      activatedAt: new Date().toISOString(),
    })

    return true
  } catch (error) {
    console.error('Error activating premium feature:', error)
    return false
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { withAuth, verifyTelegramId } from './_auth.js'

/**
 * –ó–∞—â–∏—â–µ–Ω–Ω—ã–π API handler –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
 * @param {Request} req - Vercel Functions request object
 * @param {Response} res - Vercel Functions response object
 */
async function protectedHandler(req, res) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramUserId, featureId } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramUserId || typeof telegramUserId !== 'number') {
      return res
        .status(400)
        .json({ error: 'telegramUserId (number) is required' })
    }

    if (!featureId || typeof featureId !== 'string') {
      return res.status(400).json({ error: 'featureId (string) is required' })
    }

    // üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–µ–±—è
    if (!verifyTelegramId(telegramUserId, req.auth.telegramId)) {
      return res.status(403).json({
        success: false,
        error: 'Forbidden: You can only activate features for yourself',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
    const validFeatures = ['rare_elements', 'seasonal_themes', 'premium_bundle']
    if (!validFeatures.includes(featureId)) {
      return res.status(400).json({
        error: 'Invalid feature ID',
        validFeatures: validFeatures,
      })
    }

    console.log(
      `Processing premium activation request for user ${telegramUserId}, feature: ${featureId}`
    )

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—é —Å JWT
    const activated = await activatePremiumFeature(
      telegramUserId,
      featureId,
      null,
      req.auth?.jwt
    )

    if (!activated) {
      return res.status(500).json({
        success: false,
        error: 'Failed to activate premium feature',
      })
    }

    res.status(200).json({
      success: true,
      data: {
        telegramUserId,
        featureId,
        activated: true,
        activatedAt: new Date(),
      },
      message: 'Premium feature activated successfully',
    })
  } catch (error) {
    console.error('Error activating premium feature:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error?.message || 'Unknown error',
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π handler
export default withAuth(protectedHandler)
