/**
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * POST /api/mood/record
 * Body: { telegramUserId: number, mood: string, date: string }
 */

/**
 * üóÑÔ∏è SUPABASE: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} mood - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Date} date - –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
 * @param {string} note - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {number} intensity - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1-3)
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function saveMoodRecord(
  telegramUserId,
  mood,
  date,
  note = null,
  intensity = 2,
  telegramUserData = null
) {
  try {
    console.log(`üóÑÔ∏è Recording mood to Supabase for user ${telegramUserId}:`, {
      mood,
      date: date.toISOString(),
      note,
      intensity,
    })

    // üóÑÔ∏è SUPABASE –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {
      try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const { createClient } = await import('@supabase/supabase-js')

        const supabase = createClient(
          process.env.SUPABASE_URL,
          process.env.SUPABASE_SERVICE_ROLE_KEY
        )

        // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
        if (telegramUserData) {
          console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

          const { error: userError } = await supabase.rpc(
            'ensure_user_exists',
            {
              user_telegram_id: telegramUserId,
              user_first_name: telegramUserData.firstName || null,
              user_last_name: telegramUserData.lastName || null,
              user_username: telegramUserData.username || null,
            }
          )

          if (userError) {
            console.warn(`‚ö†Ô∏è User creation warning:`, userError.message)
          } else {
            console.log(`‚úÖ User ensured for ${telegramUserId}`)
          }
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        const moodEntry = {
          telegram_id: telegramUserId,
          mood: mood,
          mood_date: date.toISOString().split('T')[0], // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
          note: note,
          intensity: intensity,
          created_at: new Date().toISOString(),
        }

        console.log(`üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º mood entry:`, moodEntry)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π)
        const { data, error } = await supabase
          .from('mood_entries')
          .upsert(moodEntry, {
            onConflict: 'telegram_id,mood_date',
          })
          .select()

        if (error) {
          throw new Error(`Supabase mood insert failed: ${error.message}`)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUserStatsCache(supabase, telegramUserId)

        console.log(`‚úÖ Mood saved to Supabase for user ${telegramUserId}`)
        return true
      } catch (supabaseError) {
        console.error(`‚ùå Supabase mood save failed:`, supabaseError.message)
        return false
      }
    }

    // üîÑ Fallback: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üìù Mood recorded (no database):`, {
      telegramUserId,
      mood,
      date: date.toISOString(),
      note,
    })

    return true
  } catch (error) {
    console.error('Error recording mood:', error)
    return false
  }
}

/**
 * üìä –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 * @param {Object} supabase - –ö–ª–∏–µ–Ω—Ç Supabase
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateUserStatsCache(supabase, telegramUserId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
    const { data: stats, error } = await supabase.rpc('get_user_stats', {
      user_telegram_id: telegramUserId,
    })

    if (error) {
      console.warn(`‚ö†Ô∏è Stats update warning:`, error.message)
      return
    }

    if (stats && stats.length > 0) {
      const userStats = stats[0]

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { error: updateError } = await supabase
        .from('users')
        .update({
          total_days: userStats.total_days,
          current_streak: userStats.current_streak,
          longest_streak: userStats.longest_streak,
          total_elements: userStats.total_elements,
          rare_elements_found: userStats.rare_elements_found,
          updated_at: new Date().toISOString(),
        })
        .eq('telegram_id', telegramUserId)

      if (updateError) {
        console.warn(`‚ö†Ô∏è User stats cache update warning:`, updateError.message)
      } else {
        console.log(`üìä Updated stats cache for user ${telegramUserId}`)
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Stats cache update failed:`, error.message)
  }
}

/**
 * API handler –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Request} req - Vercel Functions request object
 * @param {Response} res - Vercel Functions response object
 */
export default async function handler(req, res) {
  // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  console.log('üîç API /mood/record called:', {
    method: req.method,
    headers: req.headers,
    body: req.body,
    timestamp: new Date().toISOString(),
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramUserId, mood, date, note, intensity, telegramUserData } =
      req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramUserId || typeof telegramUserId !== 'number') {
      return res
        .status(400)
        .json({ error: 'telegramUserId (number) is required' })
    }

    if (!mood || typeof mood !== 'string') {
      return res.status(400).json({ error: 'mood (string) is required' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const validMoods = ['joy', 'calm', 'stress', 'sadness', 'anger', 'anxiety']
    if (!validMoods.includes(mood)) {
      return res.status(400).json({
        error: 'Invalid mood value',
        validMoods: validMoods,
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏
    const recordDate = date ? new Date(date) : new Date()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (isNaN(recordDate.getTime())) {
      return res.status(400).json({ error: 'Invalid date format' })
    }

    console.log(`Recording mood for Telegram user ${telegramUserId}:`, {
      mood,
      date: recordDate.toISOString(),
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const saved = await saveMoodRecord(
      telegramUserId,
      mood,
      recordDate,
      note,
      intensity,
      telegramUserData
    )

    if (!saved) {
      return res.status(500).json({
        success: false,
        error: 'Failed to save mood record',
      })
    }

    res.status(200).json({
      success: true,
      data: {
        telegramUserId,
        mood,
        date: recordDate,
        recorded: true,
      },
      message: 'Mood recorded successfully',
    })
  } catch (error) {
    console.error('Error recording mood:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error?.message || 'Unknown error',
    })
  }
}
