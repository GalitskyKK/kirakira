/**
 * Webhook endpoint –¥–ª—è Telegram –±–æ—Ç–∞ KiraKiraGardenBot
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–ª–∞—Ç–µ–∂–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è
 *
 * –î–ª—è Vercel: —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ /api/telegram/webhook.js
 * –î–ª—è Express: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ middleware
 */

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel)

/**
 * ‚úÖ –ü–û–õ–£–ß–ê–ï–¢ –†–ï–ê–õ–¨–ù–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –∏–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * ‚úÖ –ì–û–¢–û–í–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API endpoints + CloudStorage —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserStats(telegramUserId) {
  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
    const response = await fetch(
      `${MINI_APP_URL}/api/user/stats?telegramId=${telegramUserId}`
    )

    if (!response.ok) {
      console.warn(`API request failed: ${response.status}`)
      return getDefaultStats()
    }

    const result = await response.json()

    if (result.success && result.data) {
      return result.data // hasData —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω –≤ API
    }

    return getDefaultStats()
  } catch (error) {
    console.error('Error getting user stats:', error)
    return getDefaultStats()
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @returns {Object} –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getDefaultStats() {
  return {
    totalDays: 0,
    currentStreak: 0,
    longestStreak: 0,
    totalElements: 0,
    rareElementsFound: 0,
    gardensShared: 0,
    dominantMood: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    hasData: false,
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {boolean} hasData - –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
function formatStatsForTelegram(stats, hasData = false) {
  if (!hasData) {
    return `üìä *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KiraKira!*

üå± –í—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–¥–∞.

üì± *–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ:*
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ –í—ã—Ä–∞—â–∏–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –°–æ–±–∏—Ä–∞—Ç—å —Ä–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

_–ü–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!_

üéØ **–°–æ–≤–µ—Ç:** –û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`
  }

  const moodEmojis = {
    —Ä–∞–¥–æ—Å—Ç—å: 'üòä',
    —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ: 'üòå',
    —Å—Ç—Ä–µ—Å—Å: 'üò∞',
    –≥—Ä—É—Å—Ç—å: 'üò¢',
    –≥–Ω–µ–≤: 'üò†',
    —Ç—Ä–µ–≤–æ–≥–∞: 'üò∞',
    —ç–Ω–µ—Ä–≥–∏—è: '‚ö°',
  }

  const dominantMoodEmoji = moodEmojis[stats.dominantMood] || 'üòä'

  return `üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KiraKira*

üóìÔ∏è –î–Ω–µ–π —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º: ${stats.totalDays}
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${stats.currentStreak} –¥–Ω–µ–π
üìà –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${stats.longestStreak} –¥–Ω–µ–π
üå± –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∞–¥—É: ${stats.totalElements}
üíé –†–µ–¥–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${stats.rareElementsFound}
üîó –°–∞–¥–æ–≤ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å: ${stats.gardensShared}
${dominantMoodEmoji} –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${stats.dominantMood}

üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–º–µ—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!

_–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è._`
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} featureId - ID –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */
async function activatePremiumFeature(telegramUserId, featureId) {
  try {
    console.log(
      `Activating premium feature ${featureId} for user ${telegramUserId}`
    )

    // –ó–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
    const response = await fetch(`${MINI_APP_URL}/api/premium/activate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ telegramUserId, featureId }),
    })

    if (!response.ok) {
      console.error(`Premium activation API failed: ${response.status}`)
      return {
        success: false,
        error: `API request failed with status ${response.status}`,
      }
    }

    const result = await response.json()

    if (result.success) {
      console.log(
        `Premium feature ${featureId} activated successfully for user ${telegramUserId}`
      )
      return { success: true, featureId, data: result.data }
    } else {
      console.error(`Premium activation failed: ${result.error}`)
      return { success: false, error: result.error }
    }
  } catch (error) {
    console.error('Error activating premium feature:', error)
    return { success: false, error: error.message }
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} mood - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
async function updateUserMood(telegramUserId, mood) {
  try {
    console.log(`Recording mood ${mood} for user ${telegramUserId}`)

    // –ó–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const response = await fetch(`${MINI_APP_URL}/api/mood/record`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        telegramUserId,
        mood,
        date: new Date().toISOString(),
      }),
    })

    if (!response.ok) {
      console.error(`Mood recording API failed: ${response.status}`)
      return {
        success: false,
        error: `API request failed with status ${response.status}`,
      }
    }

    const result = await response.json()

    if (result.success) {
      console.log(
        `Mood ${mood} recorded successfully for user ${telegramUserId}`
      )
      return { success: true, mood, data: result.data }
    } else {
      console.error(`Mood recording failed: ${result.error}`)
      return { success: false, error: result.error }
    }
  } catch (error) {
    console.error('Error updating user mood:', error)
    return { success: false, error: error.message }
  }
}

/**
 * üå± –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} mood - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
 */
async function addGardenElement(telegramUserId, mood) {
  try {
    console.log(
      `Adding garden element for mood ${mood} for user ${telegramUserId}`
    )

    // –ü—Ä–æ—Å—Ç–æ–µ –º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const moodToElement = {
      joy: 'FLOWER',
      calm: 'TREE',
      stress: 'CRYSTAL',
      sadness: 'MUSHROOM',
      anger: 'STONE',
      anxiety: 'CRYSTAL',
    }

    const moodToRarity = {
      joy: 'common',
      calm: 'common',
      stress: 'uncommon',
      sadness: 'common',
      anger: 'uncommon',
      anxiety: 'rare',
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
    const element = {
      type: moodToElement[mood] || 'FLOWER',
      position: {
        x: Math.floor(Math.random() * 10), // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è 0-9
        y: Math.floor(Math.random() * 4), // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–ª–∫–∞ 0-3
      },
      unlockDate: new Date().toISOString(),
      mood: mood,
      rarity: moodToRarity[mood] || 'common',
    }

    // –ó–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
    const response = await fetch(`${MINI_APP_URL}/api/garden/add-element`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        telegramId: telegramUserId,
        element,
      }),
    })

    if (!response.ok) {
      console.error(`Garden element API failed: ${response.status}`)
      return {
        success: false,
        error: `API request failed with status ${response.status}`,
      }
    }

    const result = await response.json()

    if (result.success) {
      console.log(
        `Garden element ${element.type} added successfully for user ${telegramUserId}`
      )
      return { success: true, element, data: result.data }
    } else {
      console.error(`Garden element creation failed: ${result.error}`)
      return { success: false, error: result.error }
    }
  } catch (error) {
    console.error('Error adding garden element:', error)
    return { success: false, error: error.message }
  }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {number} amount - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param {string} payload - –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @returns {boolean} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
 */
function validatePayment(amount, currency, payload) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å XTR –¥–ª—è Telegram Stars)
    if (currency !== 'XTR') {
      console.error(`Invalid currency: ${currency}`)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (–¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à–∏–º —Ü–µ–Ω–∞–º)
    const validAmounts = [50, 100, 120] // –¶–µ–Ω—ã –≤ Stars
    if (!validAmounts.includes(amount)) {
      console.error(`Invalid amount: ${amount}`)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload (–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à–∏–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º)
    const validPayloads = ['rare_elements', 'seasonal_themes', 'premium_bundle']
    if (!validPayloads.includes(payload)) {
      console.error(`Invalid payload: ${payload}`)
      return false
    }

    return true
  } catch (error) {
    console.error('Error validating payment:', error)
    return false
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN =
  process.env.TELEGRAM_BOT_TOKEN || process.env.VITE_TELEGRAM_BOT_TOKEN
const MINI_APP_URL =
  process.env.VITE_APP_URL || 'https://kirakira-theta.vercel.app'

// –í Vercel Functions –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º VITE_
if (!BOT_TOKEN) {
  console.error(
    '‚ùå Neither TELEGRAM_BOT_TOKEN nor VITE_TELEGRAM_BOT_TOKEN found'
  )
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} extraParams - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –û—Ç–≤–µ—Ç Telegram API
 */
async function sendMessage(chatId, text, extraParams = {}) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

  const params = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown',
    ...extraParams,
  }

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(params),
    })

    return await response.json()
  } catch (error) {
    console.error('Error sending message:', error)
    return null
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
 * @returns {Object} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Telegram
 */
function createMiniAppKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: 'üå∏ –û—Ç–∫—Ä—ã—Ç—å KiraKira',
          web_app: { url: MINI_APP_URL },
        },
      ],
      [
        {
          text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
          switch_inline_query:
            'üå∏ –ü–æ–ø—Ä–æ–±—É–π KiraKira ‚Äî —Å–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥!',
        },
      ],
    ],
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 */
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} firstName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} startParam - –ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞
 */
async function handleStartCommand(chatId, userId, firstName, startParam) {
  let welcomeText = `üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KiraKira, ${firstName}!

–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –∂–¥–µ—Ç —Ç–µ–±—è. –û—Ç–º–µ—á–∞–π —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –Ω–∞–±–ª—é–¥–∞–π, –∫–∞–∫ –æ–Ω–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –∫–∞–º–Ω–∏.

‚ú® *–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏  
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º
‚Ä¢ –ü—Ä–µ–º–∏—É–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞ Telegram Stars

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏? üå±`

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä start (–¥–ª—è deep linking)
  if (startParam) {
    if (startParam.startsWith('premium_')) {
      welcomeText +=
        '\n\n‚≠ê *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:* –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!'
    } else if (startParam === 'shared') {
      welcomeText +=
        '\n\nüéÅ *–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥!* –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∞–¥.'
    }
  }

  await sendMessage(chatId, welcomeText, {
    reply_markup: createMiniAppKeyboard(),
  })
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
 */
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
 * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
 */
async function handleCommand(message) {
  const { chat, from, text } = message
  const command = text.split(' ')[0].replace('/', '')
  const startParam = text.split(' ')[1]

  switch (command) {
    case 'start':
      await handleStartCommand(chat.id, from.id, from.first_name, startParam)
      break

    case 'garden':
      await sendMessage(
        chat.id,
        'üå± *–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–≤–æ–π —Å–∞–¥...*\n\n–ó–∞–ø—É—Å–∫–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ª—é–±—É–π—Å—è —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –≤ –≤–∏–¥–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π!',
        {
          reply_markup: createMiniAppKeyboard(),
        }
      )
      break

    case 'mood':
      await sendMessage(
        chat.id,
        'üòä *–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?*\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ —è –¥–æ–±–∞–≤–ª—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–≤–æ–π —Å–∞–¥!',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üòä –†–∞–¥–æ—Å—Ç—å', callback_data: 'mood_joy' },
                { text: 'üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', callback_data: 'mood_calm' },
              ],
              [
                { text: 'üò∞ –°—Ç—Ä–µ—Å—Å', callback_data: 'mood_stress' },
                { text: 'üò¢ –ì—Ä—É—Å—Ç—å', callback_data: 'mood_sadness' },
              ],
              [
                { text: 'üò† –ì–Ω–µ–≤', callback_data: 'mood_anger' },
                { text: 'üò∞ –¢—Ä–µ–≤–æ–≥–∞', callback_data: 'mood_anxiety' },
              ],
              [
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                  web_app: { url: MINI_APP_URL },
                },
              ],
            ],
          },
        }
      )
      break

    case 'stats':
      await handleStatsCommand(chat.id, from.id)
      break

    case 'premium':
      await sendMessage(
        chat.id,
        `‚≠ê *–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ KiraKira*

‚ú® *–†–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞* ‚Äî 100‚≠ê
‚Ä¢ –†–∞–¥—É–∂–Ω—ã–µ —Ü–≤–µ—Ç—ã
‚Ä¢ –°–≤–µ—Ç—è—â–∏–µ—Å—è –∫—Ä–∏—Å—Ç–∞–ª–ª—ã  
‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∏–±—ã
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏

üëë *–°–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã* ‚Äî 50‚≠ê
‚Ä¢ –í–µ—Å–µ–Ω–Ω—è—è –ø–∞–ª–∏—Ç—Ä–∞
‚Ä¢ –õ–µ—Ç–Ω–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–∞–¥
‚Ä¢ –û—Å–µ–Ω–Ω–∏–µ –∫—Ä–∞—Å–∫–∏
‚Ä¢ –ó–∏–º–Ω—è—è —Å–∫–∞–∑–∫–∞

`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚ú® –†–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (100‚≠ê)',
                  callback_data: 'buy_rare_elements',
                },
              ],
              [
                {
                  text: 'üëë –°–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã (50‚≠ê)',
                  callback_data: 'buy_seasonal_themes',
                },
              ],
              [
                {
                  text: 'üéÅ –ö—É–ø–∏—Ç—å –≤—Å–µ —Å–æ —Å–∫–∏–¥–∫–æ–π (120‚≠ê)',
                  callback_data: 'buy_premium_bundle',
                },
              ],
              [
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                  web_app: { url: MINI_APP_URL },
                },
              ],
            ],
          },
        }
      )
      break

    case 'share':
      await sendMessage(
        chat.id,
        'üîó *–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Å–∞–¥–æ–º*\n\n–ü–æ–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º —Å–≤–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –∏—Ö –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏!',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞',
                  web_app: { url: MINI_APP_URL },
                },
              ],
              [
                {
                  text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                  switch_inline_query:
                    'üå∏ –ü–æ–ø—Ä–æ–±—É–π KiraKira ‚Äî —Å–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥! https://t.me/KiraKiraGardenBot?startapp',
                },
              ],
            ],
          },
        }
      )
      break

    case 'help':
      await sendMessage(
        chat.id,
        `‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ KiraKira*

üå∏ */start* - –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
üå± */garden* - –û—Ç–∫—Ä—ã—Ç—å –º–æ–π —Å–∞–¥  
üòä */mood* - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
üìä */stats* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚≠ê */premium* - –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
üîó */share* - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–º–µ—á–∞–π —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
2. –ù–∞–±–ª—é–¥–∞–π, –∫–∞–∫ —ç–º–æ—Ü–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ä–∞—Å—Ç–µ–Ω–∏—è
3. –î–µ–ª–∏—Å—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ —Å–∞–¥–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏
4. –ò–∑—É—á–∞–π —Å–≤–æ–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü–∏—à–∏ @support_username`,
        {
          reply_markup: createMiniAppKeyboard(),
        }
      )
      break

    default:
      await sendMessage(
        chat.id,
        'ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
        {
          reply_markup: createMiniAppKeyboard(),
        }
      )
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
 */
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
 * @param {Object} callbackQuery - –û–±—ä–µ–∫—Ç callback query
 */
async function handleCallbackQuery(callbackQuery) {
  const { id, from, data, message } = callbackQuery

  try {
    if (data.startsWith('mood_')) {
      await handleMoodSelection(callbackQuery)
    } else if (data.startsWith('buy_')) {
      await handlePremiumPurchase(callbackQuery)
    } else if (data === 'show_stats') {
      await handleStatsCommand(message.chat.id, from.id)
    } else if (data === 'quick_mood') {
      await sendMessage(
        message.chat.id,
        'üòä *–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?*\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üòä –†–∞–¥–æ—Å—Ç—å', callback_data: 'mood_joy' },
                { text: 'üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', callback_data: 'mood_calm' },
              ],
              [
                { text: 'üò∞ –°—Ç—Ä–µ—Å—Å', callback_data: 'mood_stress' },
                { text: 'üò¢ –ì—Ä—É—Å—Ç—å', callback_data: 'mood_sadness' },
              ],
              [
                { text: 'üò† –ì–Ω–µ–≤', callback_data: 'mood_anger' },
                { text: 'üò∞ –¢—Ä–µ–≤–æ–≥–∞', callback_data: 'mood_anxiety' },
              ],
            ],
          },
        }
      )
    } else if (data === 'share_garden') {
      await sendMessage(
        message.chat.id,
        'üîó *–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∞–¥–æ–º!*',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                  switch_inline_query:
                    'üå∏ –ü–æ–ø—Ä–æ–±—É–π KiraKira ‚Äî —Å–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥!',
                },
              ],
              [
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞',
                  web_app: { url: MINI_APP_URL },
                },
              ],
            ],
          },
        }
      )
    } else if (data.startsWith('confirm_purchase_')) {
      const itemId = data.replace('confirm_purchase_', '')

      // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ API
      await sendMessage(
        message.chat.id,
        `‚úÖ *–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\nüåü –¢–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º —Å–∞–¥—É –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è:\n‚Ä¢ –†–∞–¥—É–∂–Ω—ã–µ —Ü–≤–µ—Ç—ã üåà\n‚Ä¢ –°–≤–µ—Ç—è—â–∏–µ—Å—è –∫—Ä–∏—Å—Ç–∞–ª–ª—ã üí´\n‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∏–±—ã üîÆ\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üå± –û—Ç–∫—Ä—ã—Ç—å —Å–∞–¥', web_app: { url: MINI_APP_URL } }],
              [{ text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'quick_mood' }],
            ],
          },
        }
      )

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ API
      const result = await activatePremiumFeature(from.id, itemId)

      if (result.success) {
        console.log(`Premium feature ${itemId} activated for user ${from.id}`)
      } else {
        console.error(`Failed to activate premium feature: ${result.error}`)
      }
    }
  } catch (error) {
    console.error('Callback query error:', error)
  }

  // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: id }),
  })
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 * @param {Object} callbackQuery - –û–±—ä–µ–∫—Ç callback query
 */
async function handleMoodSelection(callbackQuery) {
  const { from, data, message } = callbackQuery
  const mood = data.replace('mood_', '')

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const moodResult = await updateUserMood(from.id, mood)

  // üå± –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ
  let gardenResult = null
  if (moodResult.success) {
    gardenResult = await addGardenElement(from.id, mood)
  }

  const moodEmojis = {
    joy: 'üòä',
    calm: 'üòå',
    stress: 'üò∞',
    sadness: 'üò¢',
    anger: 'üò†',
    anxiety: 'üò∞',
  }

  const moodLabels = {
    joy: '—Ä–∞–¥–æ—Å—Ç—å',
    calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    stress: '—Å—Ç—Ä–µ—Å—Å',
    sadness: '–≥—Ä—É—Å—Ç—å',
    anger: '–≥–Ω–µ–≤',
    anxiety: '—Ç—Ä–µ–≤–æ–≥–∞',
  }

  const moodElements = {
    joy: 'üå∏ –∫—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫',
    calm: 'üåø —Å–ø–æ–∫–æ–π–Ω—É—é —Ç—Ä–∞–≤—É',
    stress: '‚ö° —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
    sadness: 'üçÑ —Ç–∏—Ö–∏–π –≥—Ä–∏–±',
    anger: 'üî• –æ–≥–Ω–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å',
    anxiety: 'üíé –∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
  }

  const element = moodElements[mood] || 'üå± —Ä–∞—Å—Ç–µ–Ω–∏–µ'
  const emoji = moodEmojis[mood] || 'üå∏'
  const moodLabel = moodLabels[mood] || mood

  const resultMessage = moodResult.success
    ? `${emoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!*

–¢–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "${moodLabel}" –¥–æ–±–∞–≤–∏–ª–æ ${element} –≤ —Ç–≤–æ–π —Å–∞–¥.

üå± –≠–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞: –∫–∞–∂–¥–∞—è —ç–º–æ—Ü–∏—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª
üì± –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ç—É—â–∏–π —Å–∞–¥!

_–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!_`
    : `${emoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!*

–ú—ã –∑–∞–ø–∏—Å–∞–ª–∏ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "${moodLabel}". 

üì± –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞–∫ –æ–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ —ç–ª–µ–º–µ–Ω—Ç —Ç–≤–æ–µ–≥–æ —Å–∞–¥–∞!

_–û—Ç–º–µ—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞._`

  await sendMessage(message.chat.id, resultMessage, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üå± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–¥', web_app: { url: MINI_APP_URL } },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' },
        ],
        [{ text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: 'share_garden' }],
      ],
    },
  })
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º–∞
 */
async function handlePremiumPurchase(callbackQuery) {
  const { from, data, message } = callbackQuery

  const premiumItems = {
    buy_rare_elements: {
      name: '–†–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞',
      price: 100,
      id: 'rare_elements',
    },
    buy_seasonal_themes: {
      name: '–°–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã',
      price: 50,
      id: 'seasonal_themes',
    },
    buy_premium_bundle: {
      name: '–ü—Ä–µ–º–∏—É–º –∫–æ–º–ø–ª–µ–∫—Ç',
      price: 120,
      id: 'premium_bundle',
    },
  }

  const item = premiumItems[data]
  if (!item) return

  // –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è Telegram Stars
  await sendMessage(
    message.chat.id,
    `‚≠ê *${item.name}*

–¶–µ–Ω–∞: ${item.price} Telegram Stars

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${item.price}‚≠ê`,
              callback_data: `confirm_purchase_${item.id}`,
            },
          ],
          [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: MINI_APP_URL } }],
        ],
      },
    }
  )
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleStatsCommand(chatId, userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const stats = await getUserStats(userId)

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (hasData —É–∂–µ –≤ –æ–±—ä–µ–∫—Ç–µ stats)
    const statsMessage = formatStatsForTelegram(stats, stats.hasData)

    await sendMessage(chatId, statsMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              web_app: { url: MINI_APP_URL },
            },
          ],
          [
            { text: 'üå± –ú–æ–π —Å–∞–¥', web_app: { url: MINI_APP_URL } },
            { text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'quick_mood' },
          ],
          [
            {
              text: '‚≠ê –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏',
              callback_data: 'buy_premium_bundle',
            },
          ],
        ],
      },
    })
  } catch (error) {
    console.error('Error handling stats command:', error)

    // Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await sendMessage(
      chatId,
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*

–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: MINI_APP_URL } }],
          ],
        },
      }
    )
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
 */
async function handlePreCheckoutQuery(preCheckoutQuery) {
  const { id, from, currency, total_amount, invoice_payload } = preCheckoutQuery

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  console.log(
    `Pre-checkout: User ${from.id} wants to pay ${total_amount} ${currency} for ${invoice_payload}`
  )

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
  const isValidPayment = validatePayment(
    total_amount,
    currency,
    invoice_payload
  )

  if (!isValidPayment) {
    console.error(`Invalid payment attempt from user ${from.id}`)
    // –í —Å–ª—É—á–∞–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –µ–≥–æ
    // –ù–æ –ø–æ–∫–∞ –æ–¥–æ–±—Ä—è–µ–º –≤—Å–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
  }

  // –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerPreCheckoutQuery`

  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      pre_checkout_query_id: id,
      ok: true,
    }),
  })
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
 */
async function handleSuccessfulPayment(message) {
  const { successful_payment, chat, from } = message
  const { currency, total_amount, invoice_payload } = successful_payment

  console.log(
    `Payment successful: User ${from.id} paid ${total_amount} ${currency} for ${invoice_payload}`
  )

  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const activationResult = await activatePremiumFeature(
    from.id,
    invoice_payload
  )

  if (activationResult.success) {
    console.log(
      `Premium feature ${invoice_payload} activated for user ${from.id} after payment`
    )
  } else {
    console.error(
      `Failed to activate premium after payment: ${activationResult.error}`
    )
  }

  await sendMessage(
    chat.id,
    `üéâ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–≤–æ–µ–º —Å–∞–¥—É.

üí´ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –†–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏  
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–û—Ç–∫—Ä—ã–≤–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏! üåü`,
    {
      reply_markup: createMiniAppKeyboard(),
    }
  )
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline query –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
 */
async function handleInlineQuery(inlineQuery) {
  const { id, query, from } = inlineQuery

  const results = [
    {
      type: 'article',
      id: '1',
      title: 'üå∏ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ KiraKira',
      description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∞–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏',
      input_message_content: {
        message_text: `üå∏ *–ü–æ–ø—Ä–æ–±—É–π KiraKira ‚Äî —Å–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥!*

–ü—Ä–µ–≤—Ä–∞—â–∞–π —Å–≤–æ–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ö–∞–∂–¥–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–¥–∞.

‚ú® –¢–µ–±—è –∂–¥–µ—Ç:
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–∞–º–∏

–ù–∞—á–Ω–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üå±

[–û—Ç–∫—Ä—ã—Ç—å KiraKira](https://t.me/KiraKiraGardenBot?startapp)`,
        parse_mode: 'Markdown',
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üå∏ –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
              url: 'https://t.me/KiraKiraGardenBot?startapp',
            },
          ],
        ],
      },
    },
  ]

  const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerInlineQuery`

  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      inline_query_id: id,
      results: results,
      cache_time: 300,
    }),
  })
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–∞
 * @param {Request} req - Vercel Functions request object
 * @param {Response} res - Vercel Functions response object
 */
export default async function handler(req, res) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
  if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN environment variable is missing')
    return res.status(500).json({ error: 'Bot token not configured' })
  }

  // GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  if (req.method === 'GET') {
    return res.status(200).json({
      status: 'Webhook is running',
      botConfigured: !!BOT_TOKEN,
      timestamp: new Date().toISOString(),
    })
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è webhook
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const update = req.body

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (update.message) {
      if (update.message.text && update.message.text.startsWith('/')) {
        await handleCommand(update.message)
      } else if (update.message.successful_payment) {
        await handleSuccessfulPayment(update.message)
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query)
    } else if (update.pre_checkout_query) {
      await handlePreCheckoutQuery(update.pre_checkout_query)
    } else if (update.inline_query) {
      await handleInlineQuery(update.inline_query)
    }

    res.status(200).json({ ok: true })
  } catch (error) {
    console.error('Webhook error:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
}

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Express
if (typeof module !== 'undefined' && module.exports) {
  module.exports = handler
}
