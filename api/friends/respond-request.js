/**
 * API –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã (–ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ user/stats.js)
async function getSupabaseClient() {
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, requesterTelegramId, action } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !requesterTelegramId || !action) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required parameters: telegramId, requesterTelegramId, action',
      })
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = await getSupabaseClient()

    if (!['accept', 'decline'].includes(action)) {
      return res.status(400).json({
        success: false,
        error: 'Action must be either "accept" or "decline"',
      })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
    const { data: friendship, error: findError } = await supabase
      .from('friendships')
      .select('id, status, requester_telegram_id, addressee_telegram_id')
      .eq('requester_telegram_id', requesterTelegramId)
      .eq('addressee_telegram_id', telegramId)
      .eq('status', 'pending')
      .single()

    if (findError || !friendship) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    const newStatus = action === 'accept' ? 'accepted' : 'declined'

    const { data: updatedFriendship, error: updateError } = await supabase
      .from('friendships')
      .update({
        status: newStatus,
        updated_at: new Date().toISOString(),
      })
      .eq('id', friendship.id)
      .select()
      .single()

    if (updateError) {
      console.error('Friendship update error:', updateError)
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–∂–±—ã',
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const [{ data: requester }, { data: addressee }] = await Promise.all([
      supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', requesterTelegramId)
        .single(),
      supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', telegramId)
        .single(),
    ])

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å–∞
    try {
      let notificationMessage = ''
      if (action === 'accept') {
        notificationMessage = `üéâ ${addressee.first_name} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –≤–º–µ—Å—Ç–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ KiraKira!`
      } else {
        notificationMessage = `üòî ${addressee.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –≤ KiraKira.`
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await sendTelegramNotification(
        requesterTelegramId,
        notificationMessage,
        action === 'accept'
      )
    } catch (notificationError) {
      console.warn('Failed to send notification:', notificationError)
    }

    const responseMessage =
      action === 'accept'
        ? `–í—ã —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è —Å ${requester.first_name}!`
        : `–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç ${requester.first_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω`

    res.status(200).json({
      success: true,
      data: {
        friendshipId: updatedFriendship.id,
        status: newStatus,
        message: responseMessage,
      },
    })
  } catch (error) {
    console.error('Respond to friend request error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot
async function sendTelegramNotification(telegramId, message, isAccepted) {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    return
  }

  try {
    const buttons = isAccepted
      ? [
          [
            {
              text: 'üå∏ –û—Ç–∫—Ä—ã—Ç—å KiraKira',
              web_app: { url: process.env.WEBAPP_URL + '?tab=community' },
            },
          ],
        ]
      : []

    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: telegramId,
          text: message,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: buttons,
          },
        }),
      }
    )

    if (!response.ok) {
      console.warn('Failed to send Telegram notification:', response.status)
    }
  } catch (error) {
    console.warn('Telegram notification error:', error)
  }
}
