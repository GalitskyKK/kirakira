/**
 * API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
 */

import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { requesterTelegramId, addresseeTelegramId } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!requesterTelegramId || !addresseeTelegramId) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required parameters: requesterTelegramId, addresseeTelegramId',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ
    if (requesterTelegramId === addresseeTelegramId) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã —Å–∞–º–æ–º—É —Å–µ–±–µ',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [{ data: requester }, { data: addressee }] = await Promise.all([
      supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', requesterTelegramId)
        .single(),
      supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', addresseeTelegramId)
        .single(),
    ])

    if (!requester || !addressee) {
      return res.status(404).json({
        success: false,
        error: '–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const { data: existingFriendship } = await supabase
      .from('friendships')
      .select('status, requester_telegram_id')
      .or(
        `and(requester_telegram_id.eq.${requesterTelegramId},addressee_telegram_id.eq.${addresseeTelegramId}),` +
          `and(requester_telegram_id.eq.${addresseeTelegramId},addressee_telegram_id.eq.${requesterTelegramId})`
      )
      .single()

    if (existingFriendship) {
      let message = ''
      switch (existingFriendship.status) {
        case 'accepted':
          message = '–í—ã —É–∂–µ –¥—Ä—É–∑—å—è'
          break
        case 'pending':
          if (
            existingFriendship.requester_telegram_id === requesterTelegramId
          ) {
            message = '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
          } else {
            message = '–£ –≤–∞—Å –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          }
          break
        case 'declined':
          message = '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω'
          break
        case 'blocked':
          message = '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
          break
      }
      return res.status(400).json({
        success: false,
        error: message,
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
    const { data: newFriendship, error: insertError } = await supabase
      .from('friendships')
      .insert({
        requester_telegram_id: requesterTelegramId,
        addressee_telegram_id: addresseeTelegramId,
        status: 'pending',
      })
      .select()
      .single()

    if (insertError) {
      console.error('Friendship creation error:', insertError)
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã',
      })
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try {
      const notificationMessage = `ü§ù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã!\n\n${requester.first_name} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è –≤ KiraKira!\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Bot API
      // await sendTelegramNotification(addresseeTelegramId, notificationMessage)
    } catch (notificationError) {
      console.warn('Failed to send notification:', notificationError)
    }

    res.status(200).json({
      success: true,
      data: {
        friendshipId: newFriendship.id,
        message: `–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${addressee.first_name}!`,
      },
    })
  } catch (error) {
    console.error('Send friend request error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot
async function sendTelegramNotification(telegramId, message) {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    return
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: telegramId,
          text: message,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã',
                  web_app: {
                    url:
                      process.env.WEBAPP_URL + '?tab=community&view=requests',
                  },
                },
              ],
            ],
          },
        }),
      }
    )

    if (!response.ok) {
      console.warn('Failed to send Telegram notification:', response.status)
    }
  } catch (error) {
    console.warn('Telegram notification error:', error)
  }
}
