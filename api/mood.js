/**
 * üòä –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –ù–ê–°–¢–†–û–ï–ù–ò–ô
 * –í–∫–ª—é—á–∞–µ—Ç: record, history
 */

// üîí –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase —Å JWT (RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
async function getSupabaseClient(jwt = null) {
  if (!process.env.SUPABASE_URL) {
    throw new Error('SUPABASE_URL not configured')
  }

  // ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (jwt) {
    try {
      const { createAuthenticatedSupabaseClient } = await import('./_jwt.js')
      console.log('‚úÖ Using JWT-authenticated Supabase client (RLS enabled)')
      return await createAuthenticatedSupabaseClient(jwt)
    } catch (error) {
      console.error('‚ùå Failed to create JWT client:', error)
      // Fallback –Ω–∞ SERVICE_ROLE_KEY –Ω–∏–∂–µ
    }
  }

  // ‚ö†Ô∏è FALLBACK: SERVICE_ROLE_KEY (–º–∏–Ω—É–µ—Ç RLS, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è admin –æ–ø–µ—Ä–∞—Ü–∏–π)
  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase credentials not configured')
  }

  console.warn('‚ö†Ô∏è Using SERVICE_ROLE_KEY (bypasses RLS) - migrate to JWT!')
  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// ‚úçÔ∏è ACTION: RECORD - –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
// ===============================================
async function handleRecord(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const {
      telegramUserId,
      mood,
      date,
      note = null,
      intensity = 2,
      telegramUserData = null,
    } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramUserId || !mood || !date) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramUserId, mood, date',
      })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è mood
    const validMoods = ['joy', 'calm', 'stress', 'sadness', 'anger', 'anxiety']
    if (!validMoods.includes(mood)) {
      return res.status(400).json({
        success: false,
        error: `Invalid mood. Must be one of: ${validMoods.join(', ')}`,
      })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è intensity
    if (intensity < 1 || intensity > 10) {
      return res.status(400).json({
        success: false,
        error: 'Intensity must be between 1 and 10',
      })
    }

    console.log(`üóÑÔ∏è Recording mood to Supabase for user ${telegramUserId}:`, {
      mood,
      date: new Date(date).toISOString(),
      note,
      intensity,
    })

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
    if (telegramUserData) {
      console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

      const { error: userError } = await supabase.from('users').upsert(
        {
          telegram_id: telegramUserId,
          user_id: telegramUserData.userId || `user_${telegramUserId}`,
          username: telegramUserData.username || null,
          first_name: telegramUserData.firstName || null,
          last_name: telegramUserData.lastName || null,
          language_code: telegramUserData.languageCode || 'ru',
          photo_url: telegramUserData.photoUrl || null,
          // registration_date –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ created_at (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î)
          last_visit_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
        {
          onConflict: 'telegram_id',
        }
      )

      if (userError) {
        console.error('Auto user creation error:', userError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      } else {
        console.log(`‚úÖ User ${telegramUserId} ensured in database`)
      }
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É –≤ —Å–≤–æ–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
    const moodDate = new Date(date)

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (YYYY-MM-DD) –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç UTC
    const userYear = moodDate.getFullYear()
    const userMonth = String(moodDate.getMonth() + 1).padStart(2, '0')
    const userDay = String(moodDate.getDate()).padStart(2, '0')
    const formattedDate = `${userYear}-${userMonth}-${userDay}`

    console.log(
      `üìÖ Date processing: client sent ${date}, saving as ${formattedDate}`
    )

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –∑–∞–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    const { data, error } = await supabase
      .from('mood_entries')
      .upsert(
        {
          telegram_id: telegramUserId,
          mood: mood,
          intensity: intensity,
          note: note,
          mood_date: formattedDate,
        },
        {
          onConflict: 'telegram_id,mood_date',
        }
      )
      .select()

    if (error) {
      console.error('Supabase mood record failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to save mood record',
      })
    }

    console.log(`‚úÖ Mood recorded to Supabase for user ${telegramUserId}`)

    // üî• V3: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
    const { data: userData, error: userFetchError } = await supabase
      .from('users')
      .select('current_streak, streak_last_checkin')
      .eq('telegram_id', telegramUserId)
      .single()

    if (!userFetchError && userData) {
      const lastCheckin = userData.streak_last_checkin
        ? new Date(userData.streak_last_checkin)
        : null
      const todayDate = new Date(formattedDate)
      todayDate.setUTCHours(0, 0, 0, 0)

      let newStreak = userData.current_streak || 0

      if (lastCheckin) {
        lastCheckin.setUTCHours(0, 0, 0, 0)
        const diffDays = Math.floor(
          (todayDate - lastCheckin) / (1000 * 60 * 60 * 24)
        )

        if (diffDays === 1) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
          newStreak = newStreak + 1
          console.log(`üìà Streak continues: ${newStreak}`)
        } else if (diffDays === 0) {
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å - —Å—Ç—Ä–∏–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
          console.log(`üîÑ Same day mood update, streak unchanged: ${newStreak}`)
        } else {
          // –°—Ç—Ä–∏–∫ –ø—Ä–µ—Ä–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
          newStreak = 1
          console.log(`üîÅ Streak broken, starting new: ${newStreak}`)
        }
      } else {
        // –ü–µ—Ä–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        newStreak = 1
        console.log(`üÜï First mood check-in, streak: ${newStreak}`)
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π longest_streak –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const { data: userFullData } = await supabase
        .from('users')
        .select('longest_streak')
        .eq('telegram_id', telegramUserId)
        .single()

      const currentLongestStreak = userFullData?.longest_streak || 0

      // –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ –¥–∞—Ç—É –≤ –ë–î
      const { error: streakError } = await supabase
        .from('users')
        .update({
          current_streak: newStreak,
          longest_streak: Math.max(newStreak, currentLongestStreak),
          streak_last_checkin: formattedDate,
          last_visit_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        })
        .eq('telegram_id', telegramUserId)

      if (streakError) {
        console.warn('Failed to update streak:', streakError)
      } else {
        console.log(`‚úÖ Streak updated to ${newStreak}`)
      }
    }

    // üèÜ –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ü–´–¢ –ó–ê –ó–ê–ü–ò–°–¨ –ù–ê–°–¢–†–û–ï–ù–ò–Ø (JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RPC)
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –∑–∞–ø–∏—Å—å –∑–∞ –¥–µ–Ω—å
      const today = formattedDate
      const { data: todayEntries } = await supabase
        .from('mood_entries')
        .select('id')
        .eq('telegram_id', telegramUserId)
        .eq('mood_date', today)

      const isFirstToday = !todayEntries || todayEntries.length <= 1
      const experiencePoints = isFirstToday ? 20 : 10 // FIRST_MOOD_OF_DAY : DAILY_MOOD

      // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Å —Ç–µ–º –∂–µ JWT-–∫–ª–∏–µ–Ω—Ç–æ–º (—Å–æ–±–ª—é–¥–∞–µ—Ç RLS)
      const { data: xpResult, error: xpError } = await supabase.rpc(
        'add_user_experience',
        {
          p_telegram_id: telegramUserId,
          p_experience_points: experiencePoints,
        }
      )

      if (xpError) {
        console.error('‚ùå CRITICAL: Failed to add XP for mood entry:', {
          error: xpError,
          telegram_id: telegramUserId,
          experience_points: experiencePoints,
          is_first_today: isFirstToday,
        })
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)
      } else {
        console.log(
          `üèÜ Added ${experiencePoints} XP for mood entry: ${mood} (${isFirstToday ? 'first today' : 'additional'})`,
          xpResult?.[0] || xpResult
        )

        // üéâ –ï—Å–ª–∏ –±—ã–ª level up, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º (–≠—Ç–∞–ø 2)
        const xpData = xpResult?.[0]
        if (xpData?.level_up) {
          res.status(200).json({
            success: true,
            data: {
              id: data?.[0]?.id,
              saved: true,
              storage: 'supabase',
              mood: mood,
              date: formattedDate,
              intensity: intensity,
              note: note,
              message: 'Mood recorded successfully',
              // üÜï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ level up
              levelUp: {
                leveledUp: true,
                newLevel: xpData.new_level,
                newExperience: xpData.new_experience,
                sproutReward: xpData.sprout_reward || 0,
                gemReward: xpData.gem_reward || 0,
                specialUnlock: xpData.special_unlock || null,
              },
            },
          })
          return
        }
      }
    } catch (xpError) {
      console.error('‚ùå CRITICAL: Exception in XP addition:', {
        exception: xpError,
        telegram_id: telegramUserId,
        message: xpError?.message,
      })
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    }

    res.status(200).json({
      success: true,
      data: {
        id: data?.[0]?.id,
        saved: true,
        storage: 'supabase',
        mood: mood,
        date: formattedDate,
        intensity: intensity,
        note: note,
        message: 'Mood recorded successfully',
      },
    })
  } catch (error) {
    console.error('Mood record error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìÖ ACTION: TODAY - –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
// ===============================================
async function handleToday(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId } = req.query

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º JWT –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = req.headers.authorization
    const jwt = authHeader?.replace('Bearer ', '')

    if (!jwt) {
      return res.status(401).json({
        success: false,
        error: 'Missing JWT token',
      })
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º SERVICE_ROLE_KEY –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è JWT –æ—à–∏–±–æ–∫
    const supabase = await getSupabaseClient()

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    const today = new Date().toISOString().split('T')[0] // YYYY-MM-DD format

    const { data: todayEntries, error } = await supabase
      .from('mood_entries')
      .select('*')
      .eq('telegram_id', telegramId)
      .eq('mood_date', today)
      .order('created_at', { ascending: false })
      .limit(1)

    if (error) {
      console.error('Database error:', error)
      return res.status(500).json({
        success: false,
        error: 'Database error',
      })
    }

    const todaysMood =
      todayEntries && todayEntries.length > 0 ? todayEntries[0] : null

    return res.status(200).json({
      success: true,
      data: {
        mood: todaysMood ? todaysMood.mood : null,
        moodEntry: todaysMood,
        canCheckin: !todaysMood, // –ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏
      },
    })
  } catch (error) {
    console.error("Error getting today's mood:", error)
    return res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: HISTORY - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
// ===============================================
async function handleHistory(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, limit, offset = 0 } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(`üìñ Loading mood history from Supabase for user ${telegramId}`)

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
    let query = supabase
      .from('mood_entries')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('mood_date', { ascending: false })

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (limit) {
      query = query.limit(parseInt(limit))
    }
    if (offset) {
      query = query.range(
        parseInt(offset),
        parseInt(offset) + parseInt(limit || 100) - 1
      )
    }

    const { data, error } = await query

    if (error) {
      console.error('Supabase mood history fetch failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch mood history',
      })
    }

    console.log(`‚úÖ Loaded ${data.length} mood entries for user ${telegramId}`)

    res.status(200).json({
      success: true,
      data: {
        moodHistory: data, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç frontend
        total: data.length,
        storage: 'supabase',
      },
    })
  } catch (error) {
    console.error('Mood history error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { withAuth, verifyTelegramId } from './_auth.js'

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π handler —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
async function protectedHandler(req, res) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const requestedTelegramId = req.query.telegramId || req.body.telegramUserId

    if (
      requestedTelegramId &&
      !verifyTelegramId(requestedTelegramId, req.auth.telegramId)
    ) {
      return res.status(403).json({
        success: false,
        error: 'Forbidden: You can only access your own data',
      })
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'record':
        return await handleRecord(req, res)
      case 'history':
        return await handleHistory(req, res)
      case 'today':
        return await handleToday(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: record, history, today`,
        })
    }
  } catch (error) {
    console.error('Mood API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π handler
export default withAuth(protectedHandler)
