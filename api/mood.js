/**
 * üòä –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –ù–ê–°–¢–†–û–ï–ù–ò–ô
 * –í–∫–ª—é—á–∞–µ—Ç: record, history
 */

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
async function getSupabaseClient() {
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// ‚úçÔ∏è ACTION: RECORD - –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
// ===============================================
async function handleRecord(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const {
      telegramUserId,
      mood,
      date,
      note = null,
      intensity = 2,
      telegramUserData = null,
    } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramUserId || !mood || !date) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramUserId, mood, date',
      })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è mood
    const validMoods = ['joy', 'calm', 'stress', 'sadness', 'anger', 'anxiety']
    if (!validMoods.includes(mood)) {
      return res.status(400).json({
        success: false,
        error: `Invalid mood. Must be one of: ${validMoods.join(', ')}`,
      })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è intensity
    if (intensity < 1 || intensity > 10) {
      return res.status(400).json({
        success: false,
        error: 'Intensity must be between 1 and 10',
      })
    }

    const moodDate = new Date(date)

    console.log(`üóÑÔ∏è Recording mood to Supabase for user ${telegramUserId}:`, {
      mood,
      date: moodDate.toISOString(),
      note,
      intensity,
    })

    const supabase = await getSupabaseClient()

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
    if (telegramUserData) {
      console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

      const { error: userError } = await supabase.from('users').upsert(
        {
          telegram_id: telegramUserId,
          user_id: telegramUserData.userId || `user_${telegramUserId}`,
          username: telegramUserData.username || null,
          first_name: telegramUserData.firstName || null,
          last_name: telegramUserData.lastName || null,
          language_code: telegramUserData.languageCode || 'ru',
          photo_url: telegramUserData.photoUrl || null,
          // registration_date –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ created_at (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î)
          last_visit_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
        {
          onConflict: 'telegram_id',
        }
      )

      if (userError) {
        console.error('Auto user creation error:', userError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      } else {
        console.log(`‚úÖ User ${telegramUserId} ensured in database`)
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è PostgreSQL (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    const formattedDate = moodDate.toISOString().split('T')[0]

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –∑–∞–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    const { data, error } = await supabase
      .from('mood_entries')
      .upsert(
        {
          telegram_id: telegramUserId,
          mood: mood,
          intensity: intensity,
          note: note,
          mood_date: formattedDate,
        },
        {
          onConflict: 'telegram_id,mood_date',
        }
      )
      .select()

    if (error) {
      console.error('Supabase mood record failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to save mood record',
      })
    }

    console.log(`‚úÖ Mood recorded to Supabase for user ${telegramUserId}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    const { error: streakError } = await supabase
      .from('users')
      .update({
        last_visit_date: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq('telegram_id', telegramUserId)

    if (streakError) {
      console.warn('Failed to update user mood streak:', streakError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // üèÜ –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ü–´–¢ –ó–ê –ó–ê–ü–ò–°–¨ –ù–ê–°–¢–†–û–ï–ù–ò–Ø
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –∑–∞–ø–∏—Å—å –∑–∞ –¥–µ–Ω—å
      const today = formattedDate
      const { data: todayEntries } = await supabase
        .from('mood_entries')
        .select('id')
        .eq('telegram_id', telegramUserId)
        .eq('mood_date', today)

      const isFirstToday = !todayEntries || todayEntries.length <= 1

      // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      const addMoodResponse = await fetch(
        `${process.env.VITE_APP_URL || 'https://kirakira-theta.vercel.app'}/api/profile?action=add_experience`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            telegramId: telegramUserId,
            experiencePoints: isFirstToday ? 20 : 10, // FIRST_MOOD_OF_DAY : DAILY_MOOD
            reason: isFirstToday
              ? `first_mood_today: ${mood}`
              : `mood_entry: ${mood}`,
          }),
        }
      )

      if (addMoodResponse.ok) {
        console.log(
          `üèÜ Added XP for mood entry: ${mood} (${isFirstToday ? 'first today' : 'additional'})`
        )
      }
    } catch (xpError) {
      console.warn('‚ö†Ô∏è Failed to add XP for mood entry:', xpError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    res.status(200).json({
      success: true,
      data: {
        id: data?.[0]?.id,
        saved: true,
        storage: 'supabase',
        mood: mood,
        date: formattedDate,
        intensity: intensity,
        note: note,
        message: 'Mood recorded successfully',
      },
    })
  } catch (error) {
    console.error('Mood record error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: HISTORY - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
// ===============================================
async function handleHistory(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, limit, offset = 0 } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(`üìñ Loading mood history from Supabase for user ${telegramId}`)

    const supabase = await getSupabaseClient()

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
    let query = supabase
      .from('mood_entries')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('mood_date', { ascending: false })

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (limit) {
      query = query.limit(parseInt(limit))
    }
    if (offset) {
      query = query.range(
        parseInt(offset),
        parseInt(offset) + parseInt(limit || 100) - 1
      )
    }

    const { data, error } = await query

    if (error) {
      console.error('Supabase mood history fetch failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch mood history',
      })
    }

    console.log(`‚úÖ Loaded ${data.length} mood entries for user ${telegramId}`)

    res.status(200).json({
      success: true,
      data: {
        moodHistory: data, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç frontend
        total: data.length,
        storage: 'supabase',
      },
    })
  } catch (error) {
    console.error('Mood history error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'record':
        return await handleRecord(req, res)
      case 'history':
        return await handleHistory(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: record, history`,
        })
    }
  } catch (error) {
    console.error('Mood API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}
