/**
 * üí∞ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –í–ê–õ–Æ–¢–´ –ò –ú–ê–ì–ê–ó–ò–ù–ê
 * –í–∫–ª—é—á–∞–µ—Ç: earn, spend, balance, transactions, themes
 *
 * ACTIONS:
 * - earn: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 * - spend: –°–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 * - balance: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
 * - transactions: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * - list_themes: –°–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
 * - buy_theme: –ü–æ–∫—É–ø–∫–∞ —Ç–µ–º—ã
 */

// üîí –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase —Å JWT (RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
async function getSupabaseClient(jwt = null) {
  console.log('üîë getSupabaseClient called with jwt:', jwt ? 'present' : 'null')

  if (!process.env.SUPABASE_URL) {
    throw new Error('SUPABASE_URL not configured')
  }

  // ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (jwt) {
    try {
      console.log('üîë Using JWT client')
      const { createAuthenticatedSupabaseClient } = await import('./_jwt.js')
      return await createAuthenticatedSupabaseClient(jwt)
    } catch (error) {
      console.error('‚ùå Failed to create JWT client:', error)
      // Fallback –Ω–∞ SERVICE_ROLE_KEY –Ω–∏–∂–µ
    }
  }

  // ‚ö†Ô∏è FALLBACK: SERVICE_ROLE_KEY (–º–∏–Ω—É–µ—Ç RLS)
  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase credentials not configured')
  }

  console.warn('‚ö†Ô∏è Using SERVICE_ROLE_KEY (bypasses RLS)')
  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// üí∞ ACTION: EARN - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
// ===============================================
async function handleEarn(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const {
      telegramId,
      currencyType,
      amount,
      reason,
      description,
      metadata = {},
    } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegramId || !currencyType || !amount || !reason) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required fields: telegramId, currencyType, amount, reason',
      })
    }

    if (!['sprouts', 'gems'].includes(currencyType)) {
      return res.status(400).json({
        success: false,
        error: 'Invalid currency type. Must be sprouts or gems',
      })
    }

    if (amount <= 0) {
      return res.status(400).json({
        success: false,
        error: 'Amount must be positive',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(
      `üí∞ Earning ${amount} ${currencyType} for user ${telegramId}: ${reason}`
    )

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é PostgreSQL –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const { data, error } = await supabase.rpc('earn_currency', {
      p_telegram_id: telegramId,
      p_currency_type: currencyType,
      p_amount: amount,
      p_reason: reason,
      p_description: description || null,
      p_metadata: metadata,
    })

    if (error) {
      console.error('‚ùå Error earning currency:', error)
      return res.status(500).json({
        success: false,
        error: error.message || 'Failed to earn currency',
      })
    }

    // PostgreSQL —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
    const result = data?.[0]

    console.log(`‚úÖ Currency earned successfully:`, result)

    return res.status(200).json({
      success: true,
      data: {
        balance_after: result.balance_after,
        balance_before: result.balance_before,
        amount_earned: result.amount_earned,
        transaction_id: result.transaction_id,
        currencyType,
        amount,
        reason,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleEarn:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üí∏ ACTION: SPEND - –°–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
// ===============================================
async function handleSpend(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const {
      telegramId,
      currencyType,
      amount,
      reason,
      description,
      metadata = {},
    } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegramId || !currencyType || !amount || !reason) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required fields: telegramId, currencyType, amount, reason',
      })
    }

    if (!['sprouts', 'gems'].includes(currencyType)) {
      return res.status(400).json({
        success: false,
        error: 'Invalid currency type. Must be sprouts or gems',
      })
    }

    if (amount <= 0) {
      return res.status(400).json({
        success: false,
        error: 'Amount must be positive',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('üîë req.auth:', req.auth)
    console.log('üîë req.auth?.jwt:', req.auth?.jwt)

    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(
      `üí∏ Spending ${amount} ${currencyType} for user ${telegramId}: ${reason}`
    )

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é PostgreSQL –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
    console.log('üí∏ Calling spend_currency with params:', {
      p_telegram_id: telegramId,
      p_currency_type: currencyType,
      p_amount: amount,
      p_reason: reason,
      p_description: description || null,
      p_metadata: metadata,
    })

    const { data, error } = await supabase.rpc('spend_currency', {
      p_telegram_id: telegramId,
      p_currency_type: currencyType,
      p_amount: amount,
      p_reason: reason,
      p_description: description || null,
      p_metadata: metadata,
    })

    console.log('üí∏ spend_currency result:', { data, error })

    if (error) {
      console.error('‚ùå Error spending currency:', error)
      return res.status(500).json({
        success: false,
        error: error.message || 'Failed to spend currency',
      })
    }

    // PostgreSQL —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
    const result = data?.[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (!result.success) {
      console.log(`‚ö†Ô∏è Insufficient funds for user ${telegramId}`)
      return res.status(400).json({
        success: false,
        error: result.error_message || 'Insufficient funds',
      })
    }

    console.log(`‚úÖ Currency spent successfully:`, result)

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ —Ç–µ–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ shop_purchases
    if (reason === 'buy_theme' && metadata?.themeId) {
      try {
        const { error: purchaseError } = await supabase
          .from('shop_purchases')
          .insert({
            telegram_id: telegramId,
            item_type: 'garden_theme',
            item_id: metadata.themeId,
            price_sprouts: amount,
            price_gems: 0,
            purchased_at: new Date().toISOString(),
            metadata: metadata,
          })

        if (purchaseError) {
          console.error('‚ùå Failed to record theme purchase:', purchaseError)
          // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞
        } else {
          console.log(`‚úÖ Theme purchase recorded: ${metadata.themeId}`)
        }
      } catch (purchaseErr) {
        console.error('‚ùå Error recording theme purchase:', purchaseErr)
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞
      }
    }

    return res.status(200).json({
      success: true,
      data: {
        balance_after: result.balance_after,
        balance_before: result.balance_before,
        amount_spent: result.amount_spent,
        transaction_id: result.transaction_id,
        currencyType,
        amount,
        reason,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleSpend:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: BALANCE - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
// ===============================================
async function handleBalance(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const telegramId = parseInt(req.query.telegramId)

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing telegramId parameter',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(`üìä Getting balance for user ${telegramId}`)

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, error } = await supabase
      .from('user_currency')
      .select('*')
      .eq('telegram_id', telegramId)
      .single()

    if (error) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      if (error.code === 'PGRST116') {
        console.log(`üìù Initializing currency for user ${telegramId}`)

        const { data: initData, error: initError } = await supabase
          .from('user_currency')
          .insert({
            telegram_id: telegramId,
            sprouts: 0,
            gems: 0,
          })
          .select()
          .single()

        if (initError) {
          console.error('‚ùå Error initializing currency:', initError)
          return res.status(500).json({
            success: false,
            error: 'Failed to initialize currency',
          })
        }

        console.log(`‚úÖ Currency initialized for user ${telegramId}`)

        return res.status(200).json({
          success: true,
          data: {
            telegramId: initData.telegram_id,
            sprouts: initData.sprouts,
            gems: initData.gems,
            totalSproutsEarned: initData.total_sprouts_earned,
            totalGemsEarned: initData.total_gems_earned,
            totalSproutsSpent: initData.total_sprouts_spent,
            totalGemsSpent: initData.total_gems_spent,
            createdAt: initData.created_at,
            lastUpdated: initData.last_updated,
          },
        })
      }

      console.error('‚ùå Error fetching balance:', error)
      return res.status(500).json({
        success: false,
        error: error.message || 'Failed to fetch balance',
      })
    }

    console.log(`‚úÖ Balance fetched for user ${telegramId}:`, {
      sprouts: data.sprouts,
      gems: data.gems,
    })

    return res.status(200).json({
      success: true,
      data: {
        telegramId: data.telegram_id,
        sprouts: data.sprouts,
        gems: data.gems,
        totalSproutsEarned: data.total_sprouts_earned,
        totalGemsEarned: data.total_gems_earned,
        totalSproutsSpent: data.total_sprouts_spent,
        totalGemsSpent: data.total_gems_spent,
        createdAt: data.created_at,
        lastUpdated: data.last_updated,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleBalance:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üìú ACTION: TRANSACTIONS - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// ===============================================
async function handleTransactions(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const telegramId = parseInt(req.query.telegramId)
    const limit = parseInt(req.query.limit) || 50
    const offset = parseInt(req.query.offset) || 0
    const currencyType = req.query.currencyType // 'sprouts', 'gems', or undefined (all)
    const transactionType = req.query.transactionType // 'earn', 'spend', or undefined (all)

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing telegramId parameter',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(`üìú Getting transactions for user ${telegramId}`)

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    let query = supabase
      .from('currency_transactions')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (currencyType) {
      query = query.eq('currency_type', currencyType)
    }

    if (transactionType) {
      query = query.eq('transaction_type', transactionType)
    }

    const { data, error, count } = await query

    if (error) {
      console.error('‚ùå Error fetching transactions:', error)
      return res.status(500).json({
        success: false,
        error: error.message || 'Failed to fetch transactions',
      })
    }

    console.log(`‚úÖ Fetched ${data.length} transactions for user ${telegramId}`)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º snake_case –≤ camelCase
    const transactions = data.map(tx => ({
      id: tx.id,
      telegramId: tx.telegram_id,
      transactionType: tx.transaction_type,
      currencyType: tx.currency_type,
      amount: tx.amount,
      balanceBefore: tx.balance_before,
      balanceAfter: tx.balance_after,
      reason: tx.reason,
      description: tx.description,
      metadata: tx.metadata,
      relatedUserId: tx.related_user_id,
      createdAt: tx.created_at,
    }))

    return res.status(200).json({
      success: true,
      data: {
        transactions,
        total: count,
        limit,
        offset,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleTransactions:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üé® ACTION: LIST_THEMES - –°–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
// ===============================================
async function handleListThemes(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const telegramId = parseInt(req.query.telegramId)

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing telegramId parameter',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(`üé® Getting themes for user ${telegramId}`)
    console.log(`üîë JWT present:`, !!req.auth?.jwt)
    console.log(`üîë req.auth:`, req.auth)

    // –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: ownedThemes, error: ownedError } = await supabase
      .from('shop_purchases')
      .select('item_id')
      .eq('telegram_id', telegramId)
      .eq('item_type', 'garden_theme')

    if (ownedError) {
      console.error('‚ùå Error fetching owned themes:', ownedError)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch owned themes',
      })
    }

    console.log(`üì¶ Raw owned themes from DB:`, ownedThemes)
    const ownedThemeIds = ownedThemes.map(t => t.item_id)
    console.log(`üé® Processed owned theme IDs:`, ownedThemeIds)

    // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î)
    const themes = [
      { id: 'light', name: '–°–≤–µ—Ç–ª–∞—è', priceSprouts: 0, isDefault: true },
      { id: 'dark', name: '–¢—ë–º–Ω–∞—è', priceSprouts: 0, isDefault: true },
      { id: 'sunset', name: '–ó–∞–∫–∞—Ç', priceSprouts: 500, isDefault: false },
      { id: 'night', name: '–ù–æ—á–Ω–æ–µ –Ω–µ–±–æ', priceSprouts: 600, isDefault: false },
      { id: 'forest', name: '–õ–µ—Å–Ω–∞—è', priceSprouts: 700, isDefault: false },
      { id: 'aqua', name: '–ú–æ—Ä—Å–∫–∞—è', priceSprouts: 800, isDefault: false },
    ]

    console.log(`‚úÖ Themes fetched for user ${telegramId}:`, {
      total: themes.length,
      owned: ownedThemeIds.length,
    })

    return res.status(200).json({
      success: true,
      data: {
        themes,
        ownedThemeIds,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleListThemes:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üõí ACTION: BUY_THEME - –ü–æ–∫—É–ø–∫–∞ —Ç–µ–º—ã
// ===============================================
async function handleBuyTheme(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' })
  }

  try {
    const { telegramId, themeId } = req.body

    if (!telegramId || !themeId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: telegramId, themeId',
      })
    }

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    console.log(`üõí Buying theme ${themeId} for user ${telegramId}`)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
    const themes = [
      { id: 'light', name: '–°–≤–µ—Ç–ª–∞—è', priceSprouts: 0, isDefault: true },
      { id: 'dark', name: '–¢—ë–º–Ω–∞—è', priceSprouts: 0, isDefault: true },
      { id: 'sunset', name: '–ó–∞–∫–∞—Ç', priceSprouts: 500, isDefault: false },
      { id: 'night', name: '–ù–æ—á–Ω–æ–µ –Ω–µ–±–æ', priceSprouts: 600, isDefault: false },
      { id: 'forest', name: '–õ–µ—Å–Ω–∞—è', priceSprouts: 700, isDefault: false },
      { id: 'aqua', name: '–ú–æ—Ä—Å–∫–∞—è', priceSprouts: 800, isDefault: false },
    ]

    const theme = themes.find(t => t.id === themeId)
    if (!theme) {
      return res.status(400).json({
        success: false,
        error: 'Theme not found',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç–µ–º–∞
    const { data: existingPurchase, error: checkError } = await supabase
      .from('shop_purchases')
      .select('id')
      .eq('telegram_id', telegramId)
      .eq('item_id', themeId)
      .eq('item_type', 'garden_theme')
      .single()

    if (checkError && checkError.code !== 'PGRST116') {
      console.error('‚ùå Error checking existing purchase:', checkError)
      return res.status(500).json({
        success: false,
        error: 'Failed to check existing purchase',
      })
    }

    if (existingPurchase) {
      return res.status(400).json({
        success: false,
        error: 'Theme already purchased',
      })
    }

    // –ï—Å–ª–∏ —Ç–µ–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∫—É–ø–∫–∏
    if (theme.isDefault || theme.priceSprouts === 0) {
      const { data: purchaseData, error: purchaseError } = await supabase
        .from('shop_purchases')
        .insert({
          telegram_id: telegramId,
          item_id: themeId,
          item_type: 'garden_theme',
          cost_sprouts: 0,
          cost_gems: 0,
        })
        .select()
        .single()

      if (purchaseError) {
        console.error('‚ùå Error creating free purchase:', purchaseError)
        return res.status(500).json({
          success: false,
          error: 'Failed to create purchase',
        })
      }

      return res.status(200).json({
        success: true,
        data: {
          themeId,
          themeName: theme.name,
          cost: 0,
          purchaseId: purchaseData.id,
        },
      })
    }

    // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–µ–º —Å–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
    const { data: spendResult, error: spendError } = await supabase.rpc(
      'spend_currency',
      {
        p_telegram_id: telegramId,
        p_currency_type: 'sprouts',
        p_amount: theme.priceSprouts,
        p_reason: 'buy_theme',
        p_description: `–ü–æ–∫—É–ø–∫–∞ —Ç–µ–º—ã "${theme.name}"`,
        p_metadata: { themeId, themeName: theme.name },
      }
    )

    if (spendError) {
      console.error('‚ùå Error spending currency for theme:', spendError)
      return res.status(500).json({
        success: false,
        error: 'Failed to process payment',
      })
    }

    const spendData = spendResult?.[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (!spendData.success) {
      console.log(
        `‚ö†Ô∏è Insufficient funds for theme purchase: ${spendData.error_message}`
      )
      return res.status(400).json({
        success: false,
        error: spendData.error_message || 'Insufficient funds',
      })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    const { data: purchaseData, error: purchaseError } = await supabase
      .from('shop_purchases')
      .insert({
        telegram_id: telegramId,
        item_id: themeId,
        item_type: 'garden_theme',
        cost_sprouts: theme.priceSprouts,
        cost_gems: 0,
      })
      .select()
      .single()

    if (purchaseError) {
      console.error('‚ùå Error creating purchase record:', purchaseError)
      return res.status(500).json({
        success: false,
        error: 'Failed to create purchase record',
      })
    }

    console.log(`‚úÖ Theme purchased successfully:`, {
      themeId,
      cost: theme.priceSprouts,
      newBalance: spendData.new_balance,
    })

    return res.status(200).json({
      success: true,
      data: {
        themeId,
        themeName: theme.name,
        cost: theme.priceSprouts,
        newBalance: spendData.new_balance,
        transactionId: spendData.transaction_id,
        purchaseId: purchaseData.id,
      },
    })
  } catch (error) {
    console.error('‚ùå Unexpected error in handleBuyTheme:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –†–û–£–¢–ï–†
// ===============================================

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { withAuth } from './_auth.js'

async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Credentials', 'true')
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader(
    'Access-Control-Allow-Methods',
    'GET, POST, PUT, DELETE, OPTIONS'
  )
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization'
  )

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  try {
    const action =
      req.query.action || (req.method === 'GET' ? 'balance' : 'earn')

    console.log(`\nüéØ Currency API - Action: ${action}`)

    switch (action) {
      case 'earn':
        return await handleEarn(req, res)

      case 'spend':
        return await handleSpend(req, res)

      case 'balance':
        return await handleBalance(req, res)

      case 'transactions':
        return await handleTransactions(req, res)

      case 'list_themes':
        return await handleListThemes(req, res)

      case 'buy_theme':
        return await handleBuyTheme(req, res)

      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Valid actions: earn, spend, balance, transactions, list_themes, buy_theme`,
        })
    }
  } catch (error) {
    console.error('‚ùå Unexpected error in currency API:', error)
    return res.status(500).json({
      success: false,
      error: error.message || 'Internal server error',
    })
  }
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler —Å –∑–∞—â–∏—Ç–æ–π —á–µ—Ä–µ–∑ middleware
export default withAuth(handler)
