/**
 * üì¢ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô KIRAKIRA
 *
 * üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –î–õ–Ø VERCEL HOBBY –ü–õ–ê–ù–ê (1 cron job –≤ –¥–µ–Ω—å)
 *
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
 * - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç–º–µ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Ç–µ—Ä–µ —Å—Ç—Ä–∏–∫–∞
 * - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * - –£–º–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –±–∞–∑–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
 *
 * üìÖ –ó–∞–ø—É—Å–∫: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00 –ú–°–ö (08:00 UTC)
 * üéØ –õ–æ–≥–∏–∫–∞: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–µ–Ω—å)
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
 * ?type=standard - –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 * ?type=smart - —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_TYPES = {
  DAILY_MOOD_REMINDER: 'daily_mood_reminder',
  STREAK_LOST: 'streak_lost',
  INACTIVITY_RETURN: 'inactivity_return',
  STREAK_MILESTONE: 'streak_milestone',
  ACHIEVEMENT_UNLOCKED: 'achievement_unlocked',
  WEEKLY_MOTIVATION: 'weekly_motivation',
}

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è Hobby –ø–ª–∞–Ω–∞ Vercel - 1 –∑–∞–ø—É—Å–∫ –≤ –¥–µ–Ω—å)
const NOTIFICATION_PRIORITIES = {
  [NOTIFICATION_TYPES.INACTIVITY_RETURN]: {
    priority: 1,
    condition: 'inactive_3_or_7_days',
  },
  [NOTIFICATION_TYPES.STREAK_LOST]: {
    priority: 2,
    condition: 'streak_broken_yesterday',
  },
  [NOTIFICATION_TYPES.WEEKLY_MOTIVATION]: {
    priority: 3,
    condition: 'streak_7_plus_monday',
  },
  [NOTIFICATION_TYPES.DAILY_MOOD_REMINDER]: {
    priority: 4,
    condition: 'no_mood_today',
  },
}

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC (11:00 –ú–°–ö) - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
const NOTIFICATION_TIME = {
  utc: '09:00',
  moscow: '12:00',
  schedule: '0 9 * * *', // Vercel cron format
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN =
  process.env.TELEGRAM_BOT_TOKEN || process.env.VITE_TELEGRAM_BOT_TOKEN
const MINI_APP_URL =
  process.env.VITE_APP_URL || 'https://kirakira-theta.vercel.app'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 *
 * ‚ö†Ô∏è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SERVICE_ROLE_KEY
 * –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è CRON –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç –∏–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã
 */
async function getActiveUsers() {
  try {
    const { createClient } = await import('@supabase/supabase-js')
    // ‚úÖ SERVICE_ROLE_KEY –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è CRON –∑–∞–¥–∞—á (–º–∏–Ω—É–µ—Ç RLS –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ)
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    const { data: users, error } = await supabase
      .from('users')
      .select(
        `
        telegram_id,
        first_name,
        username,
        registration_date,
        last_visit_date,
        notification_settings,
        created_at
      `
      )
      .not('telegram_id', 'is', null)
      .order('last_visit_date', { ascending: false })

    if (error) {
      console.error('‚ùå Failed to fetch users:', error)
      return []
    }

    console.log(`üìä Found ${users.length} total users`)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    const activeUsers = users.filter(user => {
      const settings = user.notification_settings || {}
      return settings.enabled !== false && settings.dailyReminder !== false
    })

    console.log(`‚úÖ ${activeUsers.length} users have notifications enabled`)
    return activeUsers
  } catch (error) {
    console.error('‚ùå Error fetching active users:', error)
    return []
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–º–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
 */
async function checkMoodToday(telegramUserId, todayDateString) {
  try {
    const { createClient } = await import('@supabase/supabase-js')
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    const { data, error } = await supabase
      .from('mood_entries')
      .select('id')
      .eq('telegram_id', telegramUserId)
      .eq('mood_date', todayDateString)
      .limit(1)

    if (error) {
      console.error(
        `‚ùå Failed to check mood for user ${telegramUserId}:`,
        error
      )
      return false
    }

    return data && data.length > 0
  } catch (error) {
    console.error(`‚ùå Error checking mood for user ${telegramUserId}:`, error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserMoodStats(telegramUserId) {
  try {
    const response = await fetch(
      `${MINI_APP_URL}/api/profile?action=get_profile&telegramId=${telegramUserId}`
    )

    if (!response.ok) {
      return null
    }

    const result = await response.json()
    return result.success && result.data?.stats ? result.data.stats : null
  } catch (error) {
    console.warn(`‚ö†Ô∏è Failed to get stats for user ${telegramUserId}:`, error)
    return null
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendNotification(chatId, message, options = {}) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

  const params = {
    chat_id: chatId,
    text: message,
    parse_mode: 'Markdown',
    disable_web_page_preview: true,
    ...options,
  }

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(params),
    })

    const result = await response.json()

    if (!response.ok) {
      console.error(`‚ùå Failed to send notification to ${chatId}:`, result)
      return false
    }

    return true
  } catch (error) {
    console.error(`‚ùå Error sending notification to ${chatId}:`, error)
    return false
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
function createQuickActionsKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
          web_app: { url: `${MINI_APP_URL}?tab=mood` },
        },
      ],
      [
        {
          text: 'üå± –ú–æ–π —Å–∞–¥',
          web_app: { url: MINI_APP_URL },
        },
        {
          text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          web_app: { url: `${MINI_APP_URL}?tab=profile` },
        },
      ],
    ],
  }
}

/**
 * –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–º–µ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
async function sendDailyMoodReminder(user, todayDateString) {
  const hasMoodToday = await checkMoodToday(user.telegram_id, todayDateString)

  if (hasMoodToday) {
    console.log(`‚úÖ User ${user.telegram_id} already marked mood today`)
    return false
  }

  const name = user.first_name || '–¥—Ä—É–≥'
  const stats = await getUserMoodStats(user.telegram_id)

  let message = `üå∏ –ü—Ä–∏–≤–µ—Ç, ${name}!

–ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è? –í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–∞–¥—É! üå±`

  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  if (stats) {
    if (stats.currentStreak > 0) {
      message += `\n\nüî• –¢–≤–æ—è —Å–µ—Ä–∏—è: ${stats.currentStreak} ${getDaysWord(stats.currentStreak)}!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π - —Ç—ã –º–æ–ª–æ–¥–µ—Ü! üí™`
    } else if (stats.totalDays > 0) {
      message += `\n\nüåü –£ —Ç–µ–±—è —É–∂–µ ${stats.totalDays} ${getDaysWord(stats.totalDays)} —Å KiraKira!\n–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Ä–∏—é! ‚ú®`
    }
  }

  message += `\n\n_–ö–∞–∂–¥–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π —Å–∞–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!_ üé®`

  const sent = await sendNotification(user.telegram_id, message, {
    reply_markup: createQuickActionsKeyboard(),
  })

  if (sent) {
    console.log(`üì§ Daily reminder sent to ${user.telegram_id} (${name})`)
  }

  return sent
}

/**
 * –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –ü–æ—Ç–µ—Ä—è —Å—Ç—Ä–∏–∫–∞
 */
async function sendStreakLostNotification(user) {
  const stats = await getUserMoodStats(user.telegram_id)

  if (!stats || stats.currentStreak > 0) {
    return false // –°—Ç—Ä–∏–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–∏–∫ —Ä–∞–Ω—å—à–µ
  if (stats.longestStreak < 2) {
    return false // –ù–µ –±—ã–ª–æ –∑–Ω–∞—á–∏–º–æ–≥–æ —Å—Ç—Ä–∏–∫–∞
  }

  const name = user.first_name || '–¥—Ä—É–≥'

  const message = `üíî ${name}, —Ç–≤–æ—è —Å–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å...

–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${stats.longestStreak} ${getDaysWord(stats.longestStreak)} –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–ª—Å—è! üèÜ

üå± *–ù–∞—á–Ω–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è?*
–û—Ç–º–µ—Ç—å —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç–≤–æ–π —Å–∞–¥ –Ω–∞—á–Ω–µ—Ç —Ä–∞—Å—Ç–∏ —Å–Ω–æ–≤–∞!

_–ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! ‚ú®_`

  const sent = await sendNotification(user.telegram_id, message, {
    reply_markup: createQuickActionsKeyboard(),
  })

  if (sent) {
    console.log(
      `üì§ Streak lost notification sent to ${user.telegram_id} (${name})`
    )
  }

  return sent
}

/**
 * –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function sendInactivityNotification(user, daysInactive) {
  const name = user.first_name || '–¥—Ä—É–≥'
  const stats = await getUserMoodStats(user.telegram_id)

  let message = `üå∏ –°–∫—É—á–∞–µ–º –ø–æ —Ç–µ–±–µ, ${name}!

–¢—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ —É–∂–µ ${daysInactive} ${getDaysWord(daysInactive)}. üåø`

  if (stats && stats.totalElements > 0) {
    message += `\n\nüå± –¢–≤–æ–∏ ${stats.totalElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞ –∂–¥—É—Ç —Ç–µ–±—è!`

    if (stats.longestStreak > 0) {
      message += `\n–¢–≤–æ–π –ª—É—á—à–∏–π —Å—Ç—Ä–∏–∫ ${stats.longestStreak} –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º! üí™`
    }
  }

  message += `\n\n_–û—Ç–º–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞—Å—Ç–∏—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∞–¥! ‚ú®_`

  const sent = await sendNotification(user.telegram_id, message, {
    reply_markup: createQuickActionsKeyboard(),
  })

  if (sent) {
    console.log(
      `üì§ Inactivity notification sent to ${user.telegram_id} (${name}) - ${daysInactive} days`
    )
  }

  return sent
}

/**
 * –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å—Ç—Ä–∏–∫–∞
 */
async function sendWeeklyMotivation(user) {
  const stats = await getUserMoodStats(user.telegram_id)

  if (!stats || stats.currentStreak < 7) {
    return false
  }

  const name = user.first_name || '–¥—Ä—É–≥'

  let message = `üî• ${name}, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä!

–¢–≤–æ—è —Å–µ—Ä–∏—è ${stats.currentStreak} –¥–Ω–µ–π –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! üèÜ`

  // –†–∞–∑–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∏–∫–∞
  if (stats.currentStreak >= 30) {
    message += `\n\nüåü –¶–µ–ª—ã–π –º–µ—Å—è—Ü –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞! –¢—ã —Å–æ–∑–¥–∞–ª —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™‚ú®`
  } else if (stats.currentStreak >= 21) {
    message += `\n\nüéØ 3 –Ω–µ–¥–µ–ª–∏ - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ! –¢—ã –¥–æ–∫–∞–∑–∞–ª —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º. –í–ø–µ—Ä–µ–¥–∏ –µ—â–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üöÄ`
  } else if (stats.currentStreak >= 14) {
    message += `\n\nüí™ –î–≤–µ –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥ - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–µ–ø–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏! üå±`
  } else {
    message += `\n\nüåü –ù–µ–¥–µ–ª—è+ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö! üíö`
  }

  message += `\n\n_–¢–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≤–æ–µ–π –∑–∞–±–æ—Ç–µ! üå∏_`

  const sent = await sendNotification(user.telegram_id, message, {
    reply_markup: createQuickActionsKeyboard(),
  })

  if (sent) {
    console.log(
      `üì§ Weekly motivation sent to ${user.telegram_id} (${name}) - ${stats.currentStreak} days streak`
    )
  }

  return sent
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
 */
function getDaysWord(count) {
  const remainder10 = count % 10
  const remainder100 = count % 100

  if (remainder100 >= 11 && remainder100 <= 19) {
    return '–¥–Ω–µ–π'
  }

  if (remainder10 === 1) return '–¥–µ–Ω—å'
  if (remainder10 >= 2 && remainder10 <= 4) return '–¥–Ω—è'
  return '–¥–Ω–µ–π'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
 */
function isTimeInRange(currentTime, startTime, endTime) {
  return currentTime >= startTime && currentTime <= endTime
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
 */
function getMoscowTime() {
  const now = new Date()
  const moscowTime = new Date(
    now.toLocaleString('en-US', { timeZone: 'Europe/Moscow' })
  )
  return moscowTime
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ HH:MM
 */
function formatTime(date) {
  return date.toTimeString().substr(0, 5)
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function processNotifications() {
  if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not configured')
    return { error: 'Bot token not configured' }
  }

  console.log('üîî Starting notification processing...')

  const moscowTime = getMoscowTime()
  const currentTimeStr = formatTime(moscowTime)
  const todayDateStr = moscowTime.toISOString().split('T')[0] // YYYY-MM-DD
  const isMonday = moscowTime.getDay() === 1

  console.log(
    `üïê Moscow time: ${currentTimeStr}, Date: ${todayDateStr}, Is Monday: ${isMonday}`
  )

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await getActiveUsers()
  if (users.length === 0) {
    console.log('üì≠ No active users found')
    return { message: 'No active users' }
  }

  const results = {
    processed: 0,
    dailyReminders: 0,
    streakLost: 0,
    inactivity: 0,
    weeklyMotivation: 0,
    errors: 0,
  }

  // üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø HOBBY –ü–õ–ê–ù–ê VERCEL
  // –ó–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –≤ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

  for (const user of users) {
    try {
      results.processed++
      let sent = false
      let notificationType = ''

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (user.last_visit_date && !sent) {
        const lastVisit = new Date(user.last_visit_date)
        const daysSinceVisit = Math.floor(
          (moscowTime - lastVisit) / (1000 * 60 * 60 * 24)
        )

        if (daysSinceVisit === 3 || daysSinceVisit === 7) {
          const inactivitySent = await sendInactivityNotification(
            user,
            daysSinceVisit
          )
          if (inactivitySent) {
            results.inactivity++
            sent = true
            notificationType = 'inactivity'
          }
        }
      }

      // –ü–æ—Ç–µ—Ä—è —Å—Ç—Ä–∏–∫–∞ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (!sent) {
        const streakSent = await sendStreakLostNotification(user)
        if (streakSent) {
          results.streakLost++
          sent = true
          notificationType = 'streak_lost'
        }
      }

      // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è (–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º)
      if (isMonday && !sent) {
        const motivationSent = await sendWeeklyMotivation(user)
        if (motivationSent) {
          results.weeklyMotivation++
          sent = true
          notificationType = 'weekly_motivation'
        }
      }

      // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (!sent) {
        const reminderSent = await sendDailyMoodReminder(user, todayDateStr)
        if (reminderSent) {
          results.dailyReminders++
          sent = true
          notificationType = 'daily_reminder'
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
      if (sent) {
        console.log(
          `üì§ Sent ${notificationType} to ${user.telegram_id} (${user.first_name})`
        )
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
      await new Promise(resolve => setTimeout(resolve, 150))
    } catch (error) {
      console.error(`‚ùå Error processing user ${user.telegram_id}:`, error)
      results.errors++
    }
  }

  console.log('‚úÖ Notification processing completed:', results)

  return {
    success: true,
    timestamp: new Date().toISOString(),
    moscowTime: currentTimeStr,
    results,
  }
}

/**
 * üéØ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô VERCEL FUNCTIONS HANDLER
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º endpoint
 *
 * VERCEL CRON –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞!
 */
export default async function handler(req, res) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
  if (req.method !== 'POST' && req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  const notificationType = req.query.type || 'standard'

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä status=true
  if (req.method === 'GET' && req.query.status === 'true') {
    return res.status(200).json({
      status: `Notifications system ready (${notificationType})`,
      availableTypes: ['standard', 'smart'],
      botConfigured: !!BOT_TOKEN,
      timestamp: new Date().toISOString(),
      moscowTime: formatTime(getMoscowTime()),
    })
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è GET (Vercel Cron) –∏ POST (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)
  try {
    let result

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    switch (notificationType) {
      case 'smart':
        console.log('üß† Processing SMART notifications...')
        result = await processSmartNotifications()
        break
      case 'standard':
      default:
        console.log('üîî Processing STANDARD notifications...')
        result = await processNotifications()
        break
    }

    res.status(200).json({
      ...result,
      type: notificationType,
      method: req.method,
      triggeredBy: req.method === 'GET' ? 'Vercel Cron' : 'Manual POST',
    })
  } catch (error) {
    console.error('‚ùå Notifications handler error:', error)
    res.status(500).json({
      error: 'Internal server error',
      message: error.message,
      type: notificationType,
    })
  }
}

// ===============================================
// üß† –£–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
// ===============================================

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function analyzeUserPatterns(telegramUserId) {
  try {
    const { createClient } = await import('@supabase/supabase-js')
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const thirtyDaysAgo = new Date()
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)

    const { data: moodHistory, error } = await supabase
      .from('mood_entries')
      .select('mood_date, created_at, mood')
      .eq('telegram_id', telegramUserId)
      .gte('mood_date', thirtyDaysAgo.toISOString().split('T')[0])
      .order('mood_date', { ascending: false })

    if (error) {
      console.warn(
        `Failed to get mood history for user ${telegramUserId}:`,
        error
      )
      return null
    }

    if (!moodHistory || moodHistory.length === 0) {
      return null
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patterns = {
      userId: telegramUserId,
      totalEntries: moodHistory.length,
      averageTimeOfDay: calculateAverageTimeOfDay(moodHistory),
      moodTrends: analyzeMoodTrends(moodHistory),
      mostActiveDay: findMostActiveDay(moodHistory),
      consistency: calculateConsistency(moodHistory),
      lastActivity: new Date(moodHistory[0].created_at),
    }

    return patterns
  } catch (error) {
    console.error(`Error analyzing patterns for user ${telegramUserId}:`, error)
    return null
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–Ω—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
function calculateAverageTimeOfDay(moodHistory) {
  if (moodHistory.length === 0) return null

  const times = moodHistory.map(entry => {
    const date = new Date(entry.created_at)
    return date.getHours() + date.getMinutes() / 60
  })

  const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length
  const hours = Math.floor(averageTime)
  const minutes = Math.floor((averageTime - hours) * 60)

  return { hours, minutes, averageTime }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
 */
function analyzeMoodTrends(moodHistory) {
  const moodCounts = {}
  let positiveCount = 0
  let negativeCount = 0

  moodHistory.forEach(entry => {
    moodCounts[entry.mood] = (moodCounts[entry.mood] || 0) + 1

    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if (['joy', 'calm'].includes(entry.mood)) {
      positiveCount++
    } else if (['stress', 'sadness', 'anger', 'anxiety'].includes(entry.mood)) {
      negativeCount++
    }
  })

  const dominantMood = Object.keys(moodCounts).reduce((a, b) =>
    moodCounts[a] > moodCounts[b] ? a : b
  )

  return {
    dominantMood,
    positiveRatio: positiveCount / moodHistory.length,
    negativeRatio: negativeCount / moodHistory.length,
    moodDistribution: moodCounts,
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
 */
function findMostActiveDay(moodHistory) {
  const dayCounts = {}

  moodHistory.forEach(entry => {
    const dayOfWeek = new Date(entry.created_at).getDay()
    dayCounts[dayOfWeek] = (dayCounts[dayOfWeek] || 0) + 1
  })

  const mostActiveDay = Object.keys(dayCounts).reduce((a, b) =>
    dayCounts[a] > dayCounts[b] ? parseInt(a) : parseInt(b)
  )

  const dayNames = [
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–í—Ç–æ—Ä–Ω–∏–∫',
    '–°—Ä–µ–¥–∞',
    '–ß–µ—Ç–≤–µ—Ä–≥',
    '–ü—è—Ç–Ω–∏—Ü–∞',
    '–°—É–±–±–æ—Ç–∞',
  ]

  return {
    dayOfWeek: mostActiveDay,
    dayName: dayNames[mostActiveDay],
    count: dayCounts[mostActiveDay] || 0,
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function calculateConsistency(moodHistory) {
  if (moodHistory.length < 7) return 0

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  const dates = moodHistory.map(entry => entry.mood_date).sort()
  let maxStreak = 1
  let currentStreak = 1

  for (let i = 1; i < dates.length; i++) {
    const prevDate = new Date(dates[i - 1])
    const currentDate = new Date(dates[i])
    const dayDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24)

    if (dayDiff === 1) {
      currentStreak++
      maxStreak = Math.max(maxStreak, currentStreak)
    } else {
      currentStreak = 1
    }
  }

  return maxStreak / moodHistory.length // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
function generateSmartMessage(patterns, messageType) {
  const { moodTrends, consistency, averageTimeOfDay } = patterns

  let message = ''

  switch (messageType) {
    case 'personalized_reminder':
      if (consistency > 0.7) {
        message =
          'üåü –¢—ã –æ—á–µ–Ω—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –≤ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ! –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
      } else if (moodTrends.positiveRatio > 0.6) {
        message = 'üòä –¢–≤–æ–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?'
      } else if (moodTrends.negativeRatio > 0.6) {
        message =
          'üíö –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –û—Ç–º–µ—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ.'
      } else {
        message =
          'üå∏ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –¥–µ–ª–∞! –¢–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –∂–¥–µ—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.'
      }
      break

    case 'optimal_time_suggestion':
      if (averageTimeOfDay) {
        const suggestedHour = averageTimeOfDay.hours
        if (suggestedHour < 10) {
          message =
            'üåÖ –ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –æ–±—ã—á–Ω–æ –æ—Ç–º–µ—á–∞–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ç—Ä–æ–º! –ú–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è?'
        } else if (suggestedHour > 18) {
          message =
            'üåÜ –í–∏–∂—É, —Ç—ã –≤–µ—á–µ—Ä–Ω–∏–π —á–µ–ª–æ–≤–µ–∫! –•–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤–µ—á–µ—Ä?'
        }
      }
      break

    case 'mood_insight':
      const dominantEmoji =
        {
          joy: 'üòä',
          calm: 'üòå',
          stress: 'üò∞',
          sadness: 'üò¢',
          anger: 'üò†',
          anxiety: 'üò®',
        }[moodTrends.dominantMood] || 'üå∏'

      message = `${dominantEmoji} –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å! `

      if (moodTrends.positiveRatio > 0.7) {
        message +=
          '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å —ç–º–æ—Ü–∏—è–º–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! ‚ú®'
      } else if (moodTrends.negativeRatio > 0.6) {
        message +=
          '–í–∏–∂—É —Å–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–º–Ω–∏: —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ, –∏ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Å–∞–¥—É - —à–∞–≥ –∫ –ª—É—á—à–µ–º—É. üí™'
      } else {
        message +=
          '–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —ç–º–æ—Ü–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–æ–±–æ–π! üå±'
      }
      break

    default:
      message = 'üå∏ –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?'
  }

  return message
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendSmartNotification(telegramUserId, patterns, messageType) {
  try {
    const message = generateSmartMessage(patterns, messageType)

    const sent = await sendNotification(telegramUserId, message, {
      reply_markup: createQuickActionsKeyboard(),
    })

    if (sent) {
      console.log(
        `üì§ Smart notification sent to ${telegramUserId}: ${messageType}`
      )
    }

    return sent
  } catch (error) {
    console.error(
      `Error sending smart notification to ${telegramUserId}:`,
      error
    )
    return false
  }
}

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–∏—Ç —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function processSmartNotifications() {
  if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not configured')
    return { error: 'Bot token not configured' }
  }

  console.log('üß† Starting smart notifications processing...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é)
    const users = await getActiveUsers()
    if (users.length === 0) {
      console.log('üì≠ No active users found for smart notifications')
      return { message: 'No active users' }
    }

    const results = {
      processed: 0,
      personalizedReminders: 0,
      timeOptimizations: 0,
      moodInsights: 0,
      errors: 0,
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –≤—Å–µ—Ö —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
    const selectedUsers = users.slice(0, Math.min(50, users.length))

    for (const user of selectedUsers) {
      try {
        const settings = user.notification_settings || { enabled: true }

        if (!settings.enabled) {
          continue
        }

        const patterns = await analyzeUserPatterns(user.telegram_id)

        if (!patterns) {
          continue
        }

        results.processed++

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        const now = new Date()
        const hoursSinceLastVisit = user.last_visit_date
          ? (now - new Date(user.last_visit_date)) / (1000 * 60 * 60)
          : 0

        let messageType = null
        let shouldSend = false

        // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (hoursSinceLastVisit > 48 && patterns.consistency > 0.5) {
          messageType = 'personalized_reminder'
          shouldSend = Math.random() < 0.3 // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        } else if (patterns.totalEntries > 14 && Math.random() < 0.1) {
          messageType = 'mood_insight'
          shouldSend = true
        } else if (patterns.averageTimeOfDay && Math.random() < 0.05) {
          messageType = 'optimal_time_suggestion'
          shouldSend = true
        }

        if (shouldSend && messageType) {
          const sent = await sendSmartNotification(
            user.telegram_id,
            patterns,
            messageType
          )

          if (sent) {
            switch (messageType) {
              case 'personalized_reminder':
                results.personalizedReminders++
                break
              case 'optimal_time_suggestion':
                results.timeOptimizations++
                break
              case 'mood_insight':
                results.moodInsights++
                break
            }
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 200))
        }
      } catch (error) {
        console.error(
          `‚ùå Error processing smart notification for user ${user.telegram_id}:`,
          error
        )
        results.errors++
      }
    }

    console.log('‚úÖ Smart notifications processing completed:', results)

    return {
      success: true,
      timestamp: new Date().toISOString(),
      results,
    }
  } catch (error) {
    console.error('‚ùå Smart notifications processing failed:', error)
    return { error: 'Processing failed', message: error.message }
  }
}

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    handler,
    processNotifications,
    processSmartNotifications,
    analyzeUserPatterns,
  }
}
