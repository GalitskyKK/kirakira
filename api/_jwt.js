/**
 * üîë JWT GENERATION FOR SUPABASE RLS
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Row Level Security (RLS)
 */

import crypto from 'crypto'
import { Buffer } from 'buffer'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {object} userData - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} JWT —Ç–æ–∫–µ–Ω
 */
export function generateSupabaseJWT(telegramId, userData = {}) {
  const JWT_SECRET = process.env.SUPABASE_JWT_SECRET

  if (!JWT_SECRET) {
    throw new Error('SUPABASE_JWT_SECRET not configured')
  }

  // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è JWT
  const now = Math.floor(Date.now() / 1000)
  const expiresIn = 60 * 60 * 24 // 24 —á–∞—Å–∞

  const payload = {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ claims
    iss: 'kirakira-api', // issuer
    sub: `telegram-${telegramId}`, // subject (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID)
    aud: 'authenticated', // audience
    exp: now + expiresIn, // expiration time
    iat: now, // issued at

    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ claims –¥–ª—è RLS
    telegram_id: telegramId,
    role: 'authenticated',

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_metadata: {
      telegram_id: telegramId,
      first_name: userData.firstName || null,
      last_name: userData.lastName || null,
      username: userData.username || null,
    },
  }

  // –°–æ–∑–¥–∞–µ–º JWT: header.payload.signature
  const header = {
    alg: 'HS256',
    typ: 'JWT',
  }

  const encodedHeader = base64UrlEncode(JSON.stringify(header))
  const encodedPayload = base64UrlEncode(JSON.stringify(payload))

  const signature = crypto
    .createHmac('sha256', JWT_SECRET)
    .update(`${encodedHeader}.${encodedPayload}`)
    .digest('base64url')

  return `${encodedHeader}.${encodedPayload}.${signature}`
}

/**
 * Base64 URL encoding (–±–µ–∑ padding)
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} Base64 URL encoded —Å—Ç—Ä–æ–∫–∞
 */
function base64UrlEncode(str) {
  return Buffer.from(str).toString('base64url')
}

/**
 * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω
 * @returns {object|null} –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
 */
export function verifySupabaseJWT(token) {
  try {
    const JWT_SECRET = process.env.SUPABASE_JWT_SECRET

    if (!JWT_SECRET) {
      console.error('SUPABASE_JWT_SECRET not configured')
      return null
    }

    const parts = token.split('.')
    if (parts.length !== 3) {
      return null
    }

    const [encodedHeader, encodedPayload, signature] = parts

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const expectedSignature = crypto
      .createHmac('sha256', JWT_SECRET)
      .update(`${encodedHeader}.${encodedPayload}`)
      .digest('base64url')

    if (signature !== expectedSignature) {
      console.warn('JWT signature mismatch')
      return null
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
    const payload = JSON.parse(
      Buffer.from(encodedPayload, 'base64url').toString('utf-8')
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º expiration
    const now = Math.floor(Date.now() / 1000)
    if (payload.exp && payload.exp < now) {
      console.warn('JWT expired')
      return null
    }

    return payload
  } catch (error) {
    console.error('JWT verification error:', error)
    return null
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} jwt - JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} Supabase –∫–ª–∏–µ–Ω—Ç
 */
export async function createAuthenticatedSupabaseClient(jwt) {
  const { createClient } = await import('@supabase/supabase-js')

  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å ANON_KEY –∏ JWT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY, {
    global: {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    },
    auth: {
      persistSession: false,
      autoRefreshToken: false,
    },
  })
}

/**
 * –°–æ–∑–¥–∞–µ—Ç Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å SERVICE_ROLE_KEY (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
 * ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @returns {Promise<object>} Supabase –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
 */
export async function createAdminSupabaseClient() {
  const { createClient } = await import('@supabase/supabase-js')

  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase admin credentials not configured')
  }

  console.warn(
    '‚ö†Ô∏è Creating admin Supabase client (bypasses RLS) - use only for system operations'
  )

  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}
