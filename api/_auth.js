/**
 * üîê TELEGRAM AUTHENTICATION MIDDLEWARE
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Mini Apps
 */

import crypto from 'crypto'

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç initData –æ—Ç Telegram WebApp
 * @param {string} initData - –°—Ç—Ä–æ–∫–∞ initData –æ—Ç Telegram
 * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns {{ isValid: boolean, user: object | null }} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function validateTelegramInitData(initData, botToken) {
  try {
    if (!initData || !botToken) {
      return { isValid: false, user: null }
    }

    const params = new URLSearchParams(initData)
    const hash = params.get('hash')

    if (!hash) {
      return { isValid: false, user: null }
    }

    params.delete('hash')

    // –í–∞–∂–Ω–æ: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const dataCheckString = Array.from(params.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n')

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    const secretKey = crypto
      .createHmac('sha256', 'WebAppData')
      .update(botToken)
      .digest()

    // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
    const calculatedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–µ—à–µ–π
    if (calculatedHash === hash) {
      const user = JSON.parse(params.get('user') || '{}')
      return { isValid: true, user }
    }

    return { isValid: false, user: null }
  } catch (error) {
    console.error('‚ùå Telegram init data validation error:', error)
    return { isValid: false, user: null }
  }
}

/**
 * Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Authorization header —Å Telegram initData
 * –ò –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase RLS
 *
 * @param {Request} req - Vercel Functions request
 * @returns {{ authorized: boolean, telegramId: number | null, userData: object | null, jwt: string | null }} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function authenticateTelegramUser(req) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Authorization header
    const authHeader = req.headers.authorization || req.headers.Authorization

    if (!authHeader || !authHeader.startsWith('tma ')) {
      console.warn('‚ö†Ô∏è Missing or invalid Authorization header')
      return { authorized: false, telegramId: null, userData: null, jwt: null }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º initData
    const initData = authHeader.replace('tma ', '')

    const BOT_TOKEN =
      process.env.TELEGRAM_BOT_TOKEN || process.env.VITE_TELEGRAM_BOT_TOKEN

    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured')
      return { authorized: false, telegramId: null, userData: null, jwt: null }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
    const { isValid, user } = validateTelegramInitData(initData, BOT_TOKEN)

    if (!isValid || !user || !user.id) {
      console.warn('‚ö†Ô∏è Invalid Telegram initData')
      return { authorized: false, telegramId: null, userData: null, jwt: null }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è Supabase RLS
    let jwt = null
    try {
      const { generateSupabaseJWT } = await import('./_jwt.js')
      jwt = generateSupabaseJWT(user.id, {
        firstName: user.first_name,
        lastName: user.last_name,
        username: user.username,
      })
      console.log(`üîë Generated JWT for user ${user.id}`)
    } catch (jwtError) {
      console.error('‚ö†Ô∏è JWT generation failed:', jwtError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ JWT (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SERVICE_ROLE_KEY fallback)
    }

    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log(
      `‚úÖ User authenticated: ${user.id} (${user.first_name || 'Unknown'})`
    )

    return {
      authorized: true,
      telegramId: user.id,
      userData: {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        username: user.username,
        languageCode: user.language_code,
        photoUrl: user.photo_url,
      },
      jwt,
    }
  } catch (error) {
    console.error('‚ùå Authentication error:', error)
    return { authorized: false, telegramId: null, userData: null, jwt: null }
  }
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º handler
 *
 * @param {Function} handler - API handler —Ñ—É–Ω–∫—Ü–∏—è
 * @returns {Function} –ó–∞—â–∏—â–µ–Ω–Ω—ã–π handler
 */
export function withAuth(handler) {
  return async (req, res) => {
    // üîí CORS headers - —Å—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    const allowedOrigin =
      process.env.VITE_APP_URL || 'https://kirakira-theta.vercel.app'

    res.setHeader('Access-Control-Allow-Origin', allowedOrigin)
    res.setHeader(
      'Access-Control-Allow-Methods',
      'GET, POST, PUT, DELETE, OPTIONS'
    )
    res.setHeader(
      'Access-Control-Allow-Headers',
      'Content-Type, Authorization, X-Admin-Key, X-Bot-Secret'
    )
    res.setHeader('Access-Control-Allow-Credentials', 'true')
    res.setHeader('Access-Control-Max-Age', '86400')

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å
    if (req.method === 'OPTIONS') {
      return res.status(200).end()
    }

    // üîë –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –°–õ–£–ß–ê–ô: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –±–æ—Ç–∞
    const botSecret = req.headers['x-bot-secret']
    const EXPECTED_BOT_SECRET = process.env.TELEGRAM_BOT_SECRET

    console.log(
      `üîç Middleware bot check: received=${botSecret ? 'SET' : 'MISSING'}, expected=${EXPECTED_BOT_SECRET ? 'SET' : 'MISSING'}`
    )
    console.log(`üîç Bot secret match: ${botSecret === EXPECTED_BOT_SECRET}`)

    if (botSecret === EXPECTED_BOT_SECRET) {
      console.log(
        'ü§ñ Bot request detected in middleware, bypassing authentication'
      )
      // –î–ª—è –±–æ—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      req.auth = {
        authorized: true,
        telegramId: null, // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ handler
        userData: null,
        jwt: null,
      }
      return handler(req, res)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const auth = await authenticateTelegramUser(req)

    if (!auth.authorized) {
      console.warn(
        `‚ö†Ô∏è Unauthorized access attempt from ${req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown'}`
      )
      return res.status(401).json({
        success: false,
        error: 'Unauthorized',
        message: 'Invalid or missing Telegram authentication',
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ request –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handler
    req.auth = auth

    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π handler
    return handler(req, res)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ telegramId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º
 *
 * @param {number} requestedTelegramId - telegramId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 * @param {number} authenticatedTelegramId - telegramId –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} true –µ—Å–ª–∏ IDs —Å–æ–≤–ø–∞–¥–∞—é—Ç
 */
export function verifyTelegramId(requestedTelegramId, authenticatedTelegramId) {
  const requested = parseInt(requestedTelegramId)
  const authenticated = parseInt(authenticatedTelegramId)

  if (requested !== authenticated) {
    console.warn(
      `‚ö†Ô∏è Telegram ID mismatch: requested ${requested}, authenticated ${authenticated}`
    )
    return false
  }

  return true
}
