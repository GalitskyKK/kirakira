/**
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
 * POST /api/garden/add-element
 * Body: { telegramId: number, element: { type, position, unlockDate, mood, rarity } }
 */

/**
 * üóÑÔ∏è SUPABASE: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {Object} element - –≠–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function saveGardenElement(telegramUserId, element) {
  try {
    console.log(
      `üå± Saving garden element to Supabase for user ${telegramUserId}:`,
      element
    )

    // üóÑÔ∏è SUPABASE –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {
      try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const { createClient } = await import('@supabase/supabase-js')

        const supabase = createClient(
          process.env.SUPABASE_URL,
          process.env.SUPABASE_SERVICE_ROLE_KEY
        )

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
        const gardenEntry = {
          telegram_id: telegramUserId,
          element_type: element.type,
          position_x: element.position.x,
          position_y: element.position.y,
          rarity: element.rarity,
          mood_influence: element.mood, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: mood_influence, –Ω–µ mood_when_unlocked
          unlock_date: element.unlockDate,
          created_at: new Date().toISOString(),
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data, error } = await supabase
          .from('garden_elements')
          .insert(gardenEntry)
          .select()

        if (error) {
          throw new Error(`Supabase garden insert failed: ${error.message}`)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await updateUserStatsCache(supabase, telegramUserId)

        console.log(
          `‚úÖ Garden element saved to Supabase for user ${telegramUserId}`
        )
        return true
      } catch (supabaseError) {
        console.error(`‚ùå Supabase garden save failed:`, supabaseError.message)
        return false
      }
    }

    // üîÑ Fallback: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üìù Garden element recorded (no database):`, {
      telegramUserId,
      element,
    })

    return true
  } catch (error) {
    console.error('Error saving garden element:', error)
    return false
  }
}

/**
 * üìä –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {Object} supabase - –ö–ª–∏–µ–Ω—Ç Supabase
 * @param {number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateUserStatsCache(supabase, telegramUserId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
    const { data: stats, error } = await supabase.rpc('get_user_stats', {
      user_telegram_id: telegramUserId,
    })

    if (error) {
      console.warn(`‚ö†Ô∏è Stats update warning:`, error.message)
      return
    }

    if (stats && stats.length > 0) {
      const userStats = stats[0]

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { error: updateError } = await supabase
        .from('users')
        .update({
          total_days: userStats.total_days,
          current_streak: userStats.current_streak,
          longest_streak: userStats.longest_streak,
          total_elements: userStats.total_elements,
          rare_elements_found: userStats.rare_elements_found,
          updated_at: new Date().toISOString(),
        })
        .eq('telegram_id', telegramUserId)

      if (updateError) {
        console.warn(`‚ö†Ô∏è User stats cache update warning:`, updateError.message)
      } else {
        console.log(`üìä Updated stats cache for user ${telegramUserId}`)
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Stats cache update failed:`, error.message)
  }
}

/**
 * API handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
 * @param {Request} req - Vercel Functions request object
 * @param {Response} res - Vercel Functions response object
 */
export default async function handler(req, res) {
  // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  console.log('üîç API /garden/add-element called:', {
    method: req.method,
    headers: req.headers,
    body: req.body,
    timestamp: new Date().toISOString(),
  })

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, element } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || typeof telegramId !== 'number') {
      return res.status(400).json({ error: 'telegramId (number) is required' })
    }

    if (!element || typeof element !== 'object') {
      return res.status(400).json({ error: 'element (object) is required' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
    if (
      !element.type ||
      !element.position ||
      !element.rarity ||
      !element.mood
    ) {
      return res.status(400).json({
        error: 'element must contain: type, position, rarity, mood',
      })
    }

    console.log(
      `Adding garden element for Telegram user ${telegramId}:`,
      element
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
    const saved = await saveGardenElement(telegramId, element)

    if (!saved) {
      return res.status(500).json({
        success: false,
        error: 'Failed to save garden element',
      })
    }

    res.status(200).json({
      success: true,
      data: {
        telegramId,
        element,
        saved: true,
      },
      message: 'Garden element saved successfully',
    })
  } catch (error) {
    console.error('Error saving garden element:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error?.message || 'Unknown error',
    })
  }
}
