/**
 * üå± –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –°–ê–î–ê
 * –í–∫–ª—é—á–∞–µ—Ç: add-element, history, update-position
 */

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
async function getSupabaseClient() {
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// ‚ûï ACTION: ADD-ELEMENT - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
// ===============================================
async function handleAddElement(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, element, telegramUserData } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !element) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, element',
      })
    }

    console.log(
      `üå± Saving garden element to Supabase for user ${telegramId}:`,
      element
    )

    const supabase = await getSupabaseClient()

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
    if (telegramUserData) {
      console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

      const { error: userError } = await supabase.from('users').upsert(
        {
          telegram_id: telegramId,
          user_id: telegramUserData.userId || `user_${telegramId}`,
          username: telegramUserData.username || null,
          first_name: telegramUserData.firstName || null,
          last_name: telegramUserData.lastName || null,
          language_code: telegramUserData.languageCode || 'ru',
          photo_url: telegramUserData.photoUrl || null,
          // registration_date –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ created_at (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î)
          last_visit_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
        {
          onConflict: 'telegram_id',
        }
      )

      if (userError) {
        console.error('Auto user creation error:', userError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      } else {
        console.log(`‚úÖ User ${telegramId} ensured in database`)
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .insert({
        telegram_id: telegramId,
        element_type: element.type,
        rarity: element.rarity,
        position_x: element.position.x,
        position_y: element.position.y,
        mood_influence: element.moodInfluence,
        unlock_date: element.unlockDate || new Date().toISOString(),
      })
      .select()
      .single()

    if (error) {
      console.error('Supabase garden element insert failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to save garden element',
      })
    }

    console.log(`‚úÖ Garden element saved to Supabase:`, data)

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–Ω–∏, —Å—Ç—Ä–∏–∫–∏, —ç–ª–µ–º–µ–Ω—Ç—ã)
    const { error: updateError } = await supabase.rpc('update_user_stats', {
      target_telegram_id: telegramId,
    })

    if (updateError) {
      console.warn('Failed to update user stats:', updateError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    } else {
      console.log('‚úÖ User stats updated after adding garden element')
    }

    // üèÜ –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ü–´–¢ –ó–ê –ù–û–í–û–ï –†–ê–°–¢–ï–ù–ò–ï
    try {
      // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ
      const addPlantResponse = await fetch(
        `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/profile?action=add_experience`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            telegramId,
            experiencePoints: 15, // EXPERIENCE_REWARDS.NEW_PLANT
            reason: `garden_element: ${element.type} (${element.rarity})`,
          }),
        }
      )

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ —Ä–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const rareTypes = ['rare', 'epic', 'legendary']
      if (rareTypes.includes(element.rarity?.toLowerCase())) {
        const addRareResponse = await fetch(
          `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/profile?action=add_experience`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              telegramId,
              experiencePoints: 50, // EXPERIENCE_REWARDS.RARE_PLANT
              reason: `rare_element: ${element.type} (${element.rarity})`,
            }),
          }
        )

        if (addRareResponse.ok) {
          console.log(
            `üèÜ Added rare element bonus XP for ${element.rarity} ${element.type}`
          )
        }
      }

      if (addPlantResponse.ok) {
        console.log(`üèÜ Added XP for new garden element: ${element.type}`)
      }
    } catch (xpError) {
      console.warn('‚ö†Ô∏è Failed to add XP for garden element:', xpError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    res.status(200).json({
      success: true,
      data: {
        id: data.id,
        saved: true,
        storage: 'supabase',
        message: 'Garden element saved successfully',
      },
    })
  } catch (error) {
    console.error('Garden add-element error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: HISTORY - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞
// ===============================================
async function handleHistory(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(
      `üå± Loading garden history from Supabase for user ${telegramId}`
    )

    const supabase = await getSupabaseClient()

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('unlock_date', { ascending: false })

    if (error) {
      console.error('Supabase garden history fetch failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch garden history',
      })
    }

    console.log(`‚úÖ Loaded ${data.length} garden elements from Supabase`)

    res.status(200).json({
      success: true,
      data: {
        gardenElements: data, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç frontend
        total: data.length,
        storage: 'supabase',
      },
    })
  } catch (error) {
    console.error('Garden history error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üîÑ ACTION: UPDATE-POSITION - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
// ===============================================
async function handleUpdatePosition(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, elementId, position } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !elementId || !position) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, elementId, position',
      })
    }

    const { x: positionX, y: positionY } = position

    if (
      typeof positionX !== 'number' ||
      typeof positionY !== 'number' ||
      positionX < 0 ||
      positionX > 100 ||
      positionY < 0 ||
      positionY > 100
    ) {
      return res.status(400).json({
        success: false,
        error: 'Invalid position coordinates. Must be numbers between 0-100',
      })
    }

    console.log(
      `üóÑÔ∏è Updating element position in Supabase for user ${telegramId}:`,
      {
        elementId,
        positionX,
        positionY,
      }
    )

    const supabase = await getSupabaseClient()

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "element_" –∏–∑ UUID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    const cleanElementId = elementId.startsWith('element_')
      ? elementId.replace('element_', '')
      : elementId

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .update({
        position_x: positionX,
        position_y: positionY,
        updated_at: new Date().toISOString(),
      })
      .eq('id', cleanElementId)
      .eq('telegram_id', telegramId) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
      .select()

    if (error) {
      console.error('Supabase position update failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to update element position',
      })
    }

    if (!data || data.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Element not found or no permission to update',
      })
    }

    console.log(`‚úÖ Element position updated in Supabase:`, data[0])

    res.status(200).json({
      success: true,
      data: {
        elementId: `element_${data[0].id}`,
        position: {
          x: data[0].position_x,
          y: data[0].position_y,
        },
        updatedAt: data[0].updated_at,
        storage: 'supabase',
        message: 'Element position updated successfully',
      },
    })
  } catch (error) {
    console.error('Garden update-position error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üëÄ ACTION: VIEW-FRIEND-GARDEN - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–∞ –¥—Ä—É–≥–∞
// ===============================================
async function handleViewFriendGarden(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { viewerTelegramId, friendTelegramId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!viewerTelegramId || !friendTelegramId) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required parameters: viewerTelegramId, friendTelegramId',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–¥
    if (parseInt(viewerTelegramId) === parseInt(friendTelegramId)) {
      return res.status(400).json({
        success: false,
        error: 'Cannot view your own garden through friend view',
      })
    }

    console.log(
      `üëÄ Friend garden view request: ${viewerTelegramId} wants to view ${friendTelegramId}'s garden`
    )

    const supabase = await getSupabaseClient()

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏
    const { data: friendship, error: friendshipError } = await supabase
      .from('friendships')
      .select('status')
      .or(
        `and(requester_telegram_id.eq.${viewerTelegramId},addressee_telegram_id.eq.${friendTelegramId}),and(requester_telegram_id.eq.${friendTelegramId},addressee_telegram_id.eq.${viewerTelegramId})`
      )
      .eq('status', 'accepted')
      .single()

    if (friendshipError || !friendship) {
      return res.status(403).json({
        success: false,
        error: 'Access denied: you are not friends with this user',
      })
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–¥–∞
    const { data: ownerSettings, error: settingsError } = await supabase
      .from('users')
      .select('first_name, last_name, username, photo_url, share_garden')
      .eq('telegram_id', friendTelegramId)
      .single()

    if (settingsError) {
      return res.status(404).json({
        success: false,
        error: 'Friend not found',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞–¥–∞–Ω–æ)
    const canShareGarden = ownerSettings.share_garden !== false

    if (!canShareGarden) {
      return res.status(403).json({
        success: false,
        error: 'This user has disabled garden sharing',
      })
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞ –¥—Ä—É–≥–∞
    const { data: gardenElements, error: gardenError } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', friendTelegramId)
      .order('unlock_date', { ascending: true }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

    if (gardenError) {
      console.error('Failed to fetch friend garden elements:', gardenError)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch garden data',
      })
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–∞
    const { data: friendStats, error: statsError } = await supabase
      .from('users')
      .select('current_streak, total_elements, created_at')
      .eq('telegram_id', friendTelegramId)
      .single()

    console.log(
      `‚úÖ Loaded ${gardenElements.length} garden elements for friend ${friendTelegramId}`
    )

    // 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    res.status(200).json({
      success: true,
      data: {
        friendInfo: {
          telegramId: parseInt(friendTelegramId),
          firstName: ownerSettings.first_name || '–î—Ä—É–≥',
          lastName: ownerSettings.last_name || '',
          username: ownerSettings.username || '',
          photoUrl: ownerSettings.photo_url || null,
          currentStreak: friendStats?.current_streak || 0,
          totalElements: friendStats?.total_elements || gardenElements.length,
          gardenCreated: friendStats?.created_at || null,
        },
        gardenElements: gardenElements.map(element => ({
          id: element.id,
          type: element.element_type,
          rarity: element.rarity,
          position: {
            x: element.position_x,
            y: element.position_y,
          },
          unlockDate: element.unlock_date,
          moodInfluence: element.mood_influence,
          createdAt: element.created_at,
        })),
        total: gardenElements.length,
        canEdit: false, // –í—Å–µ–≥–¥–∞ false –¥–ª—è —á—É–∂–æ–≥–æ —Å–∞–¥–∞
        viewMode: 'friend',
      },
    })
  } catch (error) {
    console.error('View friend garden error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'add-element':
        return await handleAddElement(req, res)
      case 'history':
        return await handleHistory(req, res)
      case 'update-position':
        return await handleUpdatePosition(req, res)
      case 'view-friend-garden':
        return await handleViewFriendGarden(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: add-element, history, update-position, view-friend-garden`,
        })
    }
  } catch (error) {
    console.error('Garden API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}
