/**
 * üå± –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –°–ê–î–ê
 * –í–∫–ª—é—á–∞–µ—Ç: add-element, history, update-position
 */

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
async function getSupabaseClient() {
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// ‚ûï ACTION: ADD-ELEMENT - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
// ===============================================
async function handleAddElement(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, element, telegramUserData } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !element) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, element',
      })
    }

    console.log(
      `üå± Saving garden element to Supabase for user ${telegramId}:`,
      element
    )

    const supabase = await getSupabaseClient()

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
    if (telegramUserData) {
      console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

      const { error: userError } = await supabase.rpc('ensure_user_exists', {
        telegram_id: telegramId,
        user_data: telegramUserData,
      })

      if (userError) {
        console.error('Auto user creation error:', userError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      } else {
        console.log(`‚úÖ User ${telegramId} ensured in database`)
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .insert({
        telegram_id: telegramId,
        element_type: element.type,
        rarity: element.rarity,
        position_x: element.position.x,
        position_y: element.position.y,
        mood_influence: element.moodInfluence,
        unlock_date: element.unlockDate || new Date().toISOString(),
      })
      .select()
      .single()

    if (error) {
      console.error('Supabase garden element insert failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to save garden element',
      })
    }

    console.log(`‚úÖ Garden element saved to Supabase:`, data)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase.rpc(
      'increment_user_total_elements',
      { user_telegram_id: telegramId }
    )

    if (updateError) {
      console.warn('Failed to update user elements counter:', updateError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    res.status(200).json({
      success: true,
      data: {
        id: data.id,
        saved: true,
        storage: 'supabase',
        message: 'Garden element saved successfully',
      },
    })
  } catch (error) {
    console.error('Garden add-element error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: HISTORY - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞
// ===============================================
async function handleHistory(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(
      `üå± Loading garden history from Supabase for user ${telegramId}`
    )

    const supabase = await getSupabaseClient()

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('unlock_date', { ascending: false })

    if (error) {
      console.error('Supabase garden history fetch failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch garden history',
      })
    }

    console.log(`‚úÖ Loaded ${data.length} garden elements from Supabase`)

    res.status(200).json({
      success: true,
      data: {
        gardenElements: data, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç frontend
        total: data.length,
        storage: 'supabase',
      },
    })
  } catch (error) {
    console.error('Garden history error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üîÑ ACTION: UPDATE-POSITION - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
// ===============================================
async function handleUpdatePosition(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, elementId, position } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !elementId || !position) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, elementId, position',
      })
    }

    const { x: positionX, y: positionY } = position

    if (
      typeof positionX !== 'number' ||
      typeof positionY !== 'number' ||
      positionX < 0 ||
      positionX > 100 ||
      positionY < 0 ||
      positionY > 100
    ) {
      return res.status(400).json({
        success: false,
        error: 'Invalid position coordinates. Must be numbers between 0-100',
      })
    }

    console.log(
      `üóÑÔ∏è Updating element position in Supabase for user ${telegramId}:`,
      {
        elementId,
        positionX,
        positionY,
      }
    )

    const supabase = await getSupabaseClient()

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "element_" –∏–∑ UUID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    const cleanElementId = elementId.startsWith('element_')
      ? elementId.replace('element_', '')
      : elementId

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .update({
        position_x: positionX,
        position_y: positionY,
        updated_at: new Date().toISOString(),
      })
      .eq('id', cleanElementId)
      .eq('telegram_id', telegramId) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
      .select()

    if (error) {
      console.error('Supabase position update failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to update element position',
      })
    }

    if (!data || data.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Element not found or no permission to update',
      })
    }

    console.log(`‚úÖ Element position updated in Supabase:`, data[0])

    res.status(200).json({
      success: true,
      data: {
        elementId: `element_${data[0].id}`,
        position: {
          x: data[0].position_x,
          y: data[0].position_y,
        },
        updatedAt: data[0].updated_at,
        storage: 'supabase',
        message: 'Element position updated successfully',
      },
    })
  } catch (error) {
    console.error('Garden update-position error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'add-element':
        return await handleAddElement(req, res)
      case 'history':
        return await handleHistory(req, res)
      case 'update-position':
        return await handleUpdatePosition(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: add-element, history, update-position`,
        })
    }
  } catch (error) {
    console.error('Garden API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}
