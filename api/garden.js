/**
 * üå± –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –°–ê–î–ê
 * –í–∫–ª—é—á–∞–µ—Ç: add-element, history, update-position
 */

// üîí –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase —Å JWT (RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
async function getSupabaseClient(jwt = null) {
  if (!process.env.SUPABASE_URL) {
    throw new Error('SUPABASE_URL not configured')
  }

  // ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (jwt) {
    try {
      const { createAuthenticatedSupabaseClient } = await import('./_jwt.js')
      console.log('‚úÖ Using JWT-authenticated Supabase client (RLS enabled)')
      return await createAuthenticatedSupabaseClient(jwt)
    } catch (error) {
      console.error('‚ùå Failed to create JWT client:', error)
      // Fallback –Ω–∞ SERVICE_ROLE_KEY –Ω–∏–∂–µ
    }
  }

  // ‚ö†Ô∏è FALLBACK: SERVICE_ROLE_KEY (–º–∏–Ω—É–µ—Ç RLS, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è admin –æ–ø–µ—Ä–∞—Ü–∏–π)
  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase credentials not configured')
  }

  console.warn('‚ö†Ô∏è Using SERVICE_ROLE_KEY (bypasses RLS) - migrate to JWT!')
  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

// ===============================================
// ‚ûï ACTION: ADD-ELEMENT - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
// ===============================================
async function handleAddElement(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, element, telegramUserData } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !element) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, element',
      })
    }

    console.log(
      `üå± Saving garden element to Supabase for user ${telegramId}:`,
      element
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–õ–ò –ï–ì–û –ù–ï–¢
    if (telegramUserData) {
      console.log(`üë§ Ensuring user exists with data:`, telegramUserData)

      const { error: userError } = await supabase.from('users').upsert(
        {
          telegram_id: telegramId,
          user_id: telegramUserData.userId || `user_${telegramId}`,
          username: telegramUserData.username || null,
          first_name: telegramUserData.firstName || null,
          last_name: telegramUserData.lastName || null,
          language_code: telegramUserData.languageCode || 'ru',
          photo_url: telegramUserData.photoUrl || null,
          // registration_date –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ created_at (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î)
          last_visit_date: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
        {
          onConflict: 'telegram_id',
        }
      )

      if (userError) {
        console.error('Auto user creation error:', userError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      } else {
        console.log(`‚úÖ User ${telegramId} ensured in database`)
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞
    // üîë –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
    const insertData = {
      telegram_id: telegramId,
      element_type: element.type,
      rarity: element.rarity,
      position_x: element.position.x,
      position_y: element.position.y,
      mood_influence: element.moodInfluence,
      unlock_date: element.unlockDate || new Date().toISOString(),
      seasonal_variant: element.seasonalVariant || null, // üçÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    }

    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    // –í–ê–ñ–ù–û: –í PostgreSQL —Ç–µ–∫—Å—Ç–æ–≤—ã–π ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ UUID
    // –§–æ—Ä–º–∞—Ç: 'user_123-2024-10-09' -> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º UUID –∏–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞
    if (element.id) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π UUID —Ñ–æ—Ä–º–∞—Ç
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UUID –∏–∑ –Ω–µ—ë
      console.log(`üîë Using client-provided element ID: ${element.id}`)

      // ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∫–∞–∫ –µ—Å—Ç—å
      // –í –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π UUID –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π constraint –ø–æ (telegram_id + unlock_date)
      // –ê ID –ø—É—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º, –Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      // –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    }

    const { data, error } = await supabase
      .from('garden_elements')
      .insert(insertData)
      .select()
      .single()

    if (error) {
      console.error('Supabase garden element insert failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to save garden element',
      })
    }

    console.log(`‚úÖ Garden element saved to Supabase:`, data)

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–Ω–∏, —Å—Ç—Ä–∏–∫–∏, —ç–ª–µ–º–µ–Ω—Ç—ã)
    const { error: updateError } = await supabase.rpc('update_user_stats', {
      target_telegram_id: telegramId,
    })

    if (updateError) {
      console.warn('Failed to update user stats:', updateError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    } else {
      console.log('‚úÖ User stats updated after adding garden element')
    }

    // üèÜ –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ü–´–¢ –ó–ê –ù–û–í–û–ï –†–ê–°–¢–ï–ù–ò–ï (JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RPC)
    try {
      // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Å —Ç–µ–º –∂–µ JWT-–∫–ª–∏–µ–Ω—Ç–æ–º (—Å–æ–±–ª—é–¥–∞–µ—Ç RLS)

      // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ (15 XP)
      const { data: plantXP, error: plantXPError } = await supabase.rpc(
        'add_user_experience',
        {
          p_telegram_id: telegramId,
          p_experience_points: 15, // EXPERIENCE_REWARDS.NEW_PLANT
        }
      )

      if (plantXPError) {
        console.error(`‚ùå CRITICAL: Failed to add XP for garden element:`, {
          error: plantXPError,
          telegram_id: telegramId,
          element_type: element.type,
          rarity: element.rarity,
        })
      } else {
        console.log(
          `üèÜ Added 15 XP for new garden element: ${element.type}`,
          plantXP?.[0] || plantXP
        )
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ —Ä–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (50 XP)
      const rareTypes = ['rare', 'epic', 'legendary']
      if (rareTypes.includes(element.rarity?.toLowerCase())) {
        const { data: rareXP, error: rareXPError } = await supabase.rpc(
          'add_user_experience',
          {
            p_telegram_id: telegramId,
            p_experience_points: 50, // EXPERIENCE_REWARDS.RARE_PLANT
          }
        )

        if (rareXPError) {
          console.error(`‚ùå CRITICAL: Failed to add rare element bonus XP:`, {
            error: rareXPError,
            telegram_id: telegramId,
            element_type: element.type,
            rarity: element.rarity,
          })
        } else {
          console.log(
            `üèÜ Added 50 XP rare element bonus for ${element.rarity} ${element.type}`,
            rareXP?.[0] || rareXP
          )
        }
      }
    } catch (xpError) {
      console.error('‚ùå CRITICAL: Exception in XP addition:', {
        exception: xpError,
        telegram_id: telegramId,
        message: xpError?.message,
      })
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    }

    res.status(200).json({
      success: true,
      data: {
        id: data.id,
        saved: true,
        storage: 'supabase',
        message: 'Garden element saved successfully',
      },
    })
  } catch (error) {
    console.error('Garden add-element error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: HISTORY - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞
// ===============================================
async function handleHistory(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(
      `üå± Loading garden history from Supabase for user ${telegramId}`
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('unlock_date', { ascending: false })

    if (error) {
      console.error('Supabase garden history fetch failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch garden history',
      })
    }

    console.log(`‚úÖ Loaded ${data.length} garden elements from Supabase`)

    res.status(200).json({
      success: true,
      data: {
        gardenElements: data, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç frontend
        total: data.length,
        storage: 'supabase',
      },
    })
  } catch (error) {
    console.error('Garden history error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üîÑ ACTION: UPDATE-POSITION - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
// ===============================================
async function handleUpdatePosition(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, elementId, position } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !elementId || !position) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, elementId, position',
      })
    }

    const { x: positionX, y: positionY } = position

    if (
      typeof positionX !== 'number' ||
      typeof positionY !== 'number' ||
      positionX < 0 ||
      positionX > 100 ||
      positionY < 0 ||
      positionY > 100
    ) {
      return res.status(400).json({
        success: false,
        error: 'Invalid position coordinates. Must be numbers between 0-100',
      })
    }

    console.log(
      `üóÑÔ∏è Updating element position in Supabase for user ${telegramId}:`,
      {
        elementId,
        positionX,
        positionY,
      }
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "element_" –∏–∑ UUID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    const cleanElementId = elementId.startsWith('element_')
      ? elementId.replace('element_', '')
      : elementId

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
    const { data, error } = await supabase
      .from('garden_elements')
      .update({
        position_x: positionX,
        position_y: positionY,
        updated_at: new Date().toISOString(),
      })
      .eq('id', cleanElementId)
      .eq('telegram_id', telegramId) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
      .select()

    if (error) {
      console.error('Supabase position update failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to update element position',
      })
    }

    if (!data || data.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Element not found or no permission to update',
      })
    }

    console.log(`‚úÖ Element position updated in Supabase:`, data[0])

    res.status(200).json({
      success: true,
      data: {
        elementId: `element_${data[0].id}`,
        position: {
          x: data[0].position_x,
          y: data[0].position_y,
        },
        updatedAt: data[0].updated_at,
        storage: 'supabase',
        message: 'Element position updated successfully',
      },
    })
  } catch (error) {
    console.error('Garden update-position error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üëÄ ACTION: VIEW-FRIEND-GARDEN - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–∞ –¥—Ä—É–≥–∞
// ===============================================
async function handleViewFriendGarden(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { viewerTelegramId, friendTelegramId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!viewerTelegramId || !friendTelegramId) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required parameters: viewerTelegramId, friendTelegramId',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–¥
    if (parseInt(viewerTelegramId) === parseInt(friendTelegramId)) {
      return res.status(400).json({
        success: false,
        error: 'Cannot view your own garden through friend view',
      })
    }

    console.log(
      `üëÄ Friend garden view request: ${viewerTelegramId} wants to view ${friendTelegramId}'s garden`
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏
    const { data: friendship, error: friendshipError } = await supabase
      .from('friendships')
      .select('status')
      .or(
        `and(requester_telegram_id.eq.${viewerTelegramId},addressee_telegram_id.eq.${friendTelegramId}),and(requester_telegram_id.eq.${friendTelegramId},addressee_telegram_id.eq.${viewerTelegramId})`
      )
      .eq('status', 'accepted')
      .single()

    if (friendshipError || !friendship) {
      return res.status(403).json({
        success: false,
        error: 'Access denied: you are not friends with this user',
      })
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–¥–∞
    const { data: ownerSettings, error: settingsError } = await supabase
      .from('users')
      .select(
        'first_name, last_name, username, photo_url, share_garden, garden_theme'
      )
      .eq('telegram_id', friendTelegramId)
      .single()

    if (settingsError) {
      return res.status(404).json({
        success: false,
        error: 'Friend not found',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞–¥–∞–Ω–æ)
    const canShareGarden = ownerSettings.share_garden !== false

    if (!canShareGarden) {
      return res.status(403).json({
        success: false,
        error: 'This user has disabled garden sharing',
      })
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞ –¥—Ä—É–≥–∞
    const { data: gardenElements, error: gardenError } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', friendTelegramId)
      .order('unlock_date', { ascending: true }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

    if (gardenError) {
      console.error('Failed to fetch friend garden elements:', gardenError)
      return res.status(500).json({
        success: false,
        error: 'Failed to fetch garden data',
      })
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–∞
    const { data: friendStats, error: statsError } = await supabase
      .from('users')
      .select('current_streak, total_elements, created_at')
      .eq('telegram_id', friendTelegramId)
      .single()

    console.log(
      `‚úÖ Loaded ${gardenElements.length} garden elements for friend ${friendTelegramId}`
    )

    // 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    res.status(200).json({
      success: true,
      data: {
        friendInfo: {
          telegramId: parseInt(friendTelegramId),
          firstName: ownerSettings.first_name || '–î—Ä—É–≥',
          lastName: ownerSettings.last_name || '',
          username: ownerSettings.username || '',
          photoUrl: ownerSettings.photo_url || null,
          currentStreak: friendStats?.current_streak || 0,
          totalElements: friendStats?.total_elements || gardenElements.length,
          gardenCreated: friendStats?.created_at || null,
          gardenTheme: ownerSettings.garden_theme || 'light', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É —Å–∞–¥–∞ –¥—Ä—É–≥–∞
        },
        gardenElements: gardenElements.map(element => ({
          id: element.id,
          type: element.element_type,
          rarity: element.rarity,
          position: {
            x: element.position_x,
            y: element.position_y,
          },
          unlockDate: element.unlock_date,
          moodInfluence: element.mood_influence,
          createdAt: element.created_at,
        })),
        total: gardenElements.length,
        canEdit: false, // –í—Å–µ–≥–¥–∞ false –¥–ª—è —á—É–∂–æ–≥–æ —Å–∞–¥–∞
        viewMode: 'friend',
      },
    })
  } catch (error) {
    console.error('View friend garden error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// ‚¨ÜÔ∏è ACTION: UPGRADE-ELEMENT - –£–ª—É—á—à–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
// ===============================================
async function handleUpgradeElement(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, elementId, useFree = false } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !elementId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, elementId',
      })
    }

    console.log(
      `‚¨ÜÔ∏è Upgrading element ${elementId} for user ${telegramId} (useFree: ${useFree})`
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // –í—ã–∑—ã–≤–∞–µ–º PostgreSQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const { data, error } = await supabase.rpc('upgrade_garden_element', {
      p_element_id: elementId,
      p_telegram_id: telegramId,
      p_use_free_upgrade: useFree,
    })

    if (error) {
      console.error('Supabase upgrade element failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to upgrade element',
      })
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞/–æ–±—ä–µ–∫—Ç–∞
    const result = Array.isArray(data) ? data[0] : data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    if (!result || !result.success) {
      console.log(`‚ö†Ô∏è Upgrade failed: ${result?.error}`)
      return res.status(400).json({
        success: false,
        error: result?.error || 'Upgrade failed',
      })
    }

    console.log(`‚úÖ Element upgrade result:`, result)

    // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò failed_attempts
    console.log('üîç Upgrade details:', {
      elementId,
      telegramId,
      upgraded: result.upgraded,
      newRarity: result.newRarity,
      progressBonus: result.progressBonus,
      failedAttempts: result.failedAttempts,
      cost: result.cost,
      usedFree: result.usedFree,
    })

    res.status(200).json({
      success: true,
      data: {
        upgraded: result.upgraded,
        newRarity: result.newRarity,
        xpReward: result.xpReward,
        progressBonus: result.progressBonus,
        failedAttempts: result.failedAttempts,
        cost: result.cost,
        usedFree: result.usedFree,
        message: result.upgraded
          ? 'Element upgraded successfully'
          : 'Upgrade failed, progress increased',
      },
    })
  } catch (error) {
    console.error('Garden upgrade-element error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üìä ACTION: UPGRADE-INFO - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
// ===============================================
async function handleUpgradeInfo(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, elementId } = req.query

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId || !elementId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameters: telegramId, elementId',
      })
    }

    console.log(
      `üìä Getting upgrade info for element ${elementId} of user ${telegramId}`
    )

    // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ req.auth –¥–ª—è RLS-–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const supabase = await getSupabaseClient(req.auth?.jwt)

    // –í—ã–∑—ã–≤–∞–µ–º PostgreSQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const { data, error } = await supabase.rpc('get_element_upgrade_info', {
      p_element_id: elementId,
      p_telegram_id: telegramId,
    })

    if (error) {
      console.error('Supabase get upgrade info failed:', error)
      return res.status(500).json({
        success: false,
        error: 'Failed to get upgrade info',
      })
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞/–æ–±—ä–µ–∫—Ç–∞
    const result = Array.isArray(data) ? data[0] : data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    if (!result || !result.success) {
      console.log(`‚ö†Ô∏è Get upgrade info failed: ${result?.error}`)
      return res.status(400).json({
        success: false,
        error: result?.error || 'Failed to get upgrade info',
      })
    }

    console.log(`‚úÖ Upgrade info retrieved:`, result)

    res.status(200).json({
      success: true,
      data: {
        id: result.id,
        elementId: result.elementId,
        telegramId: result.telegramId,
        originalRarity: result.originalRarity,
        currentRarity: result.currentRarity,
        upgradeCount: result.upgradeCount || 0,
        failedAttempts: result.failedAttempts || 0,
        progressBonus: result.progressBonus || 0,
        lastUpgradeAt: result.lastUpgradeAt,
        createdAt: result.createdAt,
      },
    })
  } catch (error) {
    console.error('Garden upgrade-info error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { withAuth, verifyTelegramId } from './_auth.js'

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π handler —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
async function protectedHandler(req, res) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: view-friend-garden –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–æ–≤ –¥—Ä—É–∑–µ–π
    const requestedTelegramId =
      req.query.telegramId || req.body.telegramId || req.query.viewerTelegramId
    const allowedActionsWithDifferentId = ['view-friend-garden']

    if (
      requestedTelegramId &&
      !allowedActionsWithDifferentId.includes(action)
    ) {
      if (!verifyTelegramId(requestedTelegramId, req.auth.telegramId)) {
        return res.status(403).json({
          success: false,
          error: 'Forbidden: You can only access your own data',
        })
      }
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'add-element':
        return await handleAddElement(req, res)
      case 'history':
        return await handleHistory(req, res)
      case 'update-position':
        return await handleUpdatePosition(req, res)
      case 'view-friend-garden':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ viewerTelegramId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (
          req.query.viewerTelegramId &&
          !verifyTelegramId(req.query.viewerTelegramId, req.auth.telegramId)
        ) {
          return res.status(403).json({
            success: false,
            error: 'Forbidden: Invalid viewer credentials',
          })
        }
        return await handleViewFriendGarden(req, res)
      case 'upgrade-element':
        return await handleUpgradeElement(req, res)
      case 'upgrade-info':
        return await handleUpgradeInfo(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: add-element, history, update-position, view-friend-garden, upgrade-element, upgrade-info`,
        })
    }
  } catch (error) {
    console.error('Garden API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π handler
export default withAuth(protectedHandler)
