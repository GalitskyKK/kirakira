/**
 * üë§ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô API –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –í–∫–ª—é—á–∞–µ—Ç: stats, update-photo
 */

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
async function getSupabaseClient() {
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    throw new Error('Supabase environment variables not configured')
  }

  const { createClient } = await import('@supabase/supabase-js')
  return createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Bot API
 * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<string|null>} URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ null
 */
async function getTelegramUserPhoto(telegramId) {
  const BOT_TOKEN =
    process.env.TELEGRAM_BOT_TOKEN || process.env.VITE_TELEGRAM_BOT_TOKEN

  if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not found')
    return null
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/getUserProfilePhotos?user_id=${telegramId}&limit=1`
    )

    const result = await response.json()

    if (
      !result.ok ||
      !result.result.photos ||
      result.result.photos.length === 0
    ) {
      console.log(`No photos found for user ${telegramId}`)
      return null
    }

    // –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤)
    const photo = result.result.photos[0]
    const largestPhoto = photo[photo.length - 1]

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileResponse = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${largestPhoto.file_id}`
    )

    const fileResult = await fileResponse.json()

    if (!fileResult.ok) {
      console.error('Failed to get file info:', fileResult)
      return null
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const photoUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileResult.result.file_path}`

    return photoUrl
  } catch (error) {
    console.error('Error getting Telegram user photo:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase –ø–æ telegramId
 */
async function getUserDataFromSupabase(telegramId) {
  try {
    const supabase = await getSupabaseClient()

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single()

    if (userError || !userData) {
      console.log(`No user found with telegramId: ${telegramId}`)
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    const { data: moodData } = await supabase
      .from('mood_entries')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('mood_date', { ascending: false })

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞
    const { data: gardenData } = await supabase
      .from('garden_elements')
      .select('*')
      .eq('telegram_id', telegramId)
      .order('unlock_date', { ascending: false })

    return {
      user: userData,
      moods: moodData || [],
      garden: {
        elements: gardenData || [],
      },
    }
  } catch (error) {
    console.error('Error getting user data from Supabase:', error)
    return null
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function computeStatsFromUserData(userData) {
  try {
    const { user, moods = [], garden = {} } = userData
    const gardenElements = garden.elements || []

    // –í—ã—á–∏—Å–ª—è–µ–º streak –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    let currentStreak = 0
    let longestStreak = 0
    let tempStreak = 0

    if (moods.length > 0) {
      const sortedMoods = moods.sort(
        (a, b) => new Date(b.mood_date) - new Date(a.mood_date)
      )

      console.log(
        `üîç STREAK DEBUG: –ê–Ω–∞–ª–∏–∑ ${sortedMoods.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π`
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π streak - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
      const today = new Date()
      today.setUTCHours(0, 0, 0, 0) // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞
      const lastMoodDate = new Date(sortedMoods[0].mood_date)
      lastMoodDate.setUTCHours(0, 0, 0, 0)

      const daysSinceLastMood = Math.floor(
        (today - lastMoodDate) / (1000 * 60 * 60 * 24)
      )
      console.log(
        `üîç STREAK DEBUG: –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å ${lastMoodDate.toISOString().split('T')[0]}, –¥–Ω–µ–π –Ω–∞–∑–∞–¥: ${daysSinceLastMood}`
      )

      // –°—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
      if (daysSinceLastMood <= 1) {
        currentStreak = 1
        console.log(`üîç STREAK DEBUG: –°—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1`)

        // –°—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –Ω–∞–∑–∞–¥
        for (let i = 1; i < sortedMoods.length; i++) {
          const currentMoodDate = new Date(sortedMoods[i - 1].mood_date)
          const prevMoodDate = new Date(sortedMoods[i].mood_date)

          currentMoodDate.setUTCHours(0, 0, 0, 0)
          prevMoodDate.setUTCHours(0, 0, 0, 0)

          const daysDiff = Math.floor(
            (currentMoodDate - prevMoodDate) / (1000 * 60 * 60 * 24)
          )
          console.log(
            `üîç STREAK DEBUG: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ${currentMoodDate.toISOString().split('T')[0]} –∏ ${prevMoodDate.toISOString().split('T')[0]}, —Ä–∞–∑–Ω–∏—Ü–∞: ${daysDiff} –¥–Ω–µ–π`
          )

          if (daysDiff === 1) {
            currentStreak++
            console.log(`üîç STREAK DEBUG: –°—Ç—Ä–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${currentStreak}`)
          } else {
            console.log(
              `üîç STREAK DEBUG: –°—Ç—Ä–∏–∫ –ø—Ä–µ—Ä–≤–∞–Ω, —Ä–∞–∑–Ω–∏—Ü–∞ ${daysDiff} –¥–Ω–µ–π`
            )
            break
          }
        }
      } else {
        console.log(
          `üîç STREAK DEBUG: –°—Ç—Ä–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å ${daysSinceLastMood} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`
        )
        currentStreak = 0
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π streak
      tempStreak = 1
      for (let i = 1; i < sortedMoods.length; i++) {
        const prevDate = new Date(sortedMoods[i - 1].mood_date)
        const currentDate = new Date(sortedMoods[i].mood_date)

        prevDate.setUTCHours(0, 0, 0, 0)
        currentDate.setUTCHours(0, 0, 0, 0)

        const daysDiff = Math.floor(
          (prevDate - currentDate) / (1000 * 60 * 60 * 24)
        )

        if (daysDiff === 1) {
          tempStreak++
        } else {
          longestStreak = Math.max(longestStreak, tempStreak)
          tempStreak = 1
        }
      }
      longestStreak = Math.max(longestStreak, tempStreak)

      console.log(
        `üîç STREAK DEBUG: –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–∏–∫–∏ - —Ç–µ–∫—É—â–∏–π: ${currentStreak}, –ª—É—á—à–∏–π: ${longestStreak}`
      )
    } else {
      console.log(`üîç STREAK DEBUG: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π`)
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    const rarityCount = {}
    gardenElements.forEach(element => {
      rarityCount[element.rarity] = (rarityCount[element.rarity] || 0) + 1
    })

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
    const registrationDate = user.registration_date
      ? new Date(user.registration_date)
      : new Date()

    registrationDate.setUTCHours(0, 0, 0, 0)
    const today = new Date()
    today.setUTCHours(0, 0, 0, 0)

    const daysSinceRegistration =
      Math.floor((today - registrationDate) / (1000 * 60 * 60 * 24)) + 1 // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è

    console.log(
      `üîç DAYS DEBUG: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${registrationDate.toISOString().split('T')[0]}, —Å–µ–≥–æ–¥–Ω—è ${today.toISOString().split('T')[0]}, –¥–Ω–µ–π: ${daysSinceRegistration}`
    )

    return {
      hasData: true,
      totalDays: daysSinceRegistration, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      currentStreak,
      longestStreak,
      totalElements: gardenElements.length,
      rareElementsFound:
        (rarityCount.rare || 0) +
        (rarityCount.epic || 0) +
        (rarityCount.legendary || 0),
      gardensShared: user.gardens_shared || 0,
      firstVisit: registrationDate,
      lastVisit: user.last_visit_date
        ? new Date(user.last_visit_date)
        : new Date(),
      moodBreakdown: {
        joy: moods.filter(m => m.mood === 'joy').length,
        calm: moods.filter(m => m.mood === 'calm').length,
        stress: moods.filter(m => m.mood === 'stress').length,
        sadness: moods.filter(m => m.mood === 'sadness').length,
        anger: moods.filter(m => m.mood === 'anger').length,
        anxiety: moods.filter(m => m.mood === 'anxiety').length,
      },
      gardenBreakdown: rarityCount,
    }
  } catch (error) {
    console.error('Error computing stats:', error)
    return {
      hasData: false,
      totalDays: 0,
      currentStreak: 0,
      longestStreak: 0,
      totalElements: 0,
      rareElementsFound: 0,
      gardensShared: 0,
      firstVisit: new Date(),
      lastVisit: new Date(),
    }
  }
}

// ===============================================
// üìä ACTION: STATS - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ===============================================
async function handleStats(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, userData } = req.query

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    console.log(`Computing REAL stats for Telegram user: ${telegramId}`)

    let userDataParsed = null

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (userData) {
      try {
        userDataParsed = JSON.parse(userData)
        console.log(`Using provided user data for ${telegramId}`)
      } catch (parseError) {
        console.warn(
          'Failed to parse provided userData, fetching from database'
        )
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (!userDataParsed) {
      console.log(`Getting real user data by telegramId: ${telegramId}`)
      userDataParsed = await getUserDataFromSupabase(telegramId)
    }

    let stats
    if (userDataParsed) {
      console.log(`‚úÖ Found real data for user ${telegramId}`)
      stats = computeStatsFromUserData(userDataParsed)
    } else {
      console.log(
        `üìù No data found for user ${telegramId} - returning new user stats`
      )
      stats = {
        hasData: false,
        totalDays: 0,
        currentStreak: 0,
        longestStreak: 0,
        totalElements: 0,
        rareElementsFound: 0,
        gardensShared: 0,
        firstVisit: new Date(),
        lastVisit: new Date(),
      }
    }

    res.status(200).json({
      success: true,
      data: stats,
    })
  } catch (error) {
    console.error('User stats error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üì∏ ACTION: UPDATE-PHOTO - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ===============================================
async function handleUpdatePhoto(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { telegramId, forceUpdate = false } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: telegramId',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —É–∂–µ —Ñ–æ—Ç–æ
    const supabase = await getSupabaseClient()
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('telegram_id, photo_url, updated_at')
      .eq('telegram_id', telegramId)
      .single()

    if (userError) {
      return res.status(404).json({
        success: false,
        error: 'User not found',
      })
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å –∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    if (userData.photo_url && !forceUpdate) {
      const lastUpdate = new Date(userData.updated_at)
      const now = new Date()
      const daysSinceUpdate = (now - lastUpdate) / (1000 * 60 * 60 * 24)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
      if (daysSinceUpdate < 1) {
        return res.status(200).json({
          success: true,
          data: {
            photoUrl: userData.photo_url,
            message: 'Photo is up to date',
          },
        })
      }
    }

    console.log(`üîç Fetching photo for user ${telegramId}...`)

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
    const photoUrl = await getTelegramUserPhoto(telegramId)

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error: updateError } = await supabase
      .from('users')
      .update({ photo_url: photoUrl })
      .eq('telegram_id', telegramId)

    if (updateError) {
      console.error('Failed to update user photo:', updateError)
      return res.status(500).json({
        success: false,
        error: 'Failed to update photo in database',
      })
    }

    console.log(
      `‚úÖ Photo updated for user ${telegramId}: ${photoUrl ? 'Found' : 'Not found'}`
    )

    res.status(200).json({
      success: true,
      data: {
        photoUrl,
        message: photoUrl
          ? 'Photo updated successfully'
          : 'No photo found, cleared from database',
      },
    })
  } catch (error) {
    console.error('Update photo error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}

// ===============================================
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
// ===============================================
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')

  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { action } = req.query

    if (!action) {
      return res.status(400).json({
        success: false,
        error: 'Missing required parameter: action',
      })
    }

    // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    switch (action) {
      case 'stats':
        return await handleStats(req, res)
      case 'update-photo':
        return await handleUpdatePhoto(req, res)
      default:
        return res.status(400).json({
          success: false,
          error: `Unknown action: ${action}. Available actions: stats, update-photo`,
        })
    }
  } catch (error) {
    console.error('User API error:', error)
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    })
  }
}
