import { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import { useUserStore, useGardenStore, useMoodStore } from '@/stores'
import { useProfile } from '@/hooks/useProfile'
import { ProfileHeader } from '@/components/profile/ProfileHeader'
import { ProfileStats } from '@/components/profile/ProfileStats'
import { ProfileAchievements } from '@/components/profile/ProfileAchievements'
import { ProfilePrivacySettings } from '@/components/profile/ProfilePrivacySettings'
import { LoadingSpinner } from '@/components/ui'

interface ProfileData {
  user: {
    user_id?: string
    telegram_id?: number
    username?: string
    first_name?: string
    last_name?: string
    photo_url?: string
    registration_date?: string
    current_streak?: number
    longest_streak?: number
    total_days?: number
    rare_elements_found?: number
    gardens_shared?: number
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è experience –∏ level
    experience?: number
    level?: number
    privacy_settings?: {
      showProfile?: boolean
      shareGarden?: boolean
      shareAchievements?: boolean
      allowFriendRequests?: boolean
      cloudSync?: boolean
    }
  }
  stats?: {
    totalMoodEntries?: number
    currentStreak?: number
    longestStreak?: number
    totalElements?: number
    rareElementsFound?: number
    totalDays?: number
    gardensShared?: number
    experience?: number
    level?: number
  }
  achievements?: Array<{
    achievement_id: string
    is_unlocked: boolean
    progress: number
    unlocked_at: string | null
    achievements: {
      name: string
      emoji: string
      rarity: string
      category: string
      description: string
    }
  }>
}

export function ProfilePage() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—É–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const { currentUser, isLoading: userLoading } = useUserStore()
  const { currentGarden, getElementsCount } = useGardenStore()
  const { getMoodStats } = useMoodStore()
  const {
    isLoading: profileLoading,
    error: profileError,
    loadProfile,
  } = useProfile()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
  const [_profileData, setProfileData] = useState<ProfileData | null>(null)
  const [loadingProfile, setLoadingProfile] = useState(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadData = async () => {
      if (currentUser?.telegramId && loadProfile) {
        setLoadingProfile(true)
        try {
          const data = await loadProfile()
          if (data) {
            setProfileData(data as ProfileData)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
        } finally {
          setLoadingProfile(false)
        }
      }
    }

    void loadData()
  }, [currentUser?.telegramId, loadProfile])

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (userLoading || profileLoading || loadingProfile) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!currentUser) {
    return (
      <div className="p-6">
        <div className="rounded-xl border border-gray-200 bg-gray-50 p-6 text-center dark:border-gray-700 dark:bg-gray-800">
          <div className="mb-4 text-6xl">üòî</div>
          <h2 className="mb-2 text-xl font-bold text-gray-900 dark:text-gray-100">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          </h2>
          <p className="text-gray-600 dark:text-gray-400">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
          </p>
        </div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
  if (profileError) {
    return (
      <div className="p-6">
        <div className="rounded-xl border border-red-200 bg-red-50 p-6 text-center dark:border-red-800 dark:bg-red-900/30">
          <div className="mb-4 text-6xl">üå∏</div>
          <h2 className="mb-2 text-xl font-bold text-red-900 dark:text-red-200">
            –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
          </h2>
          <p className="text-red-700 dark:text-red-300">
            –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã –±—ã—Å—Ç—Ä–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º
          </p>
          <p className="mt-2 text-sm text-red-600 dark:text-red-400">
            {String(profileError)}
          </p>
        </div>
      </div>
    )
  }

  // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined
  const moodStats = getMoodStats
    ? getMoodStats()
    : {
        totalEntries: 0,
        currentStreak: 0,
        longestStreak: 0,
        mostFrequentMood: null,
        averageIntensity: 0,
        moodDistribution: {
          joy: 0,
          calm: 0,
          stress: 0,
          sadness: 0,
          anger: 0,
          anxiety: 0,
        },
        weeklyTrend: [],
        monthlyTrend: [],
      }

  const totalElements = getElementsCount ? getElementsCount() : 0

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ—Ä–∞
  const apiUser = _profileData?.user
  const renderUser = {
    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ API
    id: apiUser?.user_id ?? currentUser?.id ?? '',
    telegramId: apiUser?.telegram_id ?? currentUser?.telegramId ?? 0,
    firstName: apiUser?.first_name ?? currentUser?.firstName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    lastName: apiUser?.last_name ?? currentUser?.lastName ?? '',
    username: apiUser?.username ?? currentUser?.username ?? '',
    photoUrl: apiUser?.photo_url ?? currentUser?.photoUrl ?? '',
    registrationDate: apiUser?.registration_date
      ? new Date(apiUser.registration_date)
      : (currentUser?.registrationDate ?? new Date()),
    isAnonymous: currentUser?.isAnonymous ?? false,

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è experience –∏ level –∏–∑ API –∏–ª–∏ currentUser (—Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    experience: (apiUser?.experience ?? currentUser?.experience ?? 0) as number,
    level: (apiUser?.level ?? currentUser?.level ?? 1) as number,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ API –∏–ª–∏ fallback
    stats: {
      currentStreak: apiUser?.current_streak ?? 0,
      longestStreak: apiUser?.longest_streak ?? 0,
      totalDays: apiUser?.total_days ?? 0,
      rareElementsFound: apiUser?.rare_elements_found ?? 0,
      gardensShared: apiUser?.gardens_shared ?? 0,
      totalElements: totalElements,
      firstVisit: currentUser?.stats?.firstVisit ?? new Date(),
      lastVisit: currentUser?.stats?.lastVisit ?? new Date(),
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API –∏–ª–∏ fallback
    preferences: {
      privacy: {
        showProfile: apiUser?.privacy_settings?.showProfile ?? true,
        shareGarden: apiUser?.privacy_settings?.shareGarden ?? true,
        shareAchievements: apiUser?.privacy_settings?.shareAchievements ?? true,
        allowFriendRequests:
          apiUser?.privacy_settings?.allowFriendRequests ?? true,
        cloudSync: apiUser?.privacy_settings?.cloudSync ?? false,
        dataCollection:
          currentUser?.preferences?.privacy?.dataCollection ?? false,
        analytics: currentUser?.preferences?.privacy?.analytics ?? false,
      },
      theme: currentUser?.preferences?.theme ?? 'auto',
      language: currentUser?.preferences?.language ?? 'ru',
      notifications: currentUser?.preferences?.notifications ?? true,
      garden: currentUser?.preferences?.garden ?? {},
    },
  }

  return (
    <motion.div
      className="space-y-6 p-4 pb-8"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è */}
      <ProfileHeader user={renderUser} />

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <ProfileStats
        user={renderUser}
        garden={currentGarden}
        moodStats={moodStats}
        totalElements={totalElements}
      />

      {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      <ProfileAchievements
        user={renderUser}
        moodStats={moodStats}
        totalElements={totalElements}
      />

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ */}
      <ProfilePrivacySettings user={renderUser} />
    </motion.div>
  )
}
