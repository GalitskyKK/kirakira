import { useState, useCallback } from 'react'
import { motion } from 'framer-motion'
import { TelegramLoginWidget } from './TelegramLoginWidget'
import { useTelegram } from '@/hooks'
import { useUserStore } from '@/stores'
import { Card } from '@/components/ui'

interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  photo_url?: string
  auth_date: number
  hash: string
}

interface TelegramAuthProps {
  onSuccess?: (() => void) | undefined
  onError?: ((error: string) => void) | undefined
}

export function TelegramAuth({ onSuccess, onError }: TelegramAuthProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [authError, setAuthError] = useState<string | null>(null)

  const { isTelegramEnv, user: telegramUser } = useTelegram()
  const { createTelegramUser, updateLastVisit } = useUserStore()

  const handleTelegramAuth = useCallback(
    async (telegramData: TelegramUser) => {
      setIsLoading(true)
      setAuthError(null)

      try {
        console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram:', telegramData)

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Telegram
        const user = await createTelegramUser({
          telegramId: telegramData.id,
          firstName: telegramData.first_name,
          lastName: telegramData.last_name,
          username: telegramData.username,
          photoUrl: telegramData.photo_url,
          authDate: new Date(telegramData.auth_date * 1000),
          hash: telegramData.hash,
        })

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user)

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
        updateLastVisit()

        onSuccess?.()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
        const errorMessage =
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        setAuthError(errorMessage)
        onError?.(errorMessage)
      } finally {
        setIsLoading(false)
      }
    },
    [createTelegramUser, updateLastVisit, onSuccess, onError]
  )

  const handleAuthError = useCallback(
    (error: string) => {
      console.error('–û—à–∏–±–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ Telegram:', error)
      setAuthError(error)
      onError?.(error)
    },
    [onError]
  )

  // –ï—Å–ª–∏ —É–∂–µ –≤ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (isTelegramEnv && telegramUser) {
    return (
      <Card className="p-6 text-center">
        <div className="mb-4 text-6xl">üéâ</div>
        <h2 className="mb-2 text-xl font-bold text-gray-800">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegramUser.firstName}!
        </h2>
        <p className="mb-4 text-gray-600">
          –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Telegram Mini App
        </p>
        <motion.button
          onClick={onSuccess}
          className="rounded-lg bg-blue-500 px-6 py-3 text-white transition-colors hover:bg-blue-600"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </motion.button>
      </Card>
    )
  }

  return (
    <div className="mx-auto max-w-md">
      <Card className="p-8">
        <div className="mb-6 text-center">
          <div className="mb-4 text-6xl">üîê</div>
          <h1 className="mb-2 text-2xl font-bold text-gray-800">
            –í—Ö–æ–¥ –≤ KiraKira
          </h1>
          <p className="text-gray-600">
            –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥
            –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
          </p>
        </div>

        {authError && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-4 rounded-lg bg-red-50 p-4 text-center text-red-700"
          >
            ‚ùå {authError}
          </motion.div>
        )}

        {isLoading ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="py-8 text-center"
          >
            <div className="mb-4 text-4xl">‚è≥</div>
            <p className="text-gray-600">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...</p>
          </motion.div>
        ) : (
          <div className="space-y-6">
            <div className="rounded-lg bg-blue-50 p-4">
              <h3 className="mb-2 font-semibold text-blue-800">
                ‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram:
              </h3>
              <ul className="space-y-1 text-sm text-blue-700">
                <li>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</li>
                <li>‚òÅÔ∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ</li>
                <li>üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º</li>
                <li>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</li>
              </ul>
            </div>

            <div className="text-center">
              <TelegramLoginWidget
                botName="KiraKiraGardenBot"
                onAuth={handleTelegramAuth}
                onError={handleAuthError}
                buttonSize="large"
                cornerRadius={12}
                requestAccess={true}
                lang="ru"
              />
            </div>

            <div className="text-center">
              <motion.button
                onClick={onSuccess}
                className="text-sm text-gray-500 underline hover:text-gray-700"
                whileHover={{ scale: 1.05 }}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </motion.button>
            </div>
          </div>
        )}
      </Card>
    </div>
  )
}
