/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */

import { useMemo } from 'react'
import { motion } from 'framer-motion'
import { Crown, Trophy, Medal, User, TrendingUp } from 'lucide-react'
import { Card } from '@/components/ui'
import type { ChallengeLeaderboardEntry, Challenge } from '@/types/challenges'

interface ChallengeLeaderboardProps {
  readonly challenge: Challenge
  readonly leaderboard: readonly ChallengeLeaderboardEntry[]
  readonly currentUserTelegramId: number
  readonly isLoading?: boolean
}

export function ChallengeLeaderboard({
  challenge,
  leaderboard,
  currentUserTelegramId,
  isLoading = false,
}: ChallengeLeaderboardProps) {
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const leaderboardData = useMemo(() => {
    if (!leaderboard.length)
      return { top3: [], others: [], currentUserEntry: null }

    const sortedLeaderboard = [...leaderboard].sort((a, b) => a.rank - b.rank)
    const top3 = sortedLeaderboard.slice(0, 3)
    const others = sortedLeaderboard.slice(3)
    const currentUserEntry =
      sortedLeaderboard.find(
        entry => entry.user.telegramId === currentUserTelegramId
      ) || null

    return { top3, others, currentUserEntry }
  }, [leaderboard, currentUserTelegramId])

  const { top3, others, currentUserEntry } = leaderboardData

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–µ—Å—Ç–∞
  const getRankIcon = (rank: number) => {
    switch (rank) {
      case 1:
        return <Crown className="h-5 w-5 text-yellow-500" />
      case 2:
        return <Trophy className="h-5 w-5 text-gray-400" />
      case 3:
        return <Medal className="h-5 w-5 text-amber-600" />
      default:
        return (
          <span className="text-sm font-medium text-gray-500">#{rank}</span>
        )
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –º–µ—Å—Ç–∞
  const getRankBgColor = (rank: number) => {
    switch (rank) {
      case 1:
        return 'bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20'
      case 2:
        return 'bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800/20 dark:to-gray-700/20'
      case 3:
        return 'bg-gradient-to-r from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-800/20'
      default:
        return 'bg-white dark:bg-gray-800'
    }
  }

  if (isLoading) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <div className="h-6 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
          {[...Array(5)].map((_, i) => (
            <div key={i} className="flex items-center space-x-3">
              <div className="h-10 w-10 animate-pulse rounded-full bg-gray-200 dark:bg-gray-700" />
              <div className="flex-1 space-y-2">
                <div className="h-4 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
                <div className="h-3 w-2/3 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
              </div>
              <div className="h-8 w-16 animate-pulse rounded bg-gray-200 dark:bg-gray-700" />
            </div>
          ))}
        </div>
      </Card>
    )
  }

  if (!leaderboard.length) {
    return (
      <Card className="p-6 text-center">
        <div className="flex flex-col items-center space-y-3">
          <TrendingUp className="h-12 w-12 text-gray-400" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
            –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </h3>
          <p className="text-gray-600 dark:text-gray-400">
            –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É!
          </p>
        </div>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
          üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥
        </h3>
        <div className="text-right">
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {leaderboard.length} —É—á–∞—Å—Ç–Ω–∏–∫
            {leaderboard.length === 1
              ? ''
              : leaderboard.length < 5
                ? '–∞'
                : '–æ–≤'}
          </span>
          {challenge.type === 'cooperative' &&
            leaderboard.length > 0 &&
            leaderboard[0]?.teamProgress !== undefined && (
              <div className="text-xs text-gray-400 dark:text-gray-500">
                –ö–æ–º–∞–Ω–¥–∞: {leaderboard[0].teamProgress} /{' '}
                {challenge.requirements.targetValue}
              </div>
            )}
        </div>
      </div>

      {/* –¢–æ–ø 3 */}
      {top3.length > 0 && (
        <Card className="p-4">
          <h4 className="mb-3 text-sm font-medium text-gray-700 dark:text-gray-300">
            üåü –¢–æ–ø 3
          </h4>
          <div className="space-y-3">
            {top3.map((entry, index) => (
              <motion.div
                key={entry.user.telegramId}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className={`
                  flex items-center space-x-4 rounded-lg p-3
                  ${getRankBgColor(entry.rank)}
                  ${entry.isCurrentUser ? 'ring-2 ring-garden-500 ring-opacity-50' : ''}
                `}
              >
                {/* –ú–µ—Å—Ç–æ */}
                <div className="flex h-8 w-8 flex-shrink-0 items-center justify-center">
                  {getRankIcon(entry.rank)}
                </div>

                {/* –ê–≤–∞—Ç–∞—Ä */}
                <div className="flex-shrink-0">
                  {entry.user.photoUrl ? (
                    <img
                      src={entry.user.photoUrl}
                      alt={entry.user.firstName}
                      className="h-10 w-10 rounded-full object-cover"
                    />
                  ) : (
                    <div className="flex h-10 w-10 items-center justify-center rounded-full bg-garden-100 dark:bg-garden-800">
                      <User className="h-5 w-5 text-garden-600 dark:text-garden-400" />
                    </div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="min-w-0 flex-1">
                  <div className="flex items-center space-x-2">
                    <p className="truncate text-sm font-medium text-gray-900 dark:text-gray-100">
                      {entry.user.firstName}
                      {entry.user.lastName && ` ${entry.user.lastName}`}
                    </p>
                    {entry.isCurrentUser && (
                      <span className="rounded-full bg-garden-100 px-2 py-1 text-xs text-garden-800 dark:bg-garden-800 dark:text-garden-200">
                        –í—ã
                      </span>
                    )}
                  </div>
                  {entry.user.username && (
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      @{entry.user.username}
                    </p>
                  )}
                </div>

                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                <div className="flex-shrink-0 text-right">
                  <div className="text-lg font-bold text-gray-900 dark:text-gray-100">
                    {entry.progress}
                  </div>
                  <div className="text-xs text-gray-500 dark:text-gray-400">
                    {challenge.type === 'cooperative' &&
                    entry.personalContributionPercentage !== undefined
                      ? `${Math.round(entry.personalContributionPercentage)}% –≤ –∫–æ–º–∞–Ω–¥–µ`
                      : `${Math.round(entry.progressPercentage)}%`}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </Card>
      )}

      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ */}
      {others.length > 0 && (
        <Card className="p-4">
          <h4 className="mb-3 text-sm font-medium text-gray-700 dark:text-gray-300">
            üìã –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
          </h4>
          <div className="space-y-2">
            {others.map((entry, index) => (
              <motion.div
                key={entry.user.telegramId}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: (index + 3) * 0.05 }}
                className={`
                  flex items-center space-x-3 rounded-lg p-2 transition-colors hover:bg-gray-50 dark:hover:bg-gray-700
                  ${entry.isCurrentUser ? 'bg-garden-50 ring-1 ring-garden-200 dark:bg-garden-900/20 dark:ring-garden-700' : ''}
                `}
              >
                {/* –ú–µ—Å—Ç–æ */}
                <div className="w-8 flex-shrink-0 text-center">
                  <span className="text-sm font-medium text-gray-500 dark:text-gray-400">
                    #{entry.rank}
                  </span>
                </div>

                {/* –ê–≤–∞—Ç–∞—Ä */}
                <div className="flex-shrink-0">
                  {entry.user.photoUrl ? (
                    <img
                      src={entry.user.photoUrl}
                      alt={entry.user.firstName}
                      className="h-8 w-8 rounded-full object-cover"
                    />
                  ) : (
                    <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700">
                      <User className="h-4 w-4 text-gray-500" />
                    </div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="min-w-0 flex-1">
                  <div className="flex items-center space-x-2">
                    <p className="truncate text-sm text-gray-900 dark:text-gray-100">
                      {entry.user.firstName}
                      {entry.user.lastName &&
                        ` ${entry.user.lastName.charAt(0)}.`}
                    </p>
                    {entry.isCurrentUser && (
                      <span className="rounded bg-garden-100 px-1.5 py-0.5 text-xs text-garden-800 dark:bg-garden-800 dark:text-garden-200">
                        –í—ã
                      </span>
                    )}
                  </div>
                </div>

                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                <div className="flex-shrink-0 text-right">
                  <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                    {entry.progress}
                  </div>
                  <div className="text-xs text-gray-500 dark:text-gray-400">
                    {challenge.type === 'cooperative' &&
                    entry.personalContributionPercentage !== undefined
                      ? `${Math.round(entry.personalContributionPercentage)}% –≤ –∫–æ–º–∞–Ω–¥–µ`
                      : `${Math.round(entry.progressPercentage)}%`}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </Card>
      )}

      {/* –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –≤ —Ç–æ–ø–µ) */}
      {currentUserEntry && currentUserEntry.rank > 3 && (
        <Card className="border-garden-200 bg-garden-50 p-4 dark:border-garden-700 dark:bg-garden-900/20">
          <h4 className="mb-2 text-sm font-medium text-garden-700 dark:text-garden-300">
            üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è
          </h4>
          <div className="flex items-center space-x-3">
            <div className="w-8 flex-shrink-0 text-center">
              <span className="text-lg font-bold text-garden-600 dark:text-garden-400">
                #{currentUserEntry.rank}
              </span>
            </div>
            <div className="flex-1">
              <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                {currentUserEntry.user.firstName}
              </p>
            </div>
            <div className="text-right">
              <div className="text-lg font-bold text-garden-600 dark:text-garden-400">
                {currentUserEntry.progress}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400">
                {challenge.type === 'cooperative' &&
                currentUserEntry.personalContributionPercentage !== undefined
                  ? `${Math.round(currentUserEntry.personalContributionPercentage)}% –≤ –∫–æ–º–∞–Ω–¥–µ`
                  : `${Math.round(currentUserEntry.progressPercentage)}%`}
              </div>
            </div>
          </div>
        </Card>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ */}
      {challenge.rewards && (
        <Card className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 dark:from-purple-900/20 dark:to-pink-900/20">
          <h4 className="mb-2 text-sm font-medium text-purple-700 dark:text-purple-300">
            üéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É
          </h4>
          <div className="space-y-1 text-sm text-gray-700 dark:text-gray-300">
            {challenge.rewards.experience && (
              <p>‚ö° +{challenge.rewards.experience} –æ–ø—ã—Ç–∞</p>
            )}
            {challenge.rewards.title && (
              <p>üèÖ –¢–∏—Ç—É–ª: "{challenge.rewards.title}"</p>
            )}
            {challenge.rewards.specialElements &&
              challenge.rewards.specialElements.length > 0 && (
                <p>üå∏ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞</p>
              )}
          </div>
        </Card>
      )}
    </div>
  )
}
