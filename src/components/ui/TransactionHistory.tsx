/**
 * üìú –ö–û–ú–ü–û–ù–ï–ù–¢: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–∞–ª—é—Ç—ã
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç—Ä–∞—Ç –≤–∞–ª—é—Ç—ã
 */

import { motion } from 'framer-motion'
import { useEffect, useState } from 'react'
import { useCurrencyStore } from '@/stores/currencyStore'
import type { CurrencyTransaction } from '@/types/currency'
import { SingleCurrencyDisplay } from './CurrencyDisplay'
import { ArrowUp, ArrowDown, Clock, Filter } from 'lucide-react'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'

interface TransactionHistoryProps {
  readonly telegramId: number
  readonly limit?: number
  readonly showFilters?: boolean
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export function TransactionHistory({
  telegramId,
  limit = 50,
  showFilters = true,
}: TransactionHistoryProps): JSX.Element {
  const { recentTransactions, loadTransactions, isLoading } = useCurrencyStore()
  const [filter, setFilter] = useState<'all' | 'earn' | 'spend'>('all')
  const [currencyFilter, setCurrencyFilter] = useState<
    'all' | 'sprouts' | 'gems'
  >('all')

  useEffect(() => {
    void loadTransactions(telegramId, limit)
  }, [telegramId, limit, loadTransactions])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const filteredTransactions = recentTransactions.filter(tx => {
    if (filter !== 'all' && tx.transactionType !== filter) return false
    if (currencyFilter !== 'all' && tx.currencyType !== currencyFilter)
      return false
    return true
  })

  if (isLoading) {
    return (
      <div className="space-y-2">
        {Array.from({ length: 5 }, (_, i) => (
          <div
            key={i}
            className="h-16 animate-pulse rounded-lg bg-gray-200 dark:bg-gray-700"
          />
        ))}
      </div>
    )
  }

  if (recentTransactions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <Clock size={48} className="mb-4 text-gray-300 dark:text-gray-600" />
        <p className="text-gray-500 dark:text-gray-400">
          –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞
        </p>
        <p className="text-sm text-gray-400 dark:text-gray-500">
          –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞–ª—é—Ç—É!
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      {showFilters && (
        <div className="flex flex-wrap items-center gap-2">
          <Filter size={16} className="text-gray-500" />

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
          <div className="flex rounded-lg bg-gray-100 p-1 dark:bg-gray-800">
            <FilterButton
              active={filter === 'all'}
              onClick={() => setFilter('all')}
            >
              –í—Å–µ
            </FilterButton>
            <FilterButton
              active={filter === 'earn'}
              onClick={() => setFilter('earn')}
            >
              –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
            </FilterButton>
            <FilterButton
              active={filter === 'spend'}
              onClick={() => setFilter('spend')}
            >
              –ü–æ—Ç—Ä–∞—á–µ–Ω–æ
            </FilterButton>
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–ª—é—Ç–µ */}
          <div className="flex rounded-lg bg-gray-100 p-1 dark:bg-gray-800">
            <FilterButton
              active={currencyFilter === 'all'}
              onClick={() => setCurrencyFilter('all')}
            >
              –í—Å–µ
            </FilterButton>
            <FilterButton
              active={currencyFilter === 'sprouts'}
              onClick={() => setCurrencyFilter('sprouts')}
            >
              –†–æ—Å—Ç–∫–∏
            </FilterButton>
            <FilterButton
              active={currencyFilter === 'gems'}
              onClick={() => setCurrencyFilter('gems')}
            >
              –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
            </FilterButton>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
      <div className="space-y-2">
        {filteredTransactions.length === 0 ? (
          <p className="py-8 text-center text-gray-500 dark:text-gray-400">
            –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
          </p>
        ) : (
          filteredTransactions.map((tx, index) => (
            <TransactionItem key={tx.id} transaction={tx} index={index} />
          ))
        )}
      </div>
    </div>
  )
}

/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
interface TransactionItemProps {
  readonly transaction: CurrencyTransaction
  readonly index: number
}

function TransactionItem({
  transaction,
  index,
}: TransactionItemProps): JSX.Element {
  const isEarn = transaction.transactionType === 'earn'
  const Icon = isEarn ? ArrowUp : ArrowDown
  const iconColor = isEarn
    ? 'text-green-500 bg-green-100 dark:bg-green-900/20'
    : 'text-red-500 bg-red-100 dark:bg-red-900/20'

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.05 }}
      className="flex items-center justify-between rounded-lg bg-white p-4 shadow-sm dark:bg-gray-800"
    >
      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –∏–∫–æ–Ω–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
      <div className="flex items-center gap-3">
        <div className={`rounded-full p-2 ${iconColor}`}>
          <Icon size={16} />
        </div>

        <div className="flex flex-col">
          <span className="text-sm font-medium text-gray-800 dark:text-gray-100">
            {transaction.description ||
              formatReason(transaction.reason as string)}
          </span>
          <span className="text-xs text-gray-500 dark:text-gray-400">
            {format(new Date(transaction.createdAt), 'dd MMM yyyy, HH:mm', {
              locale: ru,
            })}
          </span>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —Å—É–º–º–∞ */}
      <div className="flex flex-col items-end gap-1">
        <div className="flex items-center gap-1">
          <span
            className={`text-sm font-bold ${
              isEarn
                ? 'text-green-600 dark:text-green-400'
                : 'text-red-600 dark:text-red-400'
            }`}
          >
            {isEarn ? '+' : '-'}
            {transaction.amount.toLocaleString()}
          </span>
          <SingleCurrencyDisplay
            amount={0}
            type={transaction.currencyType as 'sprouts' | 'gems'}
            size="sm"
            showAnimation={false}
          />
        </div>

        {/* –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
        <span className="text-xs text-gray-400 dark:text-gray-500">
          –ë–∞–ª–∞–Ω—Å: {transaction.balanceAfter.toLocaleString()}
        </span>
      </div>
    </motion.div>
  )
}

/**
 * –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
 */
interface FilterButtonProps {
  readonly active: boolean
  readonly onClick: () => void
  readonly children: React.ReactNode
}

function FilterButton({
  active,
  onClick,
  children,
}: FilterButtonProps): JSX.Element {
  return (
    <button
      onClick={onClick}
      className={`rounded-md px-3 py-1 text-xs font-medium transition-colors ${
        active
          ? 'bg-white text-gray-900 shadow-sm dark:bg-gray-700 dark:text-white'
          : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white'
      }`}
    >
      {children}
    </button>
  )
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatReason(reason: string): string {
  const reasonMap: Record<string, string> = {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    daily_mood: '–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    daily_login: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
    first_mood_of_day: '–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ –¥–µ–Ω—å',

    // –°—Ç—Ä–∏–∫–∏
    streak_3_days: '–°—Ç—Ä–∏–∫ 3 –¥–Ω—è',
    streak_7_days: '–°—Ç—Ä–∏–∫ 7 –¥–Ω–µ–π',
    streak_14_days: '–°—Ç—Ä–∏–∫ 14 –¥–Ω–µ–π',
    streak_30_days: '–°—Ç—Ä–∏–∫ 30 –¥–Ω–µ–π',
    streak_100_days: '–°—Ç—Ä–∏–∫ 100 –¥–Ω–µ–π',
    streak_365_days: '–°—Ç—Ä–∏–∫ –≥–æ–¥!',

    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è
    level_up: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è',
    achievement_unlock: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
    rare_achievement: '–†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',

    // –≠–ª–µ–º–µ–Ω—Ç—ã
    element_common: '–û–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
    element_uncommon: '–ù–µ–æ–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
    element_rare: '–†–µ–¥–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç',
    element_epic: '–≠–ø–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç',
    element_legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',

    // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ
    friend_visit_garden: '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–∞–¥–∞',
    visit_friend_garden: '–ü–æ—Å–µ—Ç–∏–ª –¥—Ä—É–≥–∞',
    like_friend_garden: '–õ–∞–π–∫ —Å–∞–¥—É',
    receive_like: '–ü–æ–ª—É—á–µ–Ω –ª–∞–π–∫',
    share_garden: '–ü–æ–¥–µ–ª–∏–ª—Å—è —Å–∞–¥–æ–º',

    // –ß–µ–ª–ª–µ–Ω–¥–∂–∏
    complete_daily_quest: '–î–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
    complete_weekly_challenge: '–ù–µ–¥–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',
    complete_monthly_challenge: '–ú–µ—Å—è—á–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',

    // –ü–æ–∫—É–ø–∫–∏
    extra_room: '–ü–æ–∫—É–ø–∫–∞ –∫–æ–º–Ω–∞—Ç—ã',
    upgrade_to_rare: '–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ Rare',
    upgrade_to_epic: '–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ Epic',
    upgrade_to_legendary: '–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ Legendary',
  }

  return reasonMap[reason] || reason
}

/**
 * –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
 */
interface CompactTransactionHistoryProps {
  readonly telegramId: number
  readonly onSeeAll?: () => void
}

export function CompactTransactionHistory({
  telegramId,
  onSeeAll,
}: CompactTransactionHistoryProps): JSX.Element {
  const { recentTransactions, loadTransactions, isLoading } = useCurrencyStore()

  useEffect(() => {
    void loadTransactions(telegramId, 5)
  }, [telegramId, loadTransactions])

  if (isLoading) {
    return (
      <div className="space-y-2">
        {Array.from({ length: 3 }, (_, i) => (
          <div
            key={i}
            className="h-12 animate-pulse rounded-lg bg-gray-200 dark:bg-gray-700"
          />
        ))}
      </div>
    )
  }

  return (
    <div className="space-y-2">
      {recentTransactions.slice(0, 5).map((tx, index) => (
        <TransactionItem key={tx.id} transaction={tx} index={index} />
      ))}

      {recentTransactions.length > 5 && onSeeAll && (
        <button
          onClick={onSeeAll}
          className="w-full rounded-lg border-2 border-dashed border-gray-300 py-2 text-sm font-medium text-gray-600 transition-colors hover:border-gray-400 hover:text-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:border-gray-500 dark:hover:text-gray-300"
        >
          –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        </button>
      )}
    </div>
  )
}
