import { motion } from 'framer-motion'
import {
  FlowerSVG,
  TreeSVG,
  CrystalSVG,
  MushroomSVG,
  StoneSVG,
  GrassSVG,
  WaterSVG,
  DecorationSVG,
  RainbowFlowerSVG,
  GlowingCrystalSVG,
  MysticMushroomSVG,
  StarlightDecorationSVG,
} from '../garden/plants'
import { ElementType, RarityLevel, SeasonalVariant, MOOD_CONFIG } from '@/types'
import { Card } from '@/components/ui/Card'
import {
  ELEMENT_TEMPLATES,
  PREMIUM_ELEMENT_TYPES,
} from '@/utils/elementGeneration'
import {
  getElementName,
  getElementDescription,
  getElementEmoji,
  getElementColor,
} from '@/utils/elementNames'
import type { MoodType } from '@/types'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ dev —Ä–µ–∂–∏–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
if (!import.meta.env.DEV) {
  throw new Error('ElementShowcase –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
}

// –ú–∞–ø–ø–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ!
const getElementComponent = (elementType: ElementType) => {
  switch (elementType) {
    case ElementType.FLOWER:
      return FlowerSVG
    case ElementType.RAINBOW_FLOWER:
      return RainbowFlowerSVG
    case ElementType.TREE:
      return TreeSVG
    case ElementType.AURORA_TREE:
      return TreeSVG // –ò—Å–ø–æ–ª—å–∑—É–µ–º TreeSVG —Å –æ—Å–æ–±—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    case ElementType.CRYSTAL:
      return CrystalSVG
    case ElementType.GLOWING_CRYSTAL:
      return GlowingCrystalSVG
    case ElementType.MUSHROOM:
      return MushroomSVG
    case ElementType.MYSTIC_MUSHROOM:
      return MysticMushroomSVG
    case ElementType.STONE:
      return StoneSVG
    case ElementType.GRASS:
      return GrassSVG
    case ElementType.WATER:
      return WaterSVG
    case ElementType.DECORATION:
      return DecorationSVG
    case ElementType.STARLIGHT_DECORATION:
      return StarlightDecorationSVG
    default:
      return FlowerSVG
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–∑ MOOD_CONFIG
const MOOD_MAPPING: Record<ElementType, string[]> = {} as Record<
  ElementType,
  string[]
>

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
Object.values(ElementType).forEach(elementType => {
  MOOD_MAPPING[elementType] = []
})

// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ MOOD_CONFIG
Object.entries(MOOD_CONFIG).forEach(([, moodConfig]) => {
  moodConfig.elementTypes.forEach(elementType => {
    if (!MOOD_MAPPING[elementType].includes(moodConfig.label)) {
      MOOD_MAPPING[elementType].push(moodConfig.label)
    }
  })
})

// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
const createAllElements = () => {
  const elements: Array<{
    type: ElementType
    name: string
    description: string
    emoji: string
    baseColor: string
    rarity: RarityLevel
    component: React.ComponentType<Record<string, unknown>>
    isPremium: boolean
    moods: string[]
    season?: SeasonalVariant
    fullName: string
  }> = []

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  ELEMENT_TEMPLATES.forEach((template, index) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è showcase
    const showcaseSeed = `showcase-${template.type}-${template.rarity}-${index}`

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
    const name = getElementName(template.type, template.rarity, showcaseSeed)
    const description = getElementDescription(
      template.type,
      template.rarity,
      name
    )
    const emoji = getElementEmoji(template.type)
    const baseColor = getElementColor(
      template.type,
      'joy' as MoodType,
      showcaseSeed
    )

    const baseElement = {
      type: template.type,
      name,
      description,
      emoji,
      baseColor,
      rarity: template.rarity,
      component: getElementComponent(template.type),
      isPremium: PREMIUM_ELEMENT_TYPES.has(template.type),
      moods: MOOD_MAPPING[template.type] || ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'],
      fullName: name,
    }
    elements.push(baseElement)

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    Object.values(SeasonalVariant).forEach(season => {
      const seasonalElement = {
        ...baseElement,
        season,
        fullName: `${name} (${getSeasonName(season)})`,
        description: `${description} - ${getSeasonName(season)} –≤–∞—Ä–∏–∞–Ω—Ç`,
      }
      elements.push(seasonalElement)
    })
  })

  return elements
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
const getSeasonName = (season: SeasonalVariant): string => {
  switch (season) {
    case SeasonalVariant.SPRING:
      return '–í–µ—Å–Ω–∞'
    case SeasonalVariant.SUMMER:
      return '–õ–µ—Ç–æ'
    case SeasonalVariant.AUTUMN:
      return '–û—Å–µ–Ω—å'
    case SeasonalVariant.WINTER:
      return '–ó–∏–º–∞'
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–∑–æ–Ω'
  }
}

const ALL_ELEMENTS = createAllElements()

const RARITY_INFO = {
  [RarityLevel.COMMON]: { color: '#6b7280', label: '–û–±—ã—á–Ω—ã–π', chance: '50%' },
  [RarityLevel.UNCOMMON]: {
    color: '#22c55e',
    label: '–ù–µ–æ–±—ã—á–Ω—ã–π',
    chance: '30%',
  },
  [RarityLevel.RARE]: { color: '#3b82f6', label: '–†–µ–¥–∫–∏–π', chance: '15%' },
  [RarityLevel.EPIC]: { color: '#a855f7', label: '–≠–ø–∏—á–µ—Å–∫–∏–π', chance: '4%' },
  [RarityLevel.LEGENDARY]: {
    color: '#f59e0b',
    label: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
    chance: '1%',
  },
}

export function ElementShowcase() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4">
      <div className="mx-auto max-w-6xl">
        <div className="mb-8 text-center">
          <h1 className="mb-4 text-4xl font-bold text-gray-800">
            üåø –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞ KiraKira
          </h1>
          <p className="text-lg text-gray-600">
            –ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑ {ALL_ELEMENTS.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π
            —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
          </p>
          <div className="mt-4 flex flex-wrap justify-center gap-2">
            <span className="rounded-full bg-blue-100 px-3 py-1 text-sm text-blue-700">
              {ELEMENT_TEMPLATES.length} –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            </span>
            <span className="rounded-full bg-green-100 px-3 py-1 text-sm text-green-700">
              {ALL_ELEMENTS.filter(el => el.season).length} —Å–µ–∑–æ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
            </span>
            <span className="rounded-full bg-yellow-100 px-3 py-1 text-sm text-yellow-700">
              {ALL_ELEMENTS.filter(el => el.isPremium).length} –ø—Ä–µ–º–∏—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            </span>
            <span className="rounded-full bg-purple-100 px-3 py-1 text-sm text-purple-700">
              {Object.values(ElementType).length} —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            </span>
          </div>
        </div>

        {/* –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
        <Card className="mb-8 p-6">
          <h2 className="mb-4 text-2xl font-semibold">üé≤ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏</h2>
          <div className="grid grid-cols-2 gap-4 md:grid-cols-5">
            {Object.entries(RARITY_INFO).map(([rarity, info]) => (
              <div
                key={rarity}
                className="rounded-lg border-2 p-3 text-center"
                style={{ borderColor: info.color }}
              >
                <div
                  className="mx-auto mb-2 h-4 w-4 rounded-full"
                  style={{ backgroundColor: info.color }}
                />
                <div className="font-medium" style={{ color: info.color }}>
                  {info.label}
                </div>
                <div className="text-sm text-gray-500">{info.chance}</div>
              </div>
            ))}
          </div>
        </Card>

        {/* –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
        {Object.entries(RARITY_INFO).map(([rarity, rarityInfo]) => {
          const elementsOfRarity = ALL_ELEMENTS.filter(
            el => el.rarity === rarity
          )
          if (elementsOfRarity.length === 0) return null

          return (
            <Card key={rarity} className="mb-8 p-6">
              <h2 className="mb-4 flex items-center gap-2 text-2xl font-semibold">
                <div
                  className="h-4 w-4 rounded-full"
                  style={{ backgroundColor: rarityInfo.color }}
                />
                {rarityInfo.label} —ç–ª–µ–º–µ–Ω—Ç—ã
                <span className="ml-auto text-sm text-gray-500">
                  {elementsOfRarity.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {rarityInfo.chance} —à–∞–Ω—Å
                </span>
              </h2>
              <div className="grid grid-cols-2 gap-6 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
                {elementsOfRarity.map((element, index) => {
                  const Component = element.component

                  return (
                    <motion.div
                      key={`${element.type}-${element.name}-${element.season || 'base'}`}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className={`group relative rounded-lg border-2 p-4 text-center transition-all hover:shadow-lg ${
                        element.isPremium
                          ? 'border-yellow-300 bg-gradient-to-br from-yellow-50 to-orange-50 hover:border-yellow-400'
                          : 'border-gray-200 bg-white hover:border-gray-300'
                      }`}
                    >
                      {element.isPremium && (
                        <div className="absolute -right-2 -top-2 rounded-full bg-yellow-500 px-2 py-1 text-xs font-bold text-white">
                          PREMIUM
                        </div>
                      )}
                      <div className="mb-3 flex justify-center">
                        <Component
                          size={element.isPremium ? 90 : 80}
                          color={element.baseColor}
                          rarity={element.rarity}
                          season={element.season}
                          name={element.name}
                        />
                      </div>
                      <h3 className="mb-1 font-medium text-gray-800">
                        {element.fullName}
                      </h3>
                      <p className="mb-2 text-xs text-gray-600">
                        {element.description}
                      </p>
                      {element.season && (
                        <div className="mb-1 inline-flex items-center rounded-full bg-green-100 px-2 py-1 text-xs font-medium text-green-700">
                          üåø {getSeasonName(element.season)}
                        </div>
                      )}
                      <div
                        className="mb-2 inline-flex items-center rounded-full px-2 py-1 text-xs font-medium text-white"
                        style={{ backgroundColor: rarityInfo.color }}
                      >
                        {element.isPremium ? '‚≠ê ' : ''}
                        {rarityInfo.label}
                      </div>
                      <div className="mb-1 text-xs text-gray-500">
                        üé≠ {element.moods.join(', ')}
                      </div>
                      <div className="text-xs text-gray-400">
                        {element.emoji}
                      </div>
                      {element.isPremium && (
                        <div className="mt-2 text-xs text-yellow-600">
                          –¢–æ–ª—å–∫–æ –¥–ª—è Premium
                        </div>
                      )}
                    </motion.div>
                  )
                })}
              </div>
            </Card>
          )
        })}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–∞—Ö */}
        <Card className="mb-8 p-6">
          <h2 className="mb-4 text-2xl font-semibold">üå∏ –°–µ–∑–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏</h2>
          <div className="mb-4 text-gray-600">
            –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –æ—Å–æ–±—ã–º–∏
            –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏:
          </div>
          <div className="grid gap-4 md:grid-cols-4">
            <div className="rounded-lg bg-green-50 p-4">
              <h3 className="mb-2 font-semibold text-green-800">üå∏ –í–µ—Å–Ω–∞</h3>
              <div className="text-sm text-green-700">
                –°–≤–µ–∂–∏–µ –∑–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏, –º–æ–ª–æ–¥—ã–µ –ø–æ–±–µ–≥–∏, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
              </div>
            </div>
            <div className="rounded-lg bg-yellow-50 p-4">
              <h3 className="mb-2 font-semibold text-yellow-800">‚òÄÔ∏è –õ–µ—Ç–æ</h3>
              <div className="text-sm text-yellow-700">
                –Ø—Ä–∫–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, –ø–æ–ª–Ω–æ–µ —Ü–≤–µ—Ç–µ–Ω–∏–µ, —Å–æ–ª–Ω–µ—á–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
              </div>
            </div>
            <div className="rounded-lg bg-orange-50 p-4">
              <h3 className="mb-2 font-semibold text-orange-800">üçÇ –û—Å–µ–Ω—å</h3>
              <div className="text-sm text-orange-700">
                –ó–æ–ª–æ—Ç—ã–µ –∏ –∫—Ä–∞—Å–Ω—ã–µ —Ç–æ–Ω–∞, —É–≤—è–¥–∞—é—â–∏–µ –ª–∏—Å—Ç—å—è, —Ç–µ–ø–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
              </div>
            </div>
            <div className="rounded-lg bg-blue-50 p-4">
              <h3 className="mb-2 font-semibold text-blue-800">‚ùÑÔ∏è –ó–∏–º–∞</h3>
              <div className="text-sm text-blue-700">
                –•–æ–ª–æ–¥–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏, —Å–Ω–µ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–æ—Ç–∞
              </div>
            </div>
          </div>
        </Card>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ */}
        <Card className="p-6">
          <h2 className="mb-4 text-2xl font-semibold">
            üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
          </h2>
          <div className="grid gap-4 md:grid-cols-3">
            <div className="rounded-lg bg-blue-50 p-4">
              <h3 className="mb-2 font-semibold text-blue-800">
                üéØ –í–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
              </h3>
              <ul className="space-y-1 text-sm text-blue-700">
                <li>
                  üòä <strong>–†–∞–¥–æ—Å—Ç—å</strong> ‚Üí –¶–≤–µ—Ç—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è
                </li>
                <li>
                  üòå <strong>–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ</strong> ‚Üí –î–µ—Ä–µ–≤—å—è –∏ –≤–æ–¥–∞
                </li>
                <li>
                  üòµ‚Äçüí´ <strong>–°—Ç—Ä–µ—Å—Å</strong> ‚Üí –ö–∞–º–Ω–∏ –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
                </li>
                <li>
                  üòî <strong>–ì—Ä—É—Å—Ç—å</strong> ‚Üí –ì—Ä–∏–±—ã –∏ —Ç—Ä–∞–≤–∞
                </li>
                <li>
                  üò† <strong>–ì–Ω–µ–≤</strong> ‚Üí –ö–∞–º–Ω–∏ –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
                </li>
                <li>
                  üò∞ <strong>–¢—Ä–µ–≤–æ–≥–∞</strong> ‚Üí –ì—Ä–∏–±—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è
                </li>
              </ul>
            </div>
            <div className="rounded-lg bg-green-50 p-4">
              <h3 className="mb-2 font-semibold text-green-800">
                ‚ö° –ë–æ–Ω—É—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–∏
              </h3>
              <ul className="space-y-1 text-sm text-green-700">
                <li>üòä –†–∞–¥–æ—Å—Ç—å: +20% –∫ —Ä–µ–¥–∫–æ—Å—Ç–∏</li>
                <li>üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ: +10% –∫ —Ä–µ–¥–∫–æ—Å—Ç–∏</li>
                <li>üò∞ –¢—Ä–µ–≤–æ–≥–∞: +10% –∫ —Ä–µ–¥–∫–æ—Å—Ç–∏</li>
                <li>üòî –ì—Ä—É—Å—Ç—å: +5% –∫ —Ä–µ–¥–∫–æ—Å—Ç–∏</li>
                <li>üòµ‚Äçüí´ –°—Ç—Ä–µ—Å—Å: –±–µ–∑ –±–æ–Ω—É—Å–∞</li>
                <li>üò† –ì–Ω–µ–≤: –±–µ–∑ –±–æ–Ω—É—Å–∞</li>
              </ul>
            </div>
            <div className="rounded-lg bg-yellow-50 p-4">
              <h3 className="mb-2 font-semibold text-yellow-800">
                ‚≠ê –ü—Ä–µ–º–∏—É–º —ç–ª–µ–º–µ–Ω—Ç—ã
              </h3>
              <ul className="space-y-1 text-sm text-yellow-700">
                <li>üí≥ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars</li>
                <li>üéÅ –ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –¥—Ä—É–∑–µ–π</li>
                <li>üèÜ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</li>
                <li>üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏</li>
                <li>üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞</li>
              </ul>
            </div>
          </div>

          <div className="mt-6 rounded-lg bg-gray-50 p-4">
            <h3 className="mb-2 font-semibold text-gray-800">
              üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            </h3>
            <div className="grid grid-cols-2 gap-4 md:grid-cols-5">
              {Object.entries(RARITY_INFO).map(([rarity, rarityInfo]) => {
                const count = ALL_ELEMENTS.filter(
                  el => el.rarity === rarity
                ).length
                return (
                  <div key={rarity} className="text-center">
                    <div
                      className="mx-auto mb-1 h-6 w-6 rounded-full"
                      style={{ backgroundColor: rarityInfo.color }}
                    />
                    <div className="text-lg font-bold">{count}</div>
                    <div className="text-xs text-gray-600">
                      {rarityInfo.label}
                    </div>
                  </div>
                )
              })}
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="mt-4 grid grid-cols-2 gap-4 md:grid-cols-4">
              <div className="text-center">
                <div className="text-lg font-bold text-blue-600">
                  {ELEMENT_TEMPLATES.length}
                </div>
                <div className="text-xs text-gray-600">–ë–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-green-600">
                  {ALL_ELEMENTS.filter(el => el.season).length}
                </div>
                <div className="text-xs text-gray-600">–°–µ–∑–æ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-yellow-600">
                  {PREMIUM_ELEMENT_TYPES.size}
                </div>
                <div className="text-xs text-gray-600">–ü—Ä–µ–º–∏—É–º —Ç–∏–ø–æ–≤</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-purple-600">
                  {Object.values(SeasonalVariant).length}
                </div>
                <div className="text-xs text-gray-600">–°–µ–∑–æ–Ω–æ–≤</div>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </div>
  )
}
