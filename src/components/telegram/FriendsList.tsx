import { useCallback, useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Users,
  UserPlus,
  MessageCircle,
  Trophy,
  Search,
  QrCode,
  CheckCircle,
  XCircle,
  Clock,
  Plus,
  TreePine,
  User as UserIcon,
  ChevronDown,
} from 'lucide-react'
import { useTelegram, useDeepLink, useUserPhotos } from '@/hooks'
import { Button, Card, UserAvatar } from '@/components/ui'
import { FriendGardenView } from '@/components/garden'
import type { User } from '@/types'
import type {
  FriendApiSearchUser,
  FriendApiSearchUsersResponse,
} from '@/types/api'
import { authenticatedFetch } from '@/utils/apiClient'

// API response types
interface FriendsListResponse {
  success: boolean
  data?: {
    friends?: Friend[]
    incomingRequests?: FriendRequest[]
    outgoingRequests?: FriendRequest[]
    referralCode?: string
  }
  error?: string
}

interface SearchResponse {
  success: boolean
  data?: SearchResult
  error?: string
}

interface FriendActionResponse {
  success: boolean
  data?: {
    message: string
  }
  error?: string
}

interface Friend {
  telegramId: number
  firstName: string
  lastName?: string
  username?: string
  photoUrl?: string
  gardenElements: number
  currentStreak: number
  friendshipDate?: Date
  isOnline: boolean
  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
  id?: string
  lastSeen?: Date
  joinedChallenges?: string[]
}

interface FriendRequest {
  requestId: string
  telegramId: number
  firstName: string
  lastName?: string
  username?: string
  photoUrl?: string
  gardenElements: number
  currentStreak: number
  requestDate: Date
}

interface SearchResult {
  user: {
    telegramId: number
    firstName: string
    lastName?: string
    username?: string
    photoUrl?: string
    gardenElements: number
    currentStreak: number
  }
  relationshipStatus: 'none' | 'pending' | 'accepted' | 'declined' | 'blocked'
  canSendRequest: boolean
}

interface FriendsListProps {
  currentUser: User | null
}

export function FriendsList({ currentUser }: FriendsListProps) {
  const navigate = useNavigate()
  const { webApp, hapticFeedback, showAlert, isTelegramEnv } = useTelegram()
  const { checkPendingInvite, clearPendingInvite } = useDeepLink()
  const { updateFriendsPhotosWithAlert } = useUserPhotos()
  const [friends, setFriends] = useState<Friend[]>([])
  const [incomingRequests, setIncomingRequests] = useState<FriendRequest[]>([])
  const [outgoingRequests, setOutgoingRequests] = useState<FriendRequest[]>([])
  const [referralCode, setReferralCode] = useState<string>('')
  const [searchQuery, setSearchQuery] = useState('')
  const [referralSearchQuery, setReferralSearchQuery] = useState('')
  const [searchResult, setSearchResult] = useState<SearchResult | null>(null)
  const [isSearching, setIsSearching] = useState(false)

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const [globalSearchQuery, setGlobalSearchQuery] = useState('')
  const [globalSearchResults, setGlobalSearchResults] = useState<
    FriendApiSearchUser[]
  >([])
  const [searchPage, setSearchPage] = useState(1)
  const [hasMoreResults, setHasMoreResults] = useState(false)
  const [isLoadingMore, setIsLoadingMore] = useState(false)
  const [activeView, setActiveView] = useState<
    'friends' | 'find' | 'invites' | 'requests'
  >('friends')
  const [hasAutoUpdatedPhotos, setHasAutoUpdatedPhotos] = useState(false)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∞–¥–∞ –¥—Ä—É–≥–∞
  const [viewingFriendGarden, setViewingFriendGarden] = useState<number | null>(
    null
  )

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö
  const loadFriendsData = useCallback(async () => {
    if (!currentUser?.telegramId || currentUser.telegramId === 0) return

    try {
      const response = await authenticatedFetch(
        `/api/friends?action=list&telegramId=${currentUser.telegramId}&type=all`
      )
      const result = (await response.json()) as FriendsListResponse

      if (result.success && result.data) {
        const friends = result.data.friends ?? []
        setFriends(friends)
        setIncomingRequests(result.data.incomingRequests ?? [])
        setOutgoingRequests(result.data.outgoingRequests ?? [])
        setReferralCode(result.data.referralCode ?? '')

        // üì∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥—Ä—É–∑–µ–π –±–µ–∑ —Ñ–æ—Ç–æ (–≤ —Ñ–æ–Ω–µ, –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é)
        const friendsWithoutPhotos = friends.filter(friend => !friend.photoUrl)
        if (friendsWithoutPhotos.length > 0 && !hasAutoUpdatedPhotos) {
          console.log(
            `üîÑ Auto-updating photos for ${friendsWithoutPhotos.length} friends without avatars...`
          )
          setHasAutoUpdatedPhotos(true) // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª–∏

          // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          void updateFriendsPhotosWithAlert().then(() => {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫
            void loadFriendsData()
          })
        }
      } else {
        showAlert(result.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä—É–∑—å—è—Ö')
      }
    } catch (error) {
      console.error('Failed to load friends data:', error)
      showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    }
  }, [
    currentUser?.telegramId,
    showAlert,
    hasAutoUpdatedPhotos,
    updateFriendsPhotosWithAlert,
  ])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    void loadFriendsData()
  }, [loadFriendsData])

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—Ä—É–∑–µ–π –ø–æ –ø–æ–∏—Å–∫—É
  const filteredFriends = friends.filter(
    friend =>
      friend.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (friend.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ??
        false) ||
      (friend.username?.toLowerCase().includes(searchQuery.toLowerCase()) ??
        false)
  )

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
  const handleSearchByReferralCode = useCallback(
    async (customQuery?: string) => {
      const searchQuery = customQuery ?? referralSearchQuery.trim()
      if (!searchQuery || !currentUser?.telegramId) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!')
        return
      }

      try {
        setIsSearching(true)
        const response = await authenticatedFetch(
          `/api/friends?action=search&referralCode=${searchQuery}&searcherTelegramId=${currentUser.telegramId}`
        )
        const result = (await response.json()) as SearchResponse

        if (result.success && result.data) {
          setSearchResult(result.data)
          hapticFeedback('success')
        } else {
          showAlert(result.error ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
          setSearchResult(null)
        }
      } catch (error) {
        console.error('Search error:', error)
        showAlert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')
        setSearchResult(null)
      } finally {
        setIsSearching(false)
      }
    },
    [referralSearchQuery, currentUser?.telegramId, showAlert, hapticFeedback]
  )

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const handleGlobalUserSearch = useCallback(
    async (query: string, page = 1) => {
      if (!query.trim() || query.length < 2) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞')
        return
      }

      if (!currentUser?.telegramId) {
        showAlert('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        return
      }

      try {
        setIsSearching(true)
        const response = await authenticatedFetch(
          `/api/friends?action=search&query=${encodeURIComponent(query)}&searcherTelegramId=${currentUser.telegramId}&page=${page}&limit=10`
        )
        const result = (await response.json()) as {
          success: boolean
          data?: FriendApiSearchUsersResponse
          error?: string
        }

        if (result.success && result.data) {
          if (page === 1) {
            setGlobalSearchResults(result.data.users as FriendApiSearchUser[])
          } else {
            setGlobalSearchResults(prev => [
              ...prev,
              ...((result.data?.users as FriendApiSearchUser[]) || []),
            ])
          }
          setHasMoreResults(result.data.hasMore)
          setSearchPage(page)
          hapticFeedback('light')
        } else {
          if (page === 1) {
            setGlobalSearchResults([])
          }
          showAlert(result.error ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        }
      } catch (error) {
        console.error('Global search error:', error)
        showAlert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        if (page === 1) {
          setGlobalSearchResults([])
        }
      } finally {
        setIsSearching(false)
        setIsLoadingMore(false)
      }
    },
    [currentUser?.telegramId, showAlert, hapticFeedback]
  )

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const handleLoadMore = useCallback(() => {
    if (!isLoadingMore && hasMoreResults) {
      setIsLoadingMore(true)
      void handleGlobalUserSearch(globalSearchQuery, searchPage + 1)
    }
  }, [
    isLoadingMore,
    hasMoreResults,
    globalSearchQuery,
    searchPage,
    handleGlobalUserSearch,
  ])

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
  const handleSendFriendRequest = useCallback(
    async (targetTelegramId: number) => {
      if (!currentUser?.telegramId || currentUser.telegramId === 0) return

      try {
        hapticFeedback('medium')
        const response = await authenticatedFetch(
          '/api/friends?action=send-request',
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              requesterTelegramId: currentUser.telegramId,
              addresseeTelegramId: targetTelegramId,
            }),
          }
        )

        const result = (await response.json()) as FriendActionResponse

        if (result.success && result.data) {
          showAlert(result.data.message)
          setSearchResult(null)
          setReferralSearchQuery('')
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          await loadFriendsData()
        } else {
          showAlert(result.error ?? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
        }
      } catch (error) {
        console.error('Send request error:', error)
        showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      }
    },
    [currentUser?.telegramId, hapticFeedback, showAlert, loadFriendsData]
  )

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
  const handleRespondToRequest = useCallback(
    async (requesterTelegramId: number, action: 'accept' | 'decline') => {
      if (!currentUser?.telegramId || currentUser.telegramId === 0) return

      try {
        hapticFeedback('medium')
        const response = await authenticatedFetch(
          '/api/friends?action=respond-request',
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              telegramId: currentUser.telegramId,
              requesterTelegramId,
              action,
            }),
          }
        )

        const result = (await response.json()) as FriendActionResponse

        if (result.success && result.data) {
          showAlert(result.data.message)
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          await loadFriendsData()
        } else {
          showAlert(result.error ?? '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
        }
      } catch (error) {
        console.error('Respond to request error:', error)
        showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      }
    },
    [currentUser?.telegramId, hapticFeedback, showAlert, loadFriendsData]
  )

  // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ Telegram
  const handleInviteSpecificFriend = useCallback(() => {
    if (!webApp) return

    hapticFeedback('light')

    const inviteText = `üå∏ –ü–æ–ø—Ä–æ–±—É–π KiraKira!\n\n–Ø —É–∂–µ ${currentUser?.stats?.totalDays ?? 0} –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç! üíö\n\n‚ú® –°–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥\nü§ù –£—á–∞—Å—Ç–≤—É–π –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö —Å–æ –º–Ω–æ–π\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏`

    webApp.switchInlineQuery(inviteText, ['users'])
  }, [webApp, hapticFeedback, currentUser])

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É
  const handleMessageFriend = useCallback(
    (friend: Friend) => {
      if (!webApp) return

      hapticFeedback('light')

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º deep link –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      webApp.switchInlineQuery(`personal_${friend.telegramId}`, ['users'])
    },
    [webApp, hapticFeedback]
  )

  // –í—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂
  const handleChallengeFriend = useCallback(
    (friend: Friend) => {
      if (!webApp) return

      hapticFeedback('medium')

      webApp.switchInlineQuery(`challenge_friend_${friend.telegramId}`, [
        'users',
      ])
    },
    [webApp, hapticFeedback]
  )

  // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–¥ –¥—Ä—É–≥–∞
  const handleViewFriendGarden = useCallback(
    (friend: Friend) => {
      hapticFeedback('light')
      setViewingFriendGarden(friend.telegramId)
    },
    [hapticFeedback]
  )

  // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞
  const handleViewFriendProfile = useCallback(
    (friend: Friend) => {
      hapticFeedback('light')
      navigate(`/friend/${friend.telegramId}`)
    },
    [hapticFeedback, navigate]
  )

  // –í–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∞–¥–∞
  const handleBackFromGarden = useCallback(() => {
    hapticFeedback('light')
    setViewingFriendGarden(null)
  }, [hapticFeedback])

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è QR –∫–æ–¥–æ–º
  const handleShareQR = useCallback(() => {
    if (!webApp || !referralCode) return

    hapticFeedback('light')

    const qrText = `üå∏ –ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ KiraKira: ${referralCode}\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è!\n\nhttps://t.me/KiraKiraBot?start=friend_${referralCode}`

    webApp.shareMessage({
      text: qrText,
      parse_mode: 'Markdown',
    })
  }, [webApp, hapticFeedback, referralCode])

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pending friend invites –∏–∑ deep links
  useEffect(() => {
    const pendingInvite = checkPendingInvite()
    if (pendingInvite) {
      console.log('üîó Processing pending friend invite:', pendingInvite)

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∏—Å–∫–∞
      setActiveView('find')

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
      setReferralSearchQuery(pendingInvite)

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      setTimeout(() => {
        void handleSearchByReferralCode(pendingInvite)
      }, 500)

      // –û—á–∏—â–∞–µ–º pending invite –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      clearPendingInvite()

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      showAlert?.(`üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∞ –ø–æ –∫–æ–¥—É: ${pendingInvite}`)
    }
  }, [
    checkPendingInvite,
    clearPendingInvite,
    showAlert,
    handleSearchByReferralCode,
  ])

  // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å–∞–¥ –¥—Ä—É–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FriendGardenView
  if (viewingFriendGarden) {
    return (
      <FriendGardenView
        friendTelegramId={viewingFriendGarden}
        currentUser={currentUser}
        onBack={handleBackFromGarden}
      />
    )
  }

  if (!isTelegramEnv) {
    return (
      <Card className="p-6 text-center">
        <Users className="mx-auto mb-4 h-12 w-12 text-blue-500" />
        <h3 className="mb-2 text-lg font-semibold">–î—Ä—É–∑—å—è</h3>
        <p className="text-gray-600 dark:text-gray-400">
          –§—É–Ω–∫—Ü–∏–∏ –¥—Ä—É–∑–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Telegram Mini App
        </p>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', stiffness: 200 }}
          className="mb-4"
        >
          {/* <Users className="mx-auto h-16 w-16 text-blue-500" /> */}
        </motion.div>
        <h2 className="text-lg font-semibold">–î—Ä—É–∑—å—è</h2>
        <p className="text-gray-600 dark:text-gray-400">
          –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
        </p>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="glass-card flex space-x-1.5 rounded-2xl p-1.5">
        {[
          {
            id: 'friends',
            label: '–î—Ä—É–∑—å—è',
            icon: Users,
            count: friends.length,
          },
          {
            id: 'requests',
            label: '–ó–∞–ø—Ä–æ—Å—ã',
            icon: Clock,
            count: incomingRequests.length,
          },
          { id: 'find', label: '–ù–∞–π—Ç–∏', icon: Search },
          { id: 'invites', label: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', icon: UserPlus },
        ].map(tab => {
          const Icon = tab.icon
          return (
            <button
              key={tab.id}
              onClick={() =>
                setActiveView(
                  tab.id as 'friends' | 'find' | 'invites' | 'requests'
                )
              }
              className={`relative flex flex-1 items-center justify-center space-x-1 rounded-xl px-1 py-2 text-xs font-medium transition-all sm:px-2 sm:text-sm ${
                activeView === tab.id
                  ? 'bg-white text-kira-600 shadow-md dark:bg-neutral-800 dark:text-kira-400'
                  : 'text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-100'
              }`}
            >
              <Icon className="h-3 w-3 sm:h-4 sm:w-4" />
              <span className="hidden truncate xs:inline sm:inline">
                {tab.label}
              </span>
              {tab.count !== undefined && tab.count > 0 && (
                <span className="absolute -right-1 -top-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs text-white sm:h-5 sm:w-5">
                  {tab.count > 9 ? '9+' : tab.count}
                </span>
              )}
            </button>
          )
        })}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      <AnimatePresence mode="wait">
        {activeView === 'friends' && (
          <motion.div
            key="friends"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            {/* –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π..."
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                className="w-full rounded-lg border border-gray-200 bg-white py-2 pl-10 pr-4 text-sm text-gray-900 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
              />
            </div>

            {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π */}
            <div className="space-y-3">
              {filteredFriends.length === 0 ? (
                <Card className="p-6 text-center">
                  <Users className="mx-auto mb-3 h-8 w-8 text-gray-400" />
                  <h4 className="mb-2 font-medium">–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</h4>
                  <p className="mb-4 text-sm text-gray-600 dark:text-gray-400">
                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ KiraKira!
                  </p>
                  <Button
                    onClick={handleInviteSpecificFriend}
                    size="sm"
                    className="bg-blue-500 hover:bg-blue-600"
                  >
                    üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                  </Button>
                </Card>
              ) : (
                filteredFriends.map((friend, index) => (
                  <motion.div
                    key={friend.telegramId}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className="p-3">
                      <div className="space-y-3">
                        {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∞–≤–∞—Ç–∞—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="flex items-center space-x-3">
                          {/* –ê–≤–∞—Ç–∞—Ä */}
                          <UserAvatar
                            photoUrl={friend.photoUrl}
                            name={`${friend.firstName} ${friend.lastName ?? ''}`.trim()}
                            username={friend.username}
                            size="md"
                            isOnline={friend.isOnline}
                          />

                          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–µ */}
                          <div className="min-w-0 flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="truncate font-semibold text-gray-900 dark:text-gray-100">
                                {(friend.username ?? '').length > 0
                                  ? `@${friend.username}`
                                  : `${friend.firstName} ${friend.lastName ?? ''}`}
                              </h4>
                              {!(friend.username ?? '').length &&
                                (friend.firstName ?? '').length > 0 && (
                                  <span className="text-xs text-gray-500">
                                    {friend.firstName} {friend.lastName ?? ''}
                                  </span>
                                )}
                            </div>

                            <div className="mt-1 flex items-center space-x-3 text-xs text-gray-500">
                              <span className="flex items-center space-x-1">
                                <span>üå±</span>
                                <span>{friend.gardenElements}</span>
                              </span>
                              <span className="flex items-center space-x-1">
                                <span>üî•</span>
                                <span>{friend.currentStreak}</span>
                              </span>
                              <span className="truncate">
                                {friend.isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ'}
                              </span>
                            </div>
                          </div>
                        </div>

                        {/* –û–±—â–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
                        {friend.joinedChallenges &&
                          friend.joinedChallenges.length > 0 && (
                            <div className="flex flex-wrap gap-1">
                              {friend.joinedChallenges
                                .slice(0, 2)
                                .map((challengeId: string) => (
                                  <span
                                    key={challengeId}
                                    className="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs text-blue-700"
                                  >
                                    üéØ –ß–µ–ª–ª–µ–Ω–¥–∂
                                  </span>
                                ))}
                            </div>
                          )}

                        {/* –î–µ–π—Å—Ç–≤–∏—è –≤–Ω–∏–∑—É */}
                        <div className="flex justify-between space-x-1 border-t border-gray-100 pt-2 sm:space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleViewFriendProfile(friend)}
                            className="min-w-0 flex-1 bg-blue-50 text-blue-700 hover:bg-blue-100"
                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"
                          >
                            <UserIcon className="h-3 w-3" />
                            <span className="ml-1 hidden truncate text-xs sm:inline">
                              –ü—Ä–æ—Ñ–∏–ª—å
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleViewFriendGarden(friend)}
                            className="min-w-0 flex-1 bg-green-50 text-green-700 hover:bg-green-100"
                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–∞"
                          >
                            <TreePine className="h-3 w-3" />
                            <span className="ml-1 hidden truncate text-xs sm:inline">
                              –°–∞–¥
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleMessageFriend(friend)}
                            className="min-w-0 flex-1 hover:bg-gray-100"
                            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                          >
                            <MessageCircle className="h-3 w-3" />
                            <span className="ml-1 hidden truncate text-xs sm:inline">
                              –°–æ–æ–±—â.
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleChallengeFriend(friend)}
                            className="min-w-0 flex-1 bg-orange-50 text-orange-700 hover:bg-orange-100"
                            title="–í—ã–∑–≤–∞—Ç—å –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂"
                          >
                            <Trophy className="h-3 w-3" />
                            <span className="ml-1 hidden truncate text-xs sm:inline">
                              –ß–µ–ª–ª.
                            </span>
                          </Button>
                        </div>
                      </div>
                    </Card>
                  </motion.div>
                ))
              )}
            </div>
          </motion.div>
        )}

        {activeView === 'requests' && (
          <motion.div
            key="requests"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <div className="text-center">
              <h3 className="text-lg font-semibold">–ó–∞–ø—Ä–æ—Å—ã –¥—Ä—É–∂–±—ã</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Ö–æ–¥—è—â–∏–º–∏ –∏ –∏—Å—Ö–æ–¥—è—â–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
              </p>
            </div>

            {/* –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã */}
            {incomingRequests.length > 0 && (
              <div>
                <h4 className="mb-3 text-sm font-semibold text-gray-700">
                  –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã ({incomingRequests.length})
                </h4>
                <div className="space-y-3">
                  {incomingRequests.map((request, index) => (
                    <motion.div
                      key={request.requestId}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <Card className="p-4">
                        <div className="flex items-center space-x-4">
                          {/* –ê–≤–∞—Ç–∞—Ä */}
                          <UserAvatar
                            photoUrl={request.photoUrl}
                            name={`${request.firstName} ${request.lastName ?? ''}`.trim()}
                            username={request.username}
                            size="md"
                          />

                          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                          <div className="min-w-0 flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="truncate font-semibold">
                                {(request.username ?? '').length > 0
                                  ? `@${request.username}`
                                  : `${request.firstName} ${request.lastName ?? ''}`}
                              </h4>
                              {!(request.username ?? '').length &&
                                (request.firstName ?? '').length > 0 && (
                                  <span className="text-xs text-gray-500">
                                    {request.firstName} {request.lastName ?? ''}
                                  </span>
                                )}
                            </div>
                            <div className="mt-1 flex items-center space-x-4 text-xs text-gray-500">
                              <span className="flex items-center space-x-1">
                                <span>üå±</span>
                                <span>{request.gardenElements}</span>
                              </span>
                              <span className="flex items-center space-x-1">
                                <span>üî•</span>
                                <span>{request.currentStreak}</span>
                              </span>
                              <span>
                                {new Date(
                                  request.requestDate
                                ).toLocaleDateString('ru')}
                              </span>
                            </div>
                          </div>

                          {/* –î–µ–π—Å—Ç–≤–∏—è */}
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              onClick={() => {
                                void handleRespondToRequest(
                                  request.telegramId,
                                  'accept'
                                )
                              }}
                              className="bg-green-500 hover:bg-green-600"
                            >
                              <CheckCircle className="h-3 w-3" />
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                void handleRespondToRequest(
                                  request.telegramId,
                                  'decline'
                                )
                              }}
                              className="border-red-200 text-red-600 hover:bg-red-50"
                            >
                              <XCircle className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã */}
            {outgoingRequests.length > 0 && (
              <div>
                <h4 className="mb-3 text-sm font-semibold text-gray-700">
                  –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã ({outgoingRequests.length})
                </h4>
                <div className="space-y-3">
                  {outgoingRequests.map((request, index) => (
                    <motion.div
                      key={request.requestId}
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <Card className="bg-gray-50 p-4">
                        <div className="flex items-center space-x-4">
                          <UserAvatar
                            photoUrl={request.photoUrl}
                            name={`${request.firstName} ${request.lastName ?? ''}`.trim()}
                            username={request.username}
                            size="md"
                          />
                          <div className="min-w-0 flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="truncate font-semibold">
                                {(request.username ?? '').length > 0
                                  ? `@${request.username}`
                                  : `${request.firstName} ${request.lastName ?? ''}`}
                              </h4>
                              {!(request.username ?? '').length &&
                                (request.firstName ?? '').length > 0 && (
                                  <span className="text-xs text-gray-500">
                                    {request.firstName} {request.lastName ?? ''}
                                  </span>
                                )}
                            </div>
                            <div className="mt-1 text-xs text-gray-500">
                              –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω{' '}
                              {new Date(request.requestDate).toLocaleDateString(
                                'ru'
                              )}
                            </div>
                          </div>
                          <div className="flex items-center space-x-2 text-orange-600">
                            <Clock className="h-4 w-4" />
                            <span className="text-sm">–û–∂–∏–¥–∞–Ω–∏–µ</span>
                          </div>
                        </div>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
            {incomingRequests.length === 0 && outgoingRequests.length === 0 && (
              <Card className="p-6 text-center">
                <Clock className="mx-auto mb-3 h-8 w-8 text-gray-400" />
                <h4 className="mb-2 font-medium">–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</h4>
                <p className="text-sm text-gray-600">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
                </p>
              </Card>
            )}
          </motion.div>
        )}

        {activeView === 'find' && (
          <motion.div
            key="find"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <div className="text-center">
              <h3 className="text-lg font-semibold">–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π</h3>
              <p className="text-sm text-gray-600">
                –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
              </p>
            </div>

            {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            <Card className="p-4">
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="flex-shrink-0 rounded-lg bg-green-100 p-3 dark:bg-green-900/30">
                    <Users className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <h4 className="font-medium">–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4>
                    <p className="text-sm text-gray-600">
                      –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ @username
                    </p>
                  </div>
                </div>

                <div className="flex space-x-2">
                  <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ @username..."
                    value={globalSearchQuery}
                    onChange={e => setGlobalSearchQuery(e.target.value)}
                    onKeyDown={e => {
                      if (e.key === 'Enter') {
                        void handleGlobalUserSearch(globalSearchQuery, 1)
                      }
                    }}
                    className="flex-1 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
                  />
                  <Button
                    onClick={() => {
                      void handleGlobalUserSearch(globalSearchQuery, 1)
                    }}
                    disabled={
                      isSearching || globalSearchQuery.trim().length < 2
                    }
                    className="bg-green-500 hover:bg-green-600"
                  >
                    {isSearching ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
                  </Button>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
                {globalSearchResults.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="space-y-3 border-t pt-4"
                  >
                    <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      –ù–∞–π–¥–µ–Ω–æ: {globalSearchResults.length}
                      {hasMoreResults && '+'}
                    </div>

                    {globalSearchResults.map((user, index) => {
                      const displayName = user.username
                        ? `@${user.username}`
                        : `${user.first_name} ${user.last_name ?? ''}`.trim()
                      const canAddFriend = user.relationshipStatus === 'none'
                      const isPending = user.relationshipStatus === 'pending'
                      const isFriend = user.relationshipStatus === 'accepted'

                      return (
                        <motion.div
                          key={user.telegram_id}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.05 }}
                          className="rounded-lg border border-gray-200 bg-white p-3 dark:border-gray-700 dark:bg-gray-800"
                        >
                          <div className="flex items-center space-x-3">
                            <UserAvatar
                              photoUrl={user.photo_url}
                              name={displayName}
                              username={user.username}
                              size="md"
                            />
                            <div className="min-w-0 flex-1">
                              <div className="flex items-center space-x-2">
                                <h4 className="truncate font-semibold text-gray-900 dark:text-gray-100">
                                  {displayName}
                                </h4>
                                {user.username && user.first_name && (
                                  <span className="truncate text-xs text-gray-500">
                                    {user.first_name}
                                  </span>
                                )}
                              </div>
                              <div className="mt-1 flex items-center space-x-3 text-xs text-gray-500">
                                <span className="flex items-center space-x-1">
                                  <span>üå±</span>
                                  <span>{user.total_elements}</span>
                                </span>
                                <span className="flex items-center space-x-1">
                                  <span>üî•</span>
                                  <span>{user.current_streak}</span>
                                </span>
                                <span className="flex items-center space-x-1">
                                  <span>‚≠ê</span>
                                  <span>–£—Ä. {user.level}</span>
                                </span>
                              </div>
                            </div>
                            <div className="flex flex-col space-y-1">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() =>
                                  handleViewFriendProfile({
                                    telegramId: user.telegram_id,
                                  } as Friend)
                                }
                                className="text-xs"
                              >
                                <UserIcon className="mr-1 h-3 w-3" />
                                –ü—Ä–æ—Ñ–∏–ª—å
                              </Button>
                              {canAddFriend && (
                                <Button
                                  size="sm"
                                  onClick={() => {
                                    void handleSendFriendRequest(
                                      user.telegram_id
                                    )
                                  }}
                                  className="bg-green-500 text-xs hover:bg-green-600"
                                >
                                  <Plus className="mr-1 h-3 w-3" />
                                  –î–æ–±–∞–≤–∏—Ç—å
                                </Button>
                              )}
                              {isPending && (
                                <span className="text-xs text-orange-600">
                                  –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                                </span>
                              )}
                              {isFriend && (
                                <span className="text-xs text-green-600">
                                  ‚úì –£–∂–µ –¥—Ä—É–∑—å—è
                                </span>
                              )}
                            </div>
                          </div>
                        </motion.div>
                      )
                    })}

                    {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ */}
                    {hasMoreResults && (
                      <Button
                        onClick={handleLoadMore}
                        disabled={isLoadingMore}
                        variant="outline"
                        className="w-full"
                      >
                        {isLoadingMore ? (
                          <>
                            <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-gray-400 border-t-transparent" />
                            –ó–∞–≥—Ä—É–∑–∫–∞...
                          </>
                        ) : (
                          <>
                            <ChevronDown className="mr-2 h-4 w-4" />
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                          </>
                        )}
                      </Button>
                    )}
                  </motion.div>
                )}
              </div>
            </Card>

            {/* –ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É */}
            <Card className="p-4">
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="flex-shrink-0 rounded-lg bg-blue-100 p-3 dark:bg-blue-900/30">
                    <Search className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <h4 className="font-medium">–ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É</h4>
                    <p className="text-sm text-gray-600">
                      –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥—Ä—É–≥–∞
                    </p>
                  </div>
                </div>

                <div className="flex space-x-2">
                  <input
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ABC12345"
                    value={referralSearchQuery}
                    onChange={e =>
                      setReferralSearchQuery(e.target.value.toUpperCase())
                    }
                    className="flex-1 rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm text-gray-900 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
                    maxLength={8}
                  />
                  <Button
                    onClick={() => {
                      void handleSearchByReferralCode()
                    }}
                    disabled={isSearching || !referralSearchQuery.trim()}
                    className="bg-blue-500 hover:bg-blue-600"
                  >
                    {isSearching ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
                  </Button>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ */}
                {searchResult && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="border-t pt-4"
                  >
                    <div className="flex items-center space-x-4">
                      <UserAvatar
                        photoUrl={searchResult.user.photoUrl}
                        name={`${searchResult.user.firstName} ${searchResult.user.lastName ?? ''}`.trim()}
                        username={searchResult.user.username}
                        size="md"
                      />
                      <div className="min-w-0 flex-1">
                        <div className="flex items-center space-x-2">
                          <h4 className="font-semibold">
                            {(searchResult.user.username ?? '').length > 0
                              ? `@${searchResult.user.username}`
                              : `${searchResult.user.firstName ?? ''} ${searchResult.user.lastName ?? ''}`.trim() ||
                                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                          </h4>
                          {(searchResult.user.username ?? '').length > 0 &&
                            (searchResult.user.firstName ?? '').length > 0 && (
                              <span className="text-xs text-gray-500">
                                {searchResult.user.firstName}{' '}
                                {searchResult.user.lastName ?? ''}
                              </span>
                            )}
                        </div>
                        <div className="mt-1 flex items-center space-x-4 text-xs text-gray-500">
                          <span className="flex items-center space-x-1">
                            <span>üå±</span>
                            <span>{searchResult.user.gardenElements}</span>
                          </span>
                          <span className="flex items-center space-x-1">
                            <span>üî•</span>
                            <span>{searchResult.user.currentStreak}</span>
                          </span>
                        </div>
                      </div>
                      <div>
                        {searchResult.canSendRequest ? (
                          <Button
                            size="sm"
                            onClick={() => {
                              void handleSendFriendRequest(
                                searchResult.user.telegramId
                              )
                            }}
                            className="bg-green-500 hover:bg-green-600"
                          >
                            <Plus className="mr-1 h-3 w-3" />
                            –î–æ–±–∞–≤–∏—Ç—å
                          </Button>
                        ) : (
                          <span className="text-xs text-gray-500">
                            {searchResult.relationshipStatus === 'accepted' &&
                              '–£–∂–µ –¥—Ä—É–∑—å—è'}
                            {searchResult.relationshipStatus === 'pending' &&
                              '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}
                            {searchResult.relationshipStatus === 'declined' &&
                              '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω'}
                            {searchResult.relationshipStatus === 'blocked' &&
                              '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                          </span>
                        )}
                      </div>
                    </div>
                  </motion.div>
                )}
              </div>
            </Card>

            {/* QR –∫–æ–¥ */}
            <Card className="p-4">
              <div className="flex items-center space-x-4">
                <div className="flex-shrink-0 rounded-lg bg-purple-100 p-3 dark:bg-purple-900/30">
                  <QrCode className="h-6 w-6 text-purple-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <h4 className="font-medium">–ú–æ–π QR –∫–æ–¥</h4>
                  <p className="text-sm text-gray-600">
                    {referralCode
                      ? `–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º ${referralCode} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`
                      : '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç—Å—è...'}
                  </p>
                </div>
                <Button
                  onClick={
                    referralCode
                      ? handleShareQR
                      : () => {
                          void loadFriendsData()
                        }
                  }
                  variant="outline"
                  className="flex-shrink-0"
                  disabled={!referralCode}
                >
                  {referralCode ? '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
                </Button>
              </div>
            </Card>

            {/* –ò–∑ –≥—Ä—É–ø–ø */}
            <Card className="p-4">
              <div className="text-center">
                <Users className="mx-auto mb-3 h-8 w-8 text-gray-400" />
                <h4 className="mb-2 font-medium">–ò–∑ –æ–±—â–∏—Ö –≥—Ä—É–ø–ø</h4>
                <p className="text-sm text-gray-600">
                  –°–∫–æ—Ä–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π –∏–∑ –æ–±—â–∏—Ö Telegram –≥—Ä—É–ø–ø
                </p>
              </div>
            </Card>
          </motion.div>
        )}

        {activeView === 'invites' && (
          <motion.div
            key="invites"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <div className="text-center">
              <h3 className="text-lg font-semibold">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</h3>
              <p className="text-sm text-gray-600">
                –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å KiraKira —Å –¥—Ä—É–∑—å—è–º–∏
              </p>
            </div>

            {/* –ü—Ä—è–º–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ */}
            <Card className="p-4">
              <div className="flex items-center space-x-4">
                <div className="flex-shrink-0 rounded-lg bg-green-100 p-3 dark:bg-green-900/30">
                  <MessageCircle className="h-6 w-6 text-green-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <h4 className="font-medium">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</h4>
                  <p className="text-sm text-gray-600">
                    –û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                  </p>
                </div>
                <Button
                  onClick={handleInviteSpecificFriend}
                  className="flex-shrink-0 bg-green-500 hover:bg-green-600"
                >
                  üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </div>
            </Card>

            {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
            <Card className="p-4">
              <h4 className="mb-3 font-medium">–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥</h4>
              {referralCode ? (
                <>
                  <div className="rounded-lg bg-gray-50 p-3 text-center dark:bg-gray-800">
                    <p className="mb-2 text-2xl font-bold text-blue-600">
                      {referralCode}
                    </p>
                    <p className="text-sm text-gray-600">
                      https://t.me/KiraKiraBot?start=friend_{referralCode}
                    </p>
                  </div>
                  <p className="mt-2 text-xs text-gray-500">
                    –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º, —á—Ç–æ–±—ã –¥—Ä—É–∑—å—è –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –≤–∞—Å
                  </p>
                </>
              ) : (
                <div className="space-y-3">
                  <div className="rounded-lg bg-gray-50 p-3 text-center dark:bg-gray-800">
                    <p className="mb-2 text-sm text-gray-500">
                      –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞...
                    </p>
                    <div className="flex justify-center">
                      <div className="h-4 w-4 animate-spin rounded-full border-2 border-blue-600 border-t-transparent"></div>
                    </div>
                  </div>
                  <Button
                    onClick={() => {
                      void loadFriendsData()
                    }}
                    size="sm"
                    variant="outline"
                    className="w-full"
                  >
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                  </Button>
                  <p className="text-center text-xs text-gray-500">
                    –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                  </p>
                </div>
              )}
            </Card>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π */}
            <Card className="p-4">
              <h4 className="mb-3 font-medium">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</h4>
              <div className="mb-4 grid grid-cols-2 gap-4 text-center">
                <div>
                  <div className="text-2xl font-bold text-blue-600">
                    {friends.length}
                  </div>
                  <div className="text-xs text-gray-600">–î—Ä—É–∑–µ–π</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-green-600">5</div>
                  <div className="text-xs text-gray-600">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ</div>
                </div>
              </div>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
