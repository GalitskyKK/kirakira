import { useCallback, useState } from 'react'
import { motion } from 'framer-motion'
import { Share2, Camera, Heart, Copy, MessageCircle } from 'lucide-react'
import { useTelegram } from '@/hooks'
import { Button, Card } from '@/components/ui'
import type { Garden, MoodEntry } from '@/types'
import { authenticatedFetch } from '@/utils/apiClient'

interface TelegramShareProps {
  garden: Garden | null
  recentMoods: readonly MoodEntry[]
  onCapture?: () => Promise<string> // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–¥–∞
}

export function TelegramShare({
  garden,
  recentMoods,
  onCapture,
}: TelegramShareProps) {
  const { webApp, shareGarden, hapticFeedback, isTelegramEnv, showAlert } =
    useTelegram()
  const [isCapturing, setIsCapturing] = useState(false)
  const [lastSharedImage, setLastSharedImage] = useState<string | null>(null)

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–∞–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  const generateGardenDescription = useCallback(() => {
    if (!garden || recentMoods.length === 0) {
      return '–ú–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –≤ KiraKira üå∏'
    }

    const totalElements = garden.elements.length
    const recentMoodTypes = recentMoods.slice(0, 7).map(mood => mood.mood)
    const dominantMood = recentMoodTypes.reduce(
      (acc, mood) => {
        acc[mood] = (acc[mood] ?? 0) + 1
        return acc
      },
      {} as Record<string, number>
    )

    const topMood = Object.entries(dominantMood).sort(
      ([, a], [, b]) => b - a
    )[0]?.[0]

    const moodEmojis = {
      joy: 'üòä',
      calm: 'üòå',
      stress: 'üò∞',
      sadness: 'üò¢',
      anger: 'üò†',
      anxiety: 'üò∞',
    }

    const moodNames = {
      joy: '—Ä–∞–¥–æ—Å—Ç–Ω–æ–µ',
      calm: '—Å–ø–æ–∫–æ–π–Ω–æ–µ',
      stress: '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ',
      sadness: '–≥—Ä—É—Å—Ç–Ω–æ–µ',
      anger: '—Å–µ—Ä–¥–∏—Ç–æ–µ',
      anxiety: '—Ç—Ä–µ–≤–æ–∂–Ω–æ–µ',
    }

    const emoji = moodEmojis[topMood as keyof typeof moodEmojis] || 'üå∏'
    const moodName =
      moodNames[topMood as keyof typeof moodNames] || '—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ'

    return `${emoji} –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –º–æ–π —Å–∞–¥ –æ—Ç—Ä–∞–∂–∞–µ—Ç ${moodName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n\n–í—ã—Ä–∞—Å—Ç–∏–ª ${totalElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö ‚Äî –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∏—Ö —ç–º–æ—Ü–∏–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏!`
  }, [garden, recentMoods])

  // –®–∞—Ä–∏–Ω–≥ —Å–∞–¥–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
  const handleShareText = useCallback(async () => {
    if (!webApp) return

    hapticFeedback('light')
    const description = generateGardenDescription()

    try {
      webApp.shareMessage({
        text: `üå∏ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –º–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –≤ KiraKira!\n\n${description}\n\nüîó –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: https://t.me/KiraKiraGardenBot?startapp`,
        parse_mode: 'Markdown',
      })

      // üèÜ –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ü–´–¢ –ó–ê –®–ï–†–ò–ù–ì –°–ê–î–ê (text version)
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { useUserStore } = await import('@/stores/userStore')
      const currentUser = useUserStore.getState().currentUser

      if (currentUser?.telegramId) {
        try {
          const response = await authenticatedFetch(
            '/api/profile?action=add_experience',
            {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                telegramId: currentUser.telegramId,
                experiencePoints: 25, // EXPERIENCE_REWARDS.SHARE_GARDEN
                reason: 'share_garden: text description shared',
              }),
            }
          )

          if (response.ok) {
            console.log('üèÜ Added XP for sharing garden text')
            showAlert('üèÜ +25 XP –∑–∞ —à–µ—Ä–∏–Ω–≥ —Å–∞–¥–∞!')
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to add XP for garden text share:', error)
        }
      }
    } catch {
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    }
  }, [webApp, hapticFeedback, generateGardenDescription, showAlert])

  // –®–∞—Ä–∏–Ω–≥ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–¥–∞
  const handleShareImage = useCallback(async () => {
    if (!onCapture) {
      showAlert('–§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
      return
    }

    setIsCapturing(true)
    hapticFeedback('medium')

    try {
      const imageUrl = await onCapture()
      setLastSharedImage(imageUrl)

      const description = generateGardenDescription()
      shareGarden(imageUrl, description)

      hapticFeedback('success')
    } catch {
      hapticFeedback('error')
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
    } finally {
      setIsCapturing(false)
    }
  }, [
    onCapture,
    hapticFeedback,
    generateGardenDescription,
    shareGarden,
    showAlert,
  ])

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
  const handleCopyLink = useCallback(async () => {
    const botLink = 'https://t.me/KiraKiraGardenBot?startapp'

    try {
      await navigator.clipboard.writeText(botLink)
      hapticFeedback('success')
      showAlert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
    } catch (error) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      if (webApp) {
        webApp.showPopup(
          {
            title: '–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞',
            message: botLink,
            buttons: [
              { id: 'copy', type: 'default', text: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å' },
              { id: 'close', type: 'close', text: '–ó–∞–∫—Ä—ã—Ç—å' },
            ],
          },
          buttonId => {
            if (buttonId === 'copy') {
              showAlert('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é')
            }
          }
        )
      }
    }
  }, [hapticFeedback, showAlert, webApp])

  // –®–∞—Ä–∏–Ω–≥ –≤ Stories
  const handleShareToStory = useCallback(() => {
    if (!webApp || !lastSharedImage) {
      showAlert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–¥–∞')
      return
    }

    try {
      hapticFeedback('light')
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ shareToStory
      if (
        'shareToStory' in webApp &&
        typeof webApp.shareToStory === 'function'
      ) {
        ;(webApp as any).shareToStory(lastSharedImage)
      } else {
        showAlert('Stories –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Telegram')
      }
    } catch {
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Stories')
    }
  }, [webApp, lastSharedImage, hapticFeedback, showAlert])

  // Invite –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ inline query
  const handleInviteFriends = useCallback(() => {
    if (!webApp) return

    hapticFeedback('light')
    const inviteText = `üå∏ –ü–æ–ø—Ä–æ–±—É–π KiraKira ‚Äî —Å–æ–∑–¥–∞–π —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥!`

    webApp.switchInlineQuery(inviteText, ['users', 'groups'])
  }, [webApp, hapticFeedback])

  if (!isTelegramEnv) {
    return (
      <Card className="p-6 text-center">
        <Share2 className="mx-auto mb-4 h-12 w-12 text-blue-500" />
        <h3 className="mb-2 text-lg font-semibold">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º</h3>
        <p className="text-gray-600">
          –§—É–Ω–∫—Ü–∏–∏ —à–∞—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Telegram Mini App
        </p>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', stiffness: 200 }}
          className="mb-4"
        >
          <Share2 className="mx-auto h-16 w-16 text-blue-500" />
        </motion.div>
        <h2 className="mb-2 text-2xl font-bold">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º</h2>
        <p className="text-gray-600">
          –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥ –¥—Ä—É–∑—å—è–º –∏ —Å–µ–º—å–µ
        </p>
      </div>

      <div className="grid gap-4">
        {/* –®–∞—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–º */}
        <Card className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-shrink-0 rounded-lg bg-blue-100 p-3 dark:bg-blue-900/30">
              <MessageCircle className="h-6 w-6 text-blue-600" />
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ–º</h3>
              <p className="text-sm text-gray-600">
                –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞
              </p>
            </div>
            <Button
              onClick={handleShareText}
              size="sm"
              variant="outline"
              className="flex-shrink-0"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
          </div>
        </Card>

        {/* –®–∞—Ä–∏–Ω–≥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º */}
        <Card className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-shrink-0 rounded-lg bg-green-100 p-3 dark:bg-green-900/30">
              <Camera className="h-6 w-6 text-green-600" />
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold">–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–¥–∞</h3>
              <p className="text-sm text-gray-600">
                –°–¥–µ–ª–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —Å–Ω–∏–º–æ–∫ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞
              </p>
            </div>
            <Button
              onClick={handleShareImage}
              size="sm"
              disabled={isCapturing || !onCapture}
              className="flex-shrink-0"
            >
              {isCapturing ? (
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                >
                  <Camera className="h-4 w-4" />
                </motion.div>
              ) : (
                '–°–Ω–∏–º–æ–∫'
              )}
            </Button>
          </div>
        </Card>

        {/* Stories */}
        {lastSharedImage && (
          <Card className="p-4">
            <div className="flex items-center space-x-4">
              <div className="flex-shrink-0 rounded-lg bg-purple-100 p-3 dark:bg-purple-900/30">
                <Heart className="h-6 w-6 text-purple-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="font-semibold">Stories</h3>
                <p className="text-sm text-gray-600">
                  –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ Telegram Stories
                </p>
              </div>
              <Button
                onClick={handleShareToStory}
                size="sm"
                variant="outline"
                className="flex-shrink-0 bg-purple-50 hover:bg-purple-100"
              >
                –í Stories
              </Button>
            </div>
          </Card>
        )}

        {/* –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π */}
        <Card className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-shrink-0 rounded-lg bg-orange-100 p-3 dark:bg-orange-900/30">
              <Share2 className="h-6 w-6 text-orange-600" />
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</h3>
              <p className="text-sm text-gray-600">
                –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å KiraKira —Å –¥—Ä—É–∑—å—è–º–∏
              </p>
            </div>
            <Button
              onClick={handleInviteFriends}
              size="sm"
              variant="outline"
              className="flex-shrink-0"
            >
              –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
            </Button>
          </div>
        </Card>

        {/* –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É */}
        <Card className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-shrink-0 rounded-lg bg-gray-100 p-3 dark:bg-gray-800">
              <Copy className="h-6 w-6 text-gray-600" />
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞</h3>
              <p className="text-sm text-gray-600">
                –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
              </p>
            </div>
            <Button
              onClick={handleCopyLink}
              size="sm"
              variant="outline"
              className="flex-shrink-0"
            >
              –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </div>
        </Card>
      </div>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è */}
      <Card className="border-dashed p-4">
        <h4 className="mb-2 font-medium text-gray-700">
          –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:
        </h4>
        <div className="rounded-lg bg-gray-50 p-3 text-sm dark:bg-gray-800">
          <p className="whitespace-pre-line">{generateGardenDescription()}</p>
        </div>
      </Card>
    </div>
  )
}
