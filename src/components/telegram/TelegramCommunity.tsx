import { useCallback, useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  Users,
  Trophy,
  Heart,
  Sparkles,
  Target,
  Zap,
  Calendar,
} from 'lucide-react'
import { useTelegram } from '@/hooks'
import { Button, Card } from '@/components/ui'
import { FriendsList } from './FriendsList'
import { useUserStore } from '@/stores'
import type { Garden, MoodEntry } from '@/types'

interface Challenge {
  id: string
  title: string
  description: string
  emoji: string
  duration: number // –≤ –¥–Ω—è—Ö
  participants: number
  isActive: boolean
  type: 'personal' | 'group' | 'competitive'
  reward?: string
}

interface TelegramCommunityProps {
  garden: Garden | null
  recentMoods: readonly MoodEntry[]
}

const ACTIVE_CHALLENGES: Challenge[] = [
  {
    id: 'mood_streak_7',
    title: '7 –¥–Ω–µ–π —ç–º–æ—Ü–∏–π',
    description: '–û—Ç–º–µ—á–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
    emoji: 'üî•',
    duration: 7,
    participants: 42,
    isActive: true,
    type: 'personal',
    reward: '–û—Å–æ–±—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–∞–¥–∞',
  },
  {
    id: 'garden_competition',
    title: '–ë–∏—Ç–≤–∞ —Å–∞–¥–æ–≤',
    description: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: –∫—Ç–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é?',
    emoji: 'üèÜ',
    duration: 7,
    participants: 18,
    isActive: true,
    type: 'competitive',
    reward: '–¢–∏—Ç—É–ª "–°–∞–¥–æ–≤–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏"',
  },
  {
    id: 'mindfulness_week',
    title: '–ù–µ–¥–µ–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
    description: '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
    emoji: 'üßò‚Äç‚ôÄÔ∏è',
    duration: 7,
    participants: 156,
    isActive: true,
    type: 'group',
    reward: '–ì—Ä—É–ø–ø–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
  },
]

// –†–µ–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ FriendsList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

export function TelegramCommunity({
  garden,
  recentMoods,
}: TelegramCommunityProps) {
  const { webApp, hapticFeedback, showAlert, isTelegramEnv } = useTelegram()
  const { currentUser } = useUserStore()
  const [activeTab, setActiveTab] = useState<
    'challenges' | 'social' | 'groups'
  >('challenges')
  const [joinedChallenges, setJoinedChallenges] = useState<string[]>([])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö
  useEffect(() => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
    setJoinedChallenges(['mood_streak_7'])
  }, [])

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
  const handleJoinChallenge = useCallback(
    (challenge: Challenge) => {
      if (!webApp) return

      hapticFeedback('light')

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º inline query –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
      webApp.switchInlineQuery(
        `challenge_${challenge.id}`,
        challenge.type === 'group' ? ['groups', 'users'] : ['users']
      )

      // –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
      setJoinedChallenges(prev => [...prev, challenge.id])
      showAlert(`–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É "${challenge.title}"!`)
    },
    [webApp, hapticFeedback, showAlert]
  )

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const handleShareProgress = useCallback(
    (challenge: Challenge) => {
      if (!webApp || !garden) return

      hapticFeedback('medium')

      const progressText = `üéØ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —á–µ–ª–ª–µ–Ω–∂–µ "${challenge.title}"\n\nüå± –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∞–¥—É: ${garden.elements.length}\nüìà –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${recentMoods.length}\n\nüí™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ KiraKira!`

      webApp.shareMessage({
        text: progressText,
        parse_mode: 'Markdown',
      })
    },
    [webApp, hapticFeedback, garden, recentMoods]
  )

  // –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∞–¥
  const handleCreateGroupGarden = useCallback(() => {
    if (!webApp) return

    hapticFeedback('medium')
    showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ —á–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Å–∞–¥–∞!')

    webApp.switchInlineQuery('group_garden_create', ['groups'])
  }, [webApp, hapticFeedback, showAlert])

  // –†–µ–∞–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ FriendsList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ

  if (!isTelegramEnv) {
    return (
      <Card className="p-6 text-center">
        <Users className="mx-auto mb-4 h-12 w-12 text-blue-500" />
        <h3 className="mb-2 text-lg font-semibold">–ö–æ–º—å—é–Ω–∏—Ç–∏</h3>
        <p className="text-gray-600">
          –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Telegram Mini App
        </p>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', stiffness: 200 }}
          className="mb-4"
        >
          <Users className="mx-auto h-16 w-16 text-blue-500" />
        </motion.div>
        <h2 className="mb-2 text-2xl font-bold">–ö–æ–º—å—é–Ω–∏—Ç–∏</h2>
        <p className="text-gray-600">
          –î–µ–ª–∏—Ç–µ—Å—å —ç–º–æ—Ü–∏—è–º–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–∑–µ–π
        </p>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="flex space-x-1 rounded-lg bg-gray-100 p-1 dark:bg-gray-800">
        {[
          { id: 'challenges', label: '–ß–µ–ª–ª–µ–Ω–¥–∂–∏', icon: Target },
          { id: 'social', label: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', icon: Heart },
          { id: 'groups', label: '–ì—Ä—É–ø–ø—ã', icon: Users },
        ].map(tab => {
          const Icon = tab.icon
          return (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex flex-1 items-center justify-center space-x-2 rounded-md px-3 py-2 text-sm font-medium transition-colors ${
                activeTab === tab.id
                  ? 'bg-white text-blue-600 shadow-sm dark:bg-gray-700 dark:text-blue-400'
                  : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200'
              }`}
            >
              <Icon className="h-4 w-4" />
              <span>{tab.label}</span>
            </button>
          )
        })}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      <AnimatePresence mode="wait">
        {activeTab === 'challenges' && (
          <motion.div
            key="challenges"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <div className="mb-4 text-center">
              <h3 className="text-lg font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</h3>
              <p className="text-sm text-gray-600">
                –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≤—ã–∑–æ–≤–∞—Ö –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏
              </p>
            </div>

            {ACTIVE_CHALLENGES.map((challenge, index) => (
              <motion.div
                key={challenge.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className="p-4">
                  <div className="flex items-start space-x-4">
                    <div className="text-3xl">{challenge.emoji}</div>
                    <div className="min-w-0 flex-1">
                      <div className="flex items-center space-x-2">
                        <h4 className="font-semibold">{challenge.title}</h4>
                        <span
                          className={`rounded-full px-2 py-1 text-xs ${
                            challenge.type === 'competitive'
                              ? 'bg-red-100 text-red-700'
                              : challenge.type === 'group'
                                ? 'bg-blue-100 text-blue-700'
                                : 'bg-green-100 text-green-700'
                          }`}
                        >
                          {challenge.type === 'competitive'
                            ? '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ'
                            : challenge.type === 'group'
                              ? '–ì—Ä—É–ø–ø–æ–≤–æ–π'
                              : '–õ–∏—á–Ω—ã–π'}
                        </span>
                      </div>
                      <p className="mt-1 text-sm text-gray-600">
                        {challenge.description}
                      </p>
                      <div className="mt-2 flex items-center space-x-4 text-xs text-gray-500">
                        <span className="flex items-center space-x-1">
                          <Users className="h-3 w-3" />
                          <span>{challenge.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                        </span>
                        <span className="flex items-center space-x-1">
                          <Calendar className="h-3 w-3" />
                          <span>{challenge.duration} –¥–Ω–µ–π</span>
                        </span>
                        {challenge.reward && (
                          <span className="flex items-center space-x-1">
                            <Trophy className="h-3 w-3" />
                            <span>{challenge.reward}</span>
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="flex flex-col space-y-2">
                      {joinedChallenges.includes(challenge.id) ? (
                        <>
                          <Button
                            size="sm"
                            variant="outline"
                            className="bg-green-50 text-green-700 hover:bg-green-100"
                            disabled
                          >
                            –£—á–∞—Å—Ç–≤—É—é ‚úì
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleShareProgress(challenge)}
                          >
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                          </Button>
                        </>
                      ) : (
                        <Button
                          size="sm"
                          onClick={() => handleJoinChallenge(challenge)}
                          className="bg-blue-500 hover:bg-blue-600"
                        >
                          –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                        </Button>
                      )}
                    </div>
                  </div>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        )}

        {activeTab === 'social' && (
          <motion.div
            key="social"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            {/* –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π */}
            <FriendsList currentUser={currentUser} />
          </motion.div>
        )}

        {activeTab === 'groups' && (
          <motion.div
            key="groups"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <div className="mb-4 text-center">
              <h3 className="text-lg font-semibold">–ì—Ä—É–ø–ø–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
              <p className="text-sm text-gray-600">
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Å–∞–¥—ã –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
              </p>
            </div>

            {/* –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∞–¥ */}
            <Card className="p-4">
              <div className="flex items-center space-x-4">
                <div className="flex-shrink-0 rounded-lg bg-purple-100 p-3 dark:bg-purple-900/30">
                  <Sparkles className="h-6 w-6 text-purple-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <h4 className="font-medium">–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∞–¥</h4>
                  <p className="text-sm text-gray-600">
                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –¥—Ä—É–∑–µ–π —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–¥
                  </p>
                </div>
                <Button
                  onClick={handleCreateGroupGarden}
                  className="flex-shrink-0 bg-purple-500 hover:bg-purple-600"
                >
                  –°–æ–∑–¥–∞—Ç—å
                </Button>
              </div>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö */}
            <Card className="border-dashed p-4">
              <div className="text-center">
                <Zap className="mx-auto mb-3 h-8 w-8 text-yellow-500" />
                <h4 className="mb-2 font-medium">–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!</h4>
                <p className="text-sm text-gray-600">
                  –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —Å–∞–¥–∞–º–∏, —Å–µ–º–µ–π–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏ –∏
                  —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                </p>
              </div>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
