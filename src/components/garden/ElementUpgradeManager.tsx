/**
 * üéõÔ∏è –ö–û–ú–ü–û–ù–ï–ù–¢: ElementUpgradeManager
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —É–ª—É—á—à–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–Ω–æ–ø–∫–∞ + –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞)
 */

import { useState, useCallback, useRef } from 'react'
import type { GardenElement, RarityLevel } from '@/types/garden'
import { useCurrencyClientStore } from '@/stores/currencyStore'
import {
  useUserSync,
  useElementUpgradeInfo,
  useUpgradeElement,
} from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import { ElementUpgradeButton } from './ElementUpgradeButton'
import { UpgradeConfirmModal } from './UpgradeConfirmModal'
import { UpgradeResultModal } from './UpgradeResultModal'

export interface ElementUpgradeManagerProps {
  readonly element: GardenElement
  readonly onUpgradeSuccess?: (newRarity: RarityLevel, xpReward: number) => void
  readonly onUpgradeComplete?: () => void
}

export function ElementUpgradeManager({
  element,
  onUpgradeSuccess,
  onUpgradeComplete,
}: ElementUpgradeManagerProps) {
  const { userCurrency } = useCurrencyClientStore()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ React Query
  const telegramId = useTelegramId()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const currentUser = userData?.user

  // React Query —Ö—É–∫–∏ –¥–ª—è upgrade —Ñ—É–Ω–∫—Ü–∏–π
  const { data: upgradeInfo } = useElementUpgradeInfo(
    currentUser?.telegramId,
    element.id,
    !!currentUser?.telegramId
  )
  const upgradeElementMutation = useUpgradeElement()

  const [showConfirmModal, setShowConfirmModal] = useState(false)
  const [showResultModal, setShowResultModal] = useState(false)
  const [upgradeResult, setUpgradeResult] = useState<{
    success: boolean
    newRarity?: RarityLevel
    xpReward?: number
    progressBonus?: number
    failedAttempts?: number
  } | null>(null)
  const [isUpgrading, setIsUpgrading] = useState(false)

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const isProcessingRef = useRef(false)

  // üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const [resultModalKey, setResultModalKey] = useState(0)

  // üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –º–æ–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –º–æ–¥–∞–ª–∫–∏
  const upgradeElementRef = useRef<GardenElement>(element)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ React Query
  const progressBonus = upgradeInfo?.progressBonus ?? 0
  const failedAttempts = upgradeInfo?.failedAttempts ?? 0

  const handleOpenConfirm = useCallback(() => {
    setShowConfirmModal(true)
  }, [])

  const handleCloseConfirm = useCallback(() => {
    setShowConfirmModal(false)
  }, [])

  const handleConfirmUpgrade = useCallback(
    async (useFree: boolean) => {
      if (!currentUser?.telegramId || isProcessingRef.current) return

      // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
      isProcessingRef.current = true
      // üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      upgradeElementRef.current = element
      setShowConfirmModal(false)
      setIsUpgrading(true)

      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ React Query
        const result = await upgradeElementMutation.mutateAsync({
          telegramId: currentUser.telegramId,
          elementId: element.id,
          useFree,
        })

        // üîÑ –í–ê–õ–Æ–¢–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–¢–°–Ø –ß–ï–†–ï–ó React Query
        // useCurrencySync() –≤ MobileLayout –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç store
        console.log('‚úÖ Currency will sync automatically via React Query')

        if (result) {
          // üéâ –£–°–ü–ï–• - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —ç–ª–µ–º–µ–Ω—Ç–∞
          if (result.upgraded && result.newRarity !== undefined) {
            console.log(
              '‚úÖ Element upgraded successfully, showing success overlay'
            )
            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–≤–µ—Ä–ª–µ—è
            if (onUpgradeSuccess) {
              onUpgradeSuccess(result.newRarity, result.xpReward ?? 0)
            }
          } else {
            // ‚ùå –ù–ï–£–î–ê–ß–ê - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            console.log('‚ùå Upgrade failed, showing failure modal')
            setUpgradeResult({
              success: false,
              progressBonus: result.progressBonus ?? 0,
              failedAttempts: result.failedAttempts ?? 0,
            })
            // üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            setResultModalKey(prev => prev + 1)
            setShowResultModal(true)
          }
        }
      } catch (error) {
        console.error('Failed to upgrade element:', error)
        setUpgradeResult({
          success: false,
        })
        setShowResultModal(true)
      } finally {
        setIsUpgrading(false)
        // üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        setTimeout(() => {
          isProcessingRef.current = false
        }, 500)
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [currentUser?.telegramId, element.id, upgradeElementMutation]
    // element –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ deps –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  )

  const handleCloseResult = useCallback(() => {
    console.log('üö™ Closing upgrade result modal')
    setShowResultModal(false)
    setUpgradeResult(null)

    if (onUpgradeComplete) {
      console.log('üìû Calling onUpgradeComplete callback')
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          onUpgradeComplete()
        })
      })
    }
  }, [onUpgradeComplete])

  return (
    <>
      <ElementUpgradeButton
        element={element}
        progressBonus={progressBonus}
        onUpgrade={handleOpenConfirm}
        isLoading={isUpgrading}
      />

      <UpgradeConfirmModal
        isOpen={showConfirmModal}
        onClose={handleCloseConfirm}
        onConfirm={useFree => {
          void handleConfirmUpgrade(useFree)
        }}
        element={element}
        progressBonus={progressBonus}
        failedAttempts={failedAttempts}
        hasFreeUpgrades={(currentUser?.stats?.freeUpgrades ?? 0) > 0}
        currentSprouts={userCurrency?.sprouts ?? 0}
        isLoading={isUpgrading}
      />

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ—É–¥–∞—á–∏ */}
      {upgradeResult !== null &&
        upgradeResult !== undefined &&
        !upgradeResult.success && (
          <UpgradeResultModal
            key={`upgrade-result-${resultModalKey}`}
            isOpen={showResultModal}
            onClose={handleCloseResult}
            success={false}
            element={upgradeElementRef.current}
            oldRarity={upgradeElementRef.current.rarity}
            progressBonus={upgradeResult.progressBonus ?? 0}
            failedAttempts={upgradeResult.failedAttempts ?? 0}
          />
        )}
    </>
  )
}
