/**
 * üéõÔ∏è –ö–û–ú–ü–û–ù–ï–ù–¢: ElementUpgradeManager
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —É–ª—É—á—à–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–Ω–æ–ø–∫–∞ + –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞)
 */

import { useState } from 'react'
import type { GardenElement, RarityLevel } from '@/types/garden'
import { useCurrencyStore } from '@/stores'
import {
  useUserSync,
  useElementUpgradeInfo,
  useUpgradeElement,
} from '@/hooks/index.v2'
import { ElementUpgradeButton } from './ElementUpgradeButton'
import { UpgradeConfirmModal } from './UpgradeConfirmModal'
import { UpgradeResultModal } from './UpgradeResultModal'

interface ElementUpgradeManagerProps {
  readonly element: GardenElement
}

export function ElementUpgradeManager({ element }: ElementUpgradeManagerProps) {
  const { userCurrency } = useCurrencyStore()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ React Query
  const { data: userData } = useUserSync(undefined, false)
  const currentUser = userData?.user

  // React Query —Ö—É–∫–∏ –¥–ª—è upgrade —Ñ—É–Ω–∫—Ü–∏–π
  const { data: upgradeInfo } = useElementUpgradeInfo(
    currentUser?.telegramId,
    element.id,
    !!currentUser?.telegramId
  )
  const upgradeElementMutation = useUpgradeElement()

  const [showConfirmModal, setShowConfirmModal] = useState(false)
  const [showResultModal, setShowResultModal] = useState(false)
  const [upgradeResult, setUpgradeResult] = useState<{
    success: boolean
    newRarity?: RarityLevel
    xpReward?: number
    progressBonus?: number
    failedAttempts?: number
  } | null>(null)
  const [isUpgrading, setIsUpgrading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ React Query
  const progressBonus = upgradeInfo?.progressBonus ?? 0
  const failedAttempts = upgradeInfo?.failedAttempts ?? 0

  const handleOpenConfirm = () => {
    setShowConfirmModal(true)
  }

  const handleCloseConfirm = () => {
    setShowConfirmModal(false)
  }

  const handleConfirmUpgrade = async (useFree: boolean) => {
    if (!currentUser?.telegramId) return

    setShowConfirmModal(false)
    setIsUpgrading(true)

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ React Query
      const result = await upgradeElementMutation.mutateAsync({
        telegramId: currentUser.telegramId,
        elementId: element.id,
        useFree,
      })

      // üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –í–ê–õ–Æ–¢–£ –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–Ø
      try {
        const { loadCurrency } = useCurrencyStore.getState()
        await loadCurrency(currentUser.telegramId)
        console.log('‚úÖ Currency synced after element upgrade')
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to sync currency after upgrade:', error)
      }

      if (result) {
        setUpgradeResult({
          success: result.upgraded,
          ...(result.newRarity !== undefined && {
            newRarity: result.newRarity,
          }),
          ...(result.upgraded && { xpReward: result.xpReward }),
          progressBonus: result.progressBonus ?? 0,
          failedAttempts: result.failedAttempts ?? 0,
        })
        setShowResultModal(true)

        // üéâ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë–ù–û–í–õ–Ø–ï–¢–°–Ø –ü–†–Ø–ú–û –ù–ê –°–¢–†–ê–ù–ò–¶–ï –≠–õ–ï–ú–ï–ù–¢–ê
        if (result.upgraded) {
          console.log('‚úÖ Element details will be updated automatically')
        }
      }
    } catch (error) {
      console.error('Failed to upgrade element:', error)
      setUpgradeResult({
        success: false,
      })
      setShowResultModal(true)
    } finally {
      setIsUpgrading(false)
    }
  }

  const handleCloseResult = () => {
    setShowResultModal(false)
    setUpgradeResult(null)
  }

  return (
    <>
      <ElementUpgradeButton
        element={element}
        progressBonus={progressBonus}
        onUpgrade={handleOpenConfirm}
        isLoading={isUpgrading}
      />

      <UpgradeConfirmModal
        isOpen={showConfirmModal}
        onClose={handleCloseConfirm}
        onConfirm={handleConfirmUpgrade}
        element={element}
        progressBonus={progressBonus}
        failedAttempts={failedAttempts}
        hasFreeUpgrades={(currentUser?.stats?.freeUpgrades ?? 0) > 0}
        currentSprouts={userCurrency?.sprouts ?? 0}
        isLoading={isUpgrading}
      />

      {upgradeResult !== null && upgradeResult !== undefined && (
        <UpgradeResultModal
          isOpen={showResultModal}
          onClose={handleCloseResult}
          success={upgradeResult.success}
          element={element}
          oldRarity={element.rarity}
          {...(upgradeResult.newRarity !== undefined && {
            newRarity: upgradeResult.newRarity,
          })}
          {...(upgradeResult.xpReward !== undefined && {
            xpReward: upgradeResult.xpReward,
          })}
          {...(upgradeResult.progressBonus !== undefined && {
            progressBonus: upgradeResult.progressBonus,
          })}
          {...(upgradeResult.failedAttempts !== undefined && {
            failedAttempts: upgradeResult.failedAttempts,
          })}
        />
      )}
    </>
  )
}
