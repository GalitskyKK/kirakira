/**
 * üéõÔ∏è –ö–û–ú–ü–û–ù–ï–ù–¢: ElementUpgradeManager
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —É–ª—É—á—à–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–Ω–æ–ø–∫–∞ + –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞)
 */

import { useState, useCallback, useRef } from 'react'
import type { GardenElement, RarityLevel } from '@/types/garden'
import { useCurrencyStore } from '@/stores'
import {
  useUserSync,
  useElementUpgradeInfo,
  useUpgradeElement,
} from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import { ElementUpgradeButton } from './ElementUpgradeButton'
import { UpgradeConfirmModal } from './UpgradeConfirmModal'
import { UpgradeResultModal } from './UpgradeResultModal'

export interface ElementUpgradeManagerProps {
  readonly element: GardenElement
  readonly onUpgradeComplete?: () => void
}

export function ElementUpgradeManager({
  element,
  onUpgradeComplete,
}: ElementUpgradeManagerProps) {
  const { userCurrency } = useCurrencyStore()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ React Query
  const telegramId = useTelegramId()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const currentUser = userData?.user

  // React Query —Ö—É–∫–∏ –¥–ª—è upgrade —Ñ—É–Ω–∫—Ü–∏–π
  const { data: upgradeInfo } = useElementUpgradeInfo(
    currentUser?.telegramId,
    element.id,
    !!currentUser?.telegramId
  )
  const upgradeElementMutation = useUpgradeElement()

  const [showConfirmModal, setShowConfirmModal] = useState(false)
  const [showResultModal, setShowResultModal] = useState(false)
  const [upgradeResult, setUpgradeResult] = useState<{
    success: boolean
    newRarity?: RarityLevel
    xpReward?: number
    progressBonus?: number
    failedAttempts?: number
  } | null>(null)
  const [isUpgrading, setIsUpgrading] = useState(false)

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const isProcessingRef = useRef(false)

  // üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const [resultModalKey, setResultModalKey] = useState(0)

  // üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –º–æ–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –º–æ–¥–∞–ª–∫–∏
  const upgradeElementRef = useRef<GardenElement>(element)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ React Query
  const progressBonus = upgradeInfo?.progressBonus ?? 0
  const failedAttempts = upgradeInfo?.failedAttempts ?? 0

  const handleOpenConfirm = useCallback(() => {
    setShowConfirmModal(true)
  }, [])

  const handleCloseConfirm = useCallback(() => {
    setShowConfirmModal(false)
  }, [])

  const handleConfirmUpgrade = useCallback(
    async (useFree: boolean) => {
      if (!currentUser?.telegramId || isProcessingRef.current) return

      // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
      isProcessingRef.current = true
      // üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      upgradeElementRef.current = element
      setShowConfirmModal(false)
      setIsUpgrading(true)

      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ React Query
        const result = await upgradeElementMutation.mutateAsync({
          telegramId: currentUser.telegramId,
          elementId: element.id,
          useFree,
        })

        // üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –í–ê–õ–Æ–¢–£ –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–Ø
        try {
          const { loadCurrency } = useCurrencyStore.getState()
          await loadCurrency(currentUser.telegramId)
          console.log('‚úÖ Currency synced after element upgrade')
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to sync currency after upgrade:', error)
        }

        if (result) {
          setUpgradeResult({
            success: result.upgraded,
            ...(result.newRarity !== undefined && {
              newRarity: result.newRarity,
            }),
            ...(result.upgraded && { xpReward: result.xpReward }),
            progressBonus: result.progressBonus ?? 0,
            failedAttempts: result.failedAttempts ?? 0,
          })
          // üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
          setResultModalKey(prev => prev + 1)
          setShowResultModal(true)

          // üéâ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë–ù–û–í–õ–Ø–ï–¢–°–Ø –ü–†–Ø–ú–û –ù–ê –°–¢–†–ê–ù–ò–¶–ï –≠–õ–ï–ú–ï–ù–¢–ê
          if (result.upgraded) {
            console.log(
              '‚úÖ Element details will be updated automatically via React Query invalidation'
            )
          }
        }
      } catch (error) {
        console.error('Failed to upgrade element:', error)
        setUpgradeResult({
          success: false,
        })
        setShowResultModal(true)
      } finally {
        setIsUpgrading(false)
        // üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        setTimeout(() => {
          isProcessingRef.current = false
        }, 500)
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [currentUser?.telegramId, element.id, upgradeElementMutation]
    // element –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ deps –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  )

  const handleCloseResult = useCallback(() => {
    console.log('üö™ Closing upgrade result modal')
    setShowResultModal(false)
    setUpgradeResult(null)

    // üìú –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞–≤–µ—Ä—Ö –ù–ï–ú–ï–î–õ–ï–ù–ù–û
    if (onUpgradeComplete) {
      console.log('üìû Calling onUpgradeComplete callback')
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          onUpgradeComplete()
        })
      })
    }
  }, [onUpgradeComplete])

  return (
    <>
      <ElementUpgradeButton
        element={element}
        progressBonus={progressBonus}
        onUpgrade={handleOpenConfirm}
        isLoading={isUpgrading}
      />

      <UpgradeConfirmModal
        isOpen={showConfirmModal}
        onClose={handleCloseConfirm}
        onConfirm={useFree => {
          void handleConfirmUpgrade(useFree)
        }}
        element={element}
        progressBonus={progressBonus}
        failedAttempts={failedAttempts}
        hasFreeUpgrades={(currentUser?.stats?.freeUpgrades ?? 0) > 0}
        currentSprouts={userCurrency?.sprouts ?? 0}
        isLoading={isUpgrading}
      />

      {upgradeResult !== null && upgradeResult !== undefined && (
        <UpgradeResultModal
          key={`upgrade-result-${resultModalKey}`}
          isOpen={showResultModal}
          onClose={handleCloseResult}
          success={upgradeResult.success}
          element={upgradeElementRef.current}
          oldRarity={upgradeElementRef.current.rarity}
          {...(upgradeResult.newRarity !== undefined && {
            newRarity: upgradeResult.newRarity,
          })}
          {...(upgradeResult.xpReward !== undefined && {
            xpReward: upgradeResult.xpReward,
          })}
          {...(upgradeResult.progressBonus !== undefined && {
            progressBonus: upgradeResult.progressBonus,
          })}
          {...(upgradeResult.failedAttempts !== undefined && {
            failedAttempts: upgradeResult.failedAttempts,
          })}
        />
      )}
    </>
  )
}
