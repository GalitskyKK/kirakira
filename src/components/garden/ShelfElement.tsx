import { memo, useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import { clsx } from 'clsx'
import { PlantRenderer } from './plants'
import type { GardenElement as GardenElementType, ViewMode } from '@/types'
import { MOOD_CONFIG } from '@/types/mood'

interface ShelfElementProps {
  element: GardenElementType
  shelfIndex: number
  position: number
  absoluteX?: number // –ù–û–í–´–ô: —Ç–æ—á–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  isSelected?: boolean
  isDragged?: boolean
  isBeingMoved?: boolean // –≠–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  viewMode: ViewMode
  elementWidth: number
  elementSpacing: number
  onClick?: (element: GardenElementType) => void
  onLongPress?: (element: GardenElementType) => void // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
}

export const ShelfElement = memo(function ShelfElement({
  element,
  shelfIndex,
  position,
  absoluteX, // –ù–û–í–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  isSelected = false,
  isDragged = false,
  isBeingMoved = false,
  viewMode,
  elementWidth,
  elementSpacing,
  onClick,
  onLongPress,
}: ShelfElementProps) {
  const constraintsRef = useRef<HTMLDivElement>(null)
  const [showTooltip, setShowTooltip] = useState(false)
  const [isHovered, setIsHovered] = useState(false)
  const longPressTimerRef = useRef<NodeJS.Timeout | null>(null)
  const [wasLongPress, setWasLongPress] = useState(false) // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
  const touchStartTimeRef = useRef<number>(0) // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ touch

  // Debug: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ wasLongPress
  useEffect(() => {
    console.log('üèÅ wasLongPress changed for', element.name, ':', wasLongPress)
  }, [wasLongPress, element.name])

  // Cleanup timer on unmount
  useEffect(() => {
    return () => {
      if (longPressTimerRef.current) {
        clearTimeout(longPressTimerRef.current)
      }
    }
  }, [])

  const moodConfig = MOOD_CONFIG[element.moodInfluence] || MOOD_CONFIG.joy // Fallback to joy if invalid mood

  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
  const rarityLabels: Record<string, string> = {
    common: '–û–±—ã—á–Ω—ã–π',
    uncommon: '–ù–µ–æ–±—ã—á–Ω—ã–π',
    rare: '–†–µ–¥–∫–∏–π',
    epic: '–≠–ø–∏—á–µ—Å–∫–∏–π',
    legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
  }

  // Debug: console.log('ShelfElement render:', element.name, 'viewMode:', viewMode)

  // Responsive design hook
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 1024) // lg breakpoint
    }

    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Calculate object size based on rarity and screen size (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
  const baseSize = isMobile ? 50 : 65 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
  const rarityBonus =
    element.rarity === 'rare'
      ? isMobile
        ? 12
        : 15
      : element.rarity === 'epic'
        ? isMobile
          ? 20
          : 25
        : element.rarity === 'legendary'
          ? isMobile
            ? 25
            : 35
          : 0

  const objectSize = baseSize + rarityBonus

  // Note: getIsometricTransform removed as it conflicts with drag

  const handleMouseEnter = () => {
    setIsHovered(true)
    setShowTooltip(true)
  }

  const handleMouseLeave = () => {
    console.log(
      'üèÉ Mouse left element:',
      element.name,
      'wasLongPress:',
      wasLongPress
    )
    setIsHovered(false)
    setShowTooltip(false)
    // –ù–ï –æ—Ç–º–µ–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ - –ø–æ–∑–≤–æ–ª—è–µ–º –µ–º—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
    // handleLongPressEnd()
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      console.log('üîÑ Resetting wasLongPress for:', element.name)
      setWasLongPress(false)
    }, 200)
  }

  const handleLongPressStart = () => {
    console.log(
      'Long press started for:',
      element.name,
      'viewMode:',
      viewMode,
      'onLongPress:',
      !!onLongPress,
      'hasActiveTimer:',
      !!longPressTimerRef.current
    )

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    if (longPressTimerRef.current) {
      console.log('üö´ Long press already active, ignoring for:', element.name)
      return
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –≤ –Ω–∞—á–∞–ª–µ
    setWasLongPress(false)
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è touch —Å–æ–±—ã—Ç–∏–π
    touchStartTimeRef.current = Date.now()

    // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ (–∫—Ä–æ–º–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    if (onLongPress && viewMode !== 'detail') {
      console.log('Setting long press timer for:', element.name)
      longPressTimerRef.current = setTimeout(() => {
        console.log('Long press timer fired for:', element.name)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
        if (longPressTimerRef.current) {
          setWasLongPress(true) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º onLongPress
          onLongPress(element)
          console.log('üßπ Long press timer cleared for:', element.name)
        } else {
          console.log(
            'üö´ Long press timer was cancelled, ignoring for:',
            element.name
          )
        }
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        longPressTimerRef.current = null
      }, 1000) // 500ms –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    } else {
      console.log('Long press ignored:', {
        hasOnLongPress: !!onLongPress,
        viewMode,
      })
    }
  }

  // –û—Ç–º–µ–Ω–∞ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
  const handleLongPressCancel = () => {
    if (longPressTimerRef.current) {
      clearTimeout(longPressTimerRef.current)
      longPressTimerRef.current = null
      console.log('üö´ Long press cancelled for:', element.name)
    }
  }

  // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ touchEnd - –æ—Ç–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ
  const handleTouchEnd = () => {
    const touchDuration = Date.now() - touchStartTimeRef.current
    console.log('üì± Touch ended for:', element.name, 'duration:', touchDuration)

    // –û—Ç–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ (–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞)
    if (touchDuration < 50) {
      console.log(
        'üì± Very short touch, cancelling long press for:',
        element.name
      )
      handleLongPressCancel()
    } else {
      console.log(
        'üì± Normal touch duration, keeping long press active for:',
        element.name
      )
    }
  }

  const handleClick = () => {
    const touchDuration = Date.now() - touchStartTimeRef.current
    console.log(
      'handleClick called for:',
      element.name,
      'wasLongPress:',
      wasLongPress,
      'hasActiveTimer:',
      !!longPressTimerRef.current,
      'touchDuration:',
      touchDuration
    )

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    if (wasLongPress) {
      console.log('Click prevented - was long press')
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => setWasLongPress(false), 100)
      return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è - —ç—Ç–æ –û–ë–´–ß–ù–´–ô –∫–ª–∏–∫, –æ—Ç–º–µ–Ω—è–µ–º long press
    if (longPressTimerRef.current) {
      console.log('üö´ Normal click detected - cancelling long press timer')
      handleLongPressCancel()

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º –∫–ª–∏–∫–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫
      if (touchDuration < 300) {
        // –ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫
        if (onClick) {
          console.log(
            'Executing normal click after cancelling long press for:',
            element.name
          )
          onClick(element)
        }
      } else {
        console.log('Touch too long, not executing click for:', element.name)
      }
      return
    }

    // –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    if (onClick && touchDuration < 300) {
      console.log('Executing normal click for:', element.name)
      onClick(element)
    } else {
      console.log('Click ignored - touch too long:', touchDuration)
    }
  }

  return (
    <motion.div
      ref={constraintsRef}
      className={clsx(
        'shelf-object flex select-none flex-col items-center justify-end',
        'transition-all duration-200',
        'cursor-pointer', // –í—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        isSelected && 'z-20',
        isDragged && 'z-30',
        isBeingMoved &&
          'pointer-events-none z-40 scale-110 ring-2 ring-blue-400 ring-opacity-60',
        absoluteX !== undefined ? 'absolute' : 'relative' // –ê–ë–°–û–õ–Æ–¢–ù–û–ï –∏–ª–∏ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û–ï –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      )}
      style={{
        width: elementWidth,
        height: objectSize + 20, // Extra space for 3D effect
        transformStyle: 'preserve-3d',
        touchAction: 'none', // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∂–µ—Å—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
        // –¢–û–ß–ù–û–ï –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –ª–∏–±–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ, –ª–∏–±–æ —Å—Ç–∞—Ä–æ–µ —Å marginLeft
        ...(absoluteX !== undefined
          ? {
              left: absoluteX,
              bottom: 0,
            }
          : {
              marginLeft: position === 0 ? 0 : elementSpacing,
            }),
      }}
      // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ drag-and-drop
      onClick={handleClick}
      onMouseDown={handleLongPressStart}
      onMouseUp={handleLongPressCancel} // –û—Ç–º–µ–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –º—ã—à–∏
      onTouchStart={handleLongPressStart}
      onTouchEnd={handleTouchEnd} // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ touchEnd
      onContextMenu={e => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        if (onLongPress && viewMode !== 'detail') {
          e.preventDefault()
          console.log('üö´ Prevented context menu for:', element.name)
        }
      }}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      initial={{
        opacity: 0,
        y: 30,
        scale: 0.5,
        rotateX: 45,
      }}
      animate={{
        opacity: 1,
        y: 0,
        scale: 1,
        rotateX: 0,
        // Don't set transform in animate as it conflicts with drag
        filter: isSelected
          ? `brightness(1.2) drop-shadow(0 8px 25px ${moodConfig.color}40)`
          : 'brightness(1) drop-shadow(0 4px 12px rgba(0,0,0,0.15))',
      }}
      whileHover={{
        scale: 1.05,
        y: -4,
        filter: `brightness(1.1) drop-shadow(0 8px 20px ${moodConfig.color}25)`,
      }}
      whileTap={{ scale: 0.95 }}
      whileDrag={{
        scale: 1.2,
        y: -15,
        zIndex: 30,
        rotateZ: [0, 5, -5, 0],
        filter: `brightness(1.3) drop-shadow(0 20px 40px ${moodConfig.color}50)`,
        transition: {
          duration: 0.1,
          rotateZ: { repeat: Infinity, duration: 0.5 },
        },
      }}
      transition={{
        type: 'spring',
        stiffness: 400,
        damping: 25,
        delay: position * 0.08 + shelfIndex * 0.15, // Stagger animation
      }}
    >
      {/* Main object container - centered in flex container */}
      <motion.div
        className="object-container relative flex items-center justify-center"
        style={{
          width: objectSize,
          height: objectSize,
          transformStyle: 'preserve-3d',
        }}
        animate={{
          y: isHovered ? -2 : 0,
        }}
        transition={{ duration: 0.3 }}
      >
        {/* PlantRenderer for the actual object */}
        <PlantRenderer
          element={element}
          size={objectSize}
          isSelected={isSelected}
          isHovered={isHovered}
          showTooltip={false} // We'll handle tooltip separately
          onClick={() => {}} // Handled by parent container
        />

        {/* Enhanced isometric base platform for object */}
        <motion.div
          className="object-base absolute -z-10"
          style={{
            width: objectSize * 0.7, // –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            height: objectSize * 0.18, // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            background: `linear-gradient(135deg, 
              rgba(139, 69, 19, 0.4) 0%,
              rgba(160, 82, 45, 0.3) 50%,
              rgba(101, 67, 33, 0.4) 100%
            )`,
            borderRadius: '50%',
            transform: 'perspective(120px) rotateX(75deg)',
            boxShadow: '0 1px 3px rgba(0,0,0,0.2)', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–Ω—å –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            bottom: 0,
            left: '50%',
            marginLeft: -(objectSize * 0.7) / 2, // Center the platform
          }}
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.5, delay: position * 0.1 + 0.3 }}
        />
      </motion.div>

      {/* Enhanced object shadow on shelf - now BELOW the object */}
      <motion.div
        className="object-shadow relative"
        style={{
          width: objectSize * 0.9, // –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∞—è —Ç–µ–Ω—å
          height: objectSize * 0.25, // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ç–µ–Ω—å
          background:
            'radial-gradient(ellipse, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.2) 40%, transparent 70%)',
          borderRadius: '50%',
          marginTop: -objectSize * 0.15, // Overlap with object from below
        }}
        initial={{ scaleX: 0, opacity: 0 }}
        animate={{
          scaleX: 1,
          opacity: isHovered ? 0.6 : 0.4, // –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç–µ–Ω—å
        }}
        transition={{ duration: 0.4, delay: position * 0.1 }}
      />

      {/* Enhanced selection aura */}
      {isSelected && (
        <motion.div
          className="selection-aura absolute"
          style={{
            width: objectSize + 30, // –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∞—è –∞—É—Ä–∞
            height: objectSize + 30,
            background: `conic-gradient(from 0deg, ${moodConfig.color}50, transparent, ${moodConfig.color}50)`,
            borderRadius: '50%',
            bottom: '-15px', // –ù–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–ª—è –æ–±—ä–µ–º–Ω–æ—Å—Ç–∏
            left: '50%',
            marginLeft: -(objectSize + 30) / 2, // Center the aura
          }}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{
            opacity: [0.4, 0.8, 0.4],
            scale: [1, 1.15, 1],
            rotate: [0, 360],
          }}
          transition={{
            opacity: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
            scale: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
            rotate: { repeat: Infinity, duration: 4, ease: 'linear' },
          }}
        />
      )}

      {/* Magical effects for rare items */}
      {(element.rarity === 'epic' || element.rarity === 'legendary') && (
        <motion.div
          className="magical-effects pointer-events-none absolute inset-0"
          initial={{ opacity: 0 }}
          animate={{ opacity: 0.8 }}
          transition={{ delay: 0.8 }}
        >
          {/* Floating sparkles around object */}
          {Array.from(
            { length: element.rarity === 'legendary' ? 6 : 3 },
            (_, i) => {
              const angle = (i * 360) / (element.rarity === 'legendary' ? 6 : 3)
              const radius = objectSize * 0.6
              return (
                <motion.div
                  key={`sparkle-${i}`}
                  className="absolute"
                  style={{
                    left: '50%',
                    top: '50%',
                    width: '4px',
                    height: '4px',
                  }}
                  animate={{
                    x: [
                      Math.cos((angle * Math.PI) / 180) * radius,
                      Math.cos(((angle + 120) * Math.PI) / 180) * radius,
                      Math.cos(((angle + 240) * Math.PI) / 180) * radius,
                      Math.cos((angle * Math.PI) / 180) * radius,
                    ],
                    y: [
                      Math.sin((angle * Math.PI) / 180) * radius * 0.5,
                      Math.sin(((angle + 120) * Math.PI) / 180) * radius * 0.5,
                      Math.sin(((angle + 240) * Math.PI) / 180) * radius * 0.5,
                      Math.sin((angle * Math.PI) / 180) * radius * 0.5,
                    ],
                    scale: [0.5, 1, 0.5],
                    opacity: [0.3, 1, 0.3],
                  }}
                  transition={{
                    duration: 4 + i * 0.5,
                    repeat: Infinity,
                    ease: 'easeInOut',
                  }}
                >
                  <div className="h-full w-full rounded-full bg-gradient-to-r from-yellow-300 to-amber-400" />
                </motion.div>
              )
            }
          )}
        </motion.div>
      )}

      {/* Seasonal decorations */}
      {element.seasonalVariant === 'winter' && (
        <motion.div
          className="seasonal-decoration pointer-events-none absolute -top-4 left-1/2 -translate-x-1/2 text-sm"
          animate={{
            y: [0, -6, 0],
            x: [0, 2, -2, 0],
            opacity: [0.6, 1, 0.6],
          }}
          transition={{ repeat: Infinity, duration: 3 }}
        >
          ‚ùÑÔ∏è
        </motion.div>
      )}

      {element.seasonalVariant === 'autumn' && (
        <motion.div
          className="seasonal-decoration pointer-events-none absolute -top-3 right-2 text-sm"
          animate={{
            rotate: [0, 15, -15, 0],
            y: [0, 3, 0],
          }}
          transition={{ repeat: Infinity, duration: 4 }}
        >
          üçÇ
        </motion.div>
      )}

      {/* Tooltip */}
      {showTooltip && !isDragged && (
        <motion.div
          className="tooltip pointer-events-none absolute z-50"
          style={{
            top: '-64px', // -16 * 4px
            left: '50%',
            marginLeft: '-80px', // Approximate half width for centering
          }}
          initial={{ opacity: 0, y: 10, scale: 0.8 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: 10, scale: 0.8 }}
          transition={{ duration: 0.2 }}
        >
          <div className="rounded-lg bg-gray-900 px-3 py-2 text-xs text-white shadow-lg backdrop-blur-sm">
            <div className="font-semibold">{element.name}</div>
            <div className="text-gray-300">{moodConfig.label}</div>
            {element.rarity !== 'common' && (
              <div className="text-yellow-300">
                ‚≠ê {rarityLabels[element.rarity] ?? element.rarity}
              </div>
            )}

            {/* Tooltip arrow */}
            <div className="absolute left-1/2 top-full -translate-x-1/2 border-4 border-transparent border-t-gray-900" />
          </div>
        </motion.div>
      )}

      {/* Enhanced click ripple effect */}
      <motion.div
        className="click-ripple absolute rounded-full border-2 border-white/60"
        style={{
          width: objectSize + 15, // –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π ripple
          height: objectSize + 15,
          bottom: 0,
          left: '50%',
          marginLeft: -(objectSize + 15) / 2, // Center the ripple
        }}
        initial={{ scale: 1, opacity: 0 }}
        whileTap={{
          scale: 1.6, // –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
          opacity: [0, 0.8, 0],
        }}
        transition={{ duration: 0.5 }}
      />
    </motion.div>
  )
})
