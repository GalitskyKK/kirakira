import { useCallback, useMemo } from 'react'
import { motion, AnimatePresence, PanInfo } from 'framer-motion'
import { useGardenRooms } from '@/hooks'
import { ShelfView } from './ShelfView'
import { RoomNavigator } from './RoomNavigator'
import type { GardenElement, ViewMode } from '@/types'
import { ROOM_TRANSITION_DURATION, SHELVES_PER_ROOM } from '@/types'
import type { GardenTheme } from '@/hooks/useGardenTheme'

interface GardenRoomManagerProps {
  readonly elements: readonly GardenElement[]
  readonly selectedElement?: GardenElement | null
  readonly draggedElement?: GardenElement | null
  readonly elementBeingMoved?: GardenElement | null
  readonly viewMode: ViewMode
  readonly currentRoomIndex: number
  readonly onRoomChange: (newIndex: number) => void
  readonly onElementClick?: (element: GardenElement) => void
  readonly onElementLongPress?: (element: GardenElement) => void
  readonly onSlotClick?: (shelfIndex: number, position: number) => void
  readonly friendTheme?: GardenTheme | null // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Å–∞–¥–∞ –¥—Ä—É–≥–∞
}

/**
 * FAANG-level Room Manager –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Å–∞–¥–∞
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
 * - –ü–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∂–µ—Å—Ç–æ–≤ —Å–≤–∞–π–ø–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - Pagination –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
 * - –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è smooth transitions
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */
export function GardenRoomManager({
  elements,
  selectedElement,
  draggedElement,
  elementBeingMoved,
  viewMode,
  currentRoomIndex,
  onRoomChange,
  onElementClick,
  onElementLongPress,
  onSlotClick,
  friendTheme,
}: GardenRoomManagerProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
  const { rooms, currentRoom, navigation } = useGardenRooms({
    elements,
    currentRoomIndex,
  })

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏
   */
  const handleNavigate = useCallback(
    (direction: 'prev' | 'next') => {
      const newIndex =
        direction === 'prev' ? currentRoomIndex - 1 : currentRoomIndex + 1

      if (newIndex >= 0 && newIndex < rooms.length) {
        onRoomChange(newIndex)
      }
    },
    [currentRoomIndex, rooms.length, onRoomChange]
  )

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–µ—Å—Ç–æ–≤ drag (—Å–≤–∞–π–ø)
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —Å–≤–∞–π–ø–µ
   */
  const handleDragEnd = useCallback(
    (_event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
      const swipeThreshold = 50 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞ (px)
      const swipeVelocity = 500 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Å–≤–∞–π–ø–∞ (px/s)

      const { offset, velocity } = info

      // –°–≤–∞–π–ø –≤–ª–µ–≤–æ (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É)
      if (
        (offset.x < -swipeThreshold || velocity.x < -swipeVelocity) &&
        navigation.canNavigateNext
      ) {
        handleNavigate('next')
      }
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ (–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É)
      else if (
        (offset.x > swipeThreshold || velocity.x > swipeVelocity) &&
        navigation.canNavigatePrev
      ) {
        handleNavigate('prev')
      }
    },
    [navigation, handleNavigate]
  )

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
   * –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ª–∫–∞—Ö
   */
  const getLocalElements = useMemo(() => {
    if (!currentRoom) return []

    return currentRoom.elements.map(element => ({
      ...element,
      position: {
        x: element.position.x,
        y: element.position.y - currentRoomIndex * SHELVES_PER_ROOM,
      },
    }))
  }, [currentRoom, currentRoomIndex])

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
   */
  const handleSlotClick = useCallback(
    (localShelfIndex: number, position: number) => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
      const globalShelfIndex =
        localShelfIndex + currentRoomIndex * SHELVES_PER_ROOM

      console.log('üéØ GardenRoomManager: Slot clicked', {
        localShelfIndex,
        globalShelfIndex,
        position,
        currentRoomIndex,
        SHELVES_PER_ROOM,
      })

      if (onSlotClick) {
        onSlotClick(globalShelfIndex, position)
      }
    },
    [currentRoomIndex, onSlotClick]
  )

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏
  const slideVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 1000 : -1000,
      opacity: 0,
    }),
    center: {
      x: 0,
      opacity: 1,
    },
    exit: (direction: number) => ({
      x: direction > 0 ? -1000 : 1000,
      opacity: 0,
    }),
  }

  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  const direction = 0 // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–∞

  return (
    <div className="relative w-full">
      {/* –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç */}
      <div className="mb-4 px-4">
        <RoomNavigator
          navigation={navigation}
          roomName={currentRoom?.name ?? '–ó–∞–≥—Ä—É–∑–∫–∞...'}
          onNavigate={handleNavigate}
          isMovingElement={!!elementBeingMoved}
        />
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–Ω–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
      <div className="relative min-h-[650px] w-full overflow-hidden sm:min-h-[700px] lg:min-h-[750px]">
        <AnimatePresence initial={false} custom={direction} mode="wait">
          <motion.div
            key={currentRoomIndex}
            custom={direction}
            variants={slideVariants}
            initial="enter"
            animate="center"
            exit="exit"
            transition={{
              x: {
                type: 'spring',
                stiffness: 300,
                damping: 30,
                duration: ROOM_TRANSITION_DURATION,
              },
              opacity: { duration: ROOM_TRANSITION_DURATION * 0.5 },
            }}
            drag={false} // –°–≤–∞–π–ø –æ—Ç–∫–ª—é—á–µ–Ω —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            dragConstraints={{ left: 0, right: 0 }}
            dragElastic={0.2}
            onDragEnd={handleDragEnd}
            className="w-full"
          >
            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã */}
            <ShelfView
              elements={getLocalElements}
              selectedElement={selectedElement ?? null}
              draggedElement={draggedElement ?? null}
              elementBeingMoved={elementBeingMoved ?? null}
              viewMode={viewMode}
              friendTheme={friendTheme ?? null}
              {...(onElementClick ? { onElementClick } : {})}
              {...(onElementLongPress ? { onElementLongPress } : {})}
              {...(onSlotClick ? { onSlotClick: handleSlotClick } : {})}
            />
          </motion.div>
        </AnimatePresence>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã */}
      {currentRoom && (
        <motion.div
          className="mt-4 px-4 text-center text-xs text-gray-500"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          {currentRoom.elements.length} –∏–∑ {currentRoom.capacity} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          {currentRoom.isFull && (
            <span className="ml-2 rounded-full bg-amber-100 px-2 py-0.5 text-amber-700">
              –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
            </span>
          )}
        </motion.div>
      )}
    </div>
  )
}
