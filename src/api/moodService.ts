/**
 * üòä Mood API Service Layer
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
 */

import { authenticatedFetch } from '@/utils/apiClient'
import type { MoodEntry, MoodType, MoodIntensity } from '@/types'
import type {
  DatabaseMoodEntry,
  StandardApiResponse,
  ProfileApiGetProfileResponse,
} from '@/types/api'
import { getLocalDateString, parseLocalDate } from '@/utils/dateHelpers'

// ============================================
// –¢–ò–ü–´ –î–õ–Ø API –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í
// ============================================

export interface AddMoodRequest {
  readonly telegramUserId: number
  readonly mood: MoodType
  readonly intensity: MoodIntensity
  readonly note?: string
  readonly date: string
  readonly telegramUserData: {
    readonly userId: string
    readonly firstName: string
    readonly lastName?: string
    readonly username?: string
    readonly languageCode: string
    readonly photoUrl?: string
  }
}

export interface AddMoodResponse {
  readonly success: boolean
  readonly data?: {
    readonly mood: DatabaseMoodEntry
    readonly isFirstToday: boolean
    readonly experienceGained?: number
  }
  readonly error?: string
}

export interface MoodHistoryResponse {
  readonly success: boolean
  readonly data?: {
    readonly moodHistory: readonly DatabaseMoodEntry[]
  }
  readonly error?: string
}

export interface TodaysMoodResponse {
  readonly success: boolean
  readonly data?: {
    readonly mood: DatabaseMoodEntry | null
  }
  readonly error?: string
}

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –î–ê–ù–ù–´–•
// ============================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
 */
export function convertServerMoodToClient(
  serverMood: DatabaseMoodEntry,
  userId: string
): MoodEntry {
  return {
    id: `mood_${serverMood.id || Date.now()}`,
    userId: userId,
    // –ü–∞—Ä—Å–∏–º mood_date –∫–∞–∫ –õ–û–ö–ê–õ–¨–ù–£–Æ –¥–∞—Ç—É
    date: serverMood.mood_date
      ? parseLocalDate(serverMood.mood_date)
      : new Date(serverMood.created_at),
    mood: serverMood.mood as MoodType,
    intensity: (serverMood.intensity || 2) as MoodIntensity,
    note: serverMood.note,
    createdAt: new Date(serverMood.created_at),
  }
}

// ============================================
// API –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
 */
export async function addMoodEntry(
  request: AddMoodRequest
): Promise<MoodEntry | null> {
  try {
    const response = await authenticatedFetch('/api/mood?action=record', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request),
    })

    if (!response.ok) {
      console.warn('‚ö†Ô∏è Failed to sync mood to server:', response.status)
      return null
    }

    const result = (await response.json()) as AddMoodResponse

    if (!result.success || !result.data?.mood) {
      return null
    }

    console.log('‚úÖ Mood synced to server successfully')

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    return convertServerMoodToClient(
      result.data.mood,
      request.telegramUserData.userId
    )
  } catch (error) {
    console.warn('‚ö†Ô∏è Server sync failed:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function getMoodHistory(
  telegramId: number,
  userId: string
): Promise<readonly MoodEntry[]> {
  try {
    const response = await authenticatedFetch(
      `/api/mood?action=history&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch mood history: ${response.status}`)
    }

    const result = (await response.json()) as MoodHistoryResponse

    if (!result.success || !result.data?.moodHistory) {
      return []
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    return result.data.moodHistory.map(serverMood =>
      convertServerMoodToClient(serverMood, userId)
    )
  } catch (error) {
    console.error('Failed to get mood history:', error)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
 */
export async function getTodaysMood(
  telegramId: number,
  userId: string
): Promise<MoodEntry | null> {
  try {
    const response = await authenticatedFetch(
      `/api/mood?action=today&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch today's mood: ${response.status}`)
    }

    const result = (await response.json()) as TodaysMoodResponse

    if (!result.success || !result.data?.mood) {
      return null
    }

    return convertServerMoodToClient(result.data.mood, userId)
  } catch (error) {
    console.error("Failed to get today's mood:", error)
    throw error
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å + –∏—Å—Ç–æ—Ä–∏—é)
 */
export async function syncMoodHistory(
  telegramId: number,
  userId: string
): Promise<{
  moods: readonly MoodEntry[]
  todaysMood: MoodEntry | null
}> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await authenticatedFetch(
      `/api/profile?action=get_profile&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch user data: ${response.status}`)
    }

    const result =
      (await response.json()) as StandardApiResponse<ProfileApiGetProfileResponse>

    if (!result.success || !result.data?.user) {
      return { moods: [], todaysMood: null }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    const moods = await getMoodHistory(telegramId, userId)

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const todaysMood =
      moods.find(entry => {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ entry.date —ç—Ç–æ Date –æ–±—ä–µ–∫—Ç
        const entryDate =
          entry.date instanceof Date ? entry.date : new Date(entry.date)
        const entryDateStr = getLocalDateString(entryDate)
        const todayStr = getLocalDateString(today)
        return entryDateStr === todayStr
      }) || null

    return { moods, todaysMood }
  } catch (error) {
    console.error('Failed to sync mood history:', error)
    throw error
  }
}
