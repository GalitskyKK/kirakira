/**
 * üèÜ Challenge API Service Layer
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
 */

import { authenticatedFetch } from '@/utils/apiClient'
import type {
  Challenge,
  ChallengeParticipant,
  ChallengeLeaderboardEntry,
  ChallengeProgress,
  ChallengeMetric,
  ChallengeListResponse,
  ChallengeDetailsResponse,
  JoinChallengeResponse,
  ChallengeProgressResponse,
} from '@/types/challenges'

// ============================================
// –¢–ò–ü–´ –î–õ–Ø API –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í
// ============================================

export interface LoadChallengesRequest {
  readonly telegramId: number
}

export interface LoadChallengesResult {
  readonly challenges: readonly Challenge[]
  readonly userParticipations: readonly ChallengeParticipant[]
}

export interface LoadChallengeDetailsRequest {
  readonly challengeId: string
  readonly telegramId: number
}

export interface LoadChallengeDetailsResult {
  readonly challenge: Challenge
  readonly leaderboard: readonly ChallengeLeaderboardEntry[]
  readonly progress: ChallengeProgress | null
  readonly participation: ChallengeParticipant | null
}

export interface JoinChallengeRequest {
  readonly challengeId: string
  readonly telegramId: number
}

export interface JoinChallengeResult {
  readonly participation: ChallengeParticipant
  readonly challenge: Challenge
}

export interface UpdateProgressRequest {
  readonly challengeId: string
  readonly telegramId: number
  readonly metric: ChallengeMetric
  readonly value: number
}

export interface UpdateProgressResult {
  readonly progress: ChallengeProgress
  readonly leaderboard: readonly ChallengeLeaderboardEntry[]
}

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –î–ê–ù–ù–´–•
// ============================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã Date
 */
function convertChallengeDates(challenge: any): Challenge {
  return {
    ...challenge,
    startDate: new Date(challenge.startDate),
    endDate: new Date(challenge.endDate),
    createdAt: new Date(challenge.createdAt),
    updatedAt: new Date(challenge.updatedAt),
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –æ–±—ä–µ–∫—Ç—ã Date
 */
function convertParticipationDates(participation: any): ChallengeParticipant {
  return {
    ...participation,
    joinedAt: new Date(participation.joinedAt),
    lastUpdateAt: new Date(participation.lastUpdateAt),
    completedAt: participation.completedAt
      ? new Date(participation.completedAt)
      : undefined,
  }
}

// ============================================
// API –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function loadChallenges(
  request: LoadChallengesRequest
): Promise<LoadChallengesResult> {
  try {
    const response = await authenticatedFetch(
      `/api/challenges?action=list&telegramId=${request.telegramId}`
    )

    const result = (await response.json()) as ChallengeListResponse

    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π')
    }

    if (!result.data) {
      return { challenges: [], userParticipations: [] }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const challenges = result.data.challenges.map(convertChallengeDates)
    const participations = result.data.userParticipations.map(
      convertParticipationDates
    )

    return {
      challenges,
      userParticipations: participations,
    }
  } catch (error) {
    console.error('Failed to load challenges:', error)
    throw error
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
 */
export async function loadChallengeDetails(
  request: LoadChallengeDetailsRequest
): Promise<LoadChallengeDetailsResult> {
  try {
    const response = await authenticatedFetch(
      `/api/challenges?action=details&challengeId=${request.challengeId}&telegramId=${request.telegramId}`
    )

    const result = (await response.json()) as ChallengeDetailsResponse

    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —á–µ–ª–ª–µ–Ω–¥–∂–∞')
    }

    if (!result.data) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ')
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const challenge = convertChallengeDates(result.data.challenge)
    const participation = result.data.participation
      ? convertParticipationDates(result.data.participation)
      : null

    return {
      challenge,
      leaderboard: result.data.leaderboard,
      progress: result.data.progress,
      participation,
    }
  } catch (error) {
    console.error('Failed to load challenge details:', error)
    throw error
  }
}

/**
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
 */
export async function joinChallenge(
  request: JoinChallengeRequest
): Promise<JoinChallengeResult> {
  try {
    const response = await authenticatedFetch('/api/challenges?action=join', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    })

    const result = (await response.json()) as JoinChallengeResponse

    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É')
    }

    if (!result.data) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–∏–∏')
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const participation = convertParticipationDates(result.data.participation)
    const challenge = convertChallengeDates(result.data.challenge)

    return {
      participation,
      challenge,
    }
  } catch (error) {
    console.error('Failed to join challenge:', error)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
 */
export async function updateProgress(
  request: UpdateProgressRequest
): Promise<UpdateProgressResult> {
  try {
    const response = await authenticatedFetch(
      '/api/challenges?action=update_progress',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      }
    )

    const result = (await response.json()) as ChallengeProgressResponse

    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')
    }

    if (!result.data) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ')
    }

    return {
      progress: result.data.progress,
      leaderboard: result.data.leaderboard,
    }
  } catch (error) {
    console.error('Failed to update progress:', error)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —á–µ–ª–ª–µ–Ω–¥–∂–∞
 */
export async function refreshLeaderboard(
  challengeId: string,
  telegramId: number
): Promise<{
  leaderboard: readonly ChallengeLeaderboardEntry[]
  progress: ChallengeProgress | null
}> {
  try {
    const response = await authenticatedFetch(
      `/api/challenges?action=details&challengeId=${challengeId}&telegramId=${telegramId}`
    )

    const result = (await response.json()) as ChallengeDetailsResponse

    if (!result.success || !result.data) {
      return { leaderboard: [], progress: null }
    }

    return {
      leaderboard: result.data.leaderboard,
      progress: result.data.progress,
    }
  } catch (error) {
    console.error('Failed to refresh leaderboard:', error)
    throw error
  }
}
