/**
 * üßä API SERVICE: –†–∞–±–æ—Ç–∞ —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏ —Å—Ç—Ä–∏–∫–∞
 * –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏
 */

import { authenticatedFetch } from '@/utils/apiClient'
import type {
  BuyStreakFreezeRequest,
  BuyStreakFreezeResponse,
} from '@/types/streakFreeze'

// ============================================
// –¢–ò–ü–´ –î–õ–Ø API –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í
// ============================================

export interface StreakFreezeData {
  readonly manual: number
  readonly auto: number
  readonly max: number
  readonly canAccumulate: boolean
}

interface ApplyStreakFreezeRequest {
  readonly telegramId: number
  readonly freezeType: 'manual' | 'auto'
  readonly missedDays: number
}

interface ApplyStreakFreezeResponse {
  readonly success: boolean
  readonly data?: {
    readonly freezeType: 'manual' | 'auto'
    readonly missedDays: number
    readonly remaining: {
      readonly manual: number
      readonly auto: number
    }
    readonly currentStreak: number
  }
  readonly error?: string
}

interface ResetStreakRequest {
  readonly telegramId: number
}

interface ResetStreakResponse {
  readonly success: boolean
  readonly data?: {
    readonly currentStreak: number
    readonly longestStreak: number
    readonly message: string
  }
  readonly error?: string
}

interface CheckStreakResponse {
  readonly success: boolean
  readonly data?: {
    readonly missedDays: number
    readonly currentStreak: number
    readonly streakState: 'ok' | 'at_risk' | 'broken'
    readonly lastCheckin: string | null
  }
  readonly error?: string
}

// ============================================
// API –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–º–æ—Ä–æ–∑–∫–∞—Ö —Å—Ç—Ä–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getStreakFreezes(
  telegramId: number
): Promise<StreakFreezeData> {
  try {
    const response = await authenticatedFetch(
      `/api/user?action=get-streak-freezes&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch freezes: ${response.status}`)
    }

    const result = (await response.json()) as {
      success: boolean
      data?: StreakFreezeData
      error?: string
    }

    if (!result.success || !result.data) {
      throw new Error(result.error || 'Failed to get streak freezes')
    }

    return result.data
  } catch (error) {
    console.error('‚ùå Error getting streak freezes:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      manual: 0,
      auto: 0,
      max: 3,
      canAccumulate: true,
    }
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É —Å—Ç—Ä–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω—É –∑–∞–º–æ—Ä–æ–∑–∫—É)
 */
export async function applyStreakFreeze(
  request: ApplyStreakFreezeRequest
): Promise<{
  readonly freezeType: 'manual' | 'auto'
  readonly missedDays: number
  readonly remaining: {
    readonly manual: number
    readonly auto: number
  }
  readonly currentStreak: number
}> {
  try {
    const response = await authenticatedFetch(
      '/api/user?action=use-streak-freeze',
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(request),
      }
    )

    if (!response.ok) {
      const errorData = (await response.json()) as { error?: string }
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      )
    }

    const result = (await response.json()) as ApplyStreakFreezeResponse

    if (!result.success || !result.data) {
      throw new Error(result.error || 'Failed to apply streak freeze')
    }

    console.log('‚úÖ Streak freeze applied successfully:', result.data)

    return result.data
  } catch (error) {
    console.error('‚ùå Error applying streak freeze:', error)
    throw error
  }
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function resetStreak(request: ResetStreakRequest): Promise<{
  readonly currentStreak: number
  readonly longestStreak: number
  readonly message: string
}> {
  try {
    const response = await authenticatedFetch('/api/user?action=reset-streak', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request),
    })

    if (!response.ok) {
      const errorData = (await response.json()) as { error?: string }
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      )
    }

    const result = (await response.json()) as ResetStreakResponse

    if (!result.success || !result.data) {
      throw new Error(result.error || 'Failed to reset streak')
    }

    console.log('‚úÖ Streak reset successfully:', result.data)

    return result.data
  } catch (error) {
    console.error('‚ùå Error resetting streak:', error)
    throw error
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function checkStreak(telegramId: number): Promise<{
  readonly missedDays: number
  readonly currentStreak: number
  readonly streakState: 'ok' | 'at_risk' | 'broken'
  readonly lastCheckin: string | null
}> {
  try {
    const response = await authenticatedFetch(
      `/api/user?action=check-streak&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to check streak: ${response.status}`)
    }

    const result = (await response.json()) as CheckStreakResponse

    if (!result.success || !result.data) {
      throw new Error(result.error || 'Failed to check streak')
    }

    return result.data
  } catch (error) {
    console.error('‚ùå Error checking streak:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {
      missedDays: 0,
      currentStreak: 0,
      streakState: 'ok',
      lastCheckin: null,
    }
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –∑–∞–º–æ—Ä–æ–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
 */
export function getRecommendedFreezeType(
  missedDays: number,
  freezeData: StreakFreezeData
): 'auto' | 'manual' | null {
  // –ï—Å–ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã
  if (missedDays <= 0) return null

  // –ê–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –∏ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–≤–Ω–æ 1 –¥–µ–Ω—å
  if (missedDays === 1 && freezeData.auto > 0) {
    return 'auto'
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É—á–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫
  if (freezeData.manual >= missedDays) {
    return 'manual'
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
  return null
}

/**
 * –ü–æ–∫—É–ø–∫–∞ –∑–∞–º–æ—Ä–æ–∑–æ–∫ —Å—Ç—Ä–∏–∫–∞
 */
export async function buyStreakFreeze(
  request: BuyStreakFreezeRequest
): Promise<BuyStreakFreezeResponse> {
  try {
    const response = await authenticatedFetch(
      '/api/user?action=buy-streak-freeze',
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(request),
      }
    )

    if (!response.ok) {
      const errorData = (await response.json()) as { error?: string }
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      )
    }

    const result = (await response.json()) as BuyStreakFreezeResponse

    if (!result.success) {
      throw new Error(result.error || 'Failed to buy streak freeze')
    }

    console.log('‚úÖ Streak freeze purchased successfully:', result.data)

    return result
  } catch (error) {
    console.error('‚ùå Error buying streak freeze:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}
