import { apiGet, apiPost } from '@/utils/apiClient'

/**
 * üßä API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏ —Å—Ç—Ä–∏–∫–∞
 */

export interface StreakFreezeData {
  readonly manual: number // –û–±—ã—á–Ω—ã–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏
  readonly auto: number // –ê–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫–∏
  readonly max: number // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
  readonly canAccumulate: boolean
}

export interface UseStreakFreezeParams {
  readonly telegramId: number
  readonly freezeType: 'auto' | 'manual'
  readonly missedDays: number
}

export interface UseStreakFreezeResponse {
  readonly success: boolean
  readonly freezeType: 'auto' | 'manual'
  readonly missedDays: number
  readonly remaining: {
    readonly manual: number
    readonly auto: number
  }
  readonly currentStreak: number
  readonly error?: string
}

export interface ResetStreakParams {
  readonly telegramId: number
}

export interface ResetStreakResponse {
  readonly success: boolean
  readonly currentStreak: number
  readonly longestStreak: number
  readonly message: string
  readonly error?: string
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫ —Å—Ç—Ä–∏–∫–∞
 */
export async function getStreakFreezes(
  telegramId: number
): Promise<StreakFreezeData> {
  try {
    const response = await apiGet<{
      success: boolean
      data: StreakFreezeData
      error?: string
    }>(`/api/user?action=get-streak-freezes&telegramId=${telegramId}`)

    if (!response.success || !response.data) {
      throw new Error(response.error ?? 'Failed to fetch streak freezes')
    }

    return response.data
  } catch (error) {
    console.error('Error getting streak freezes:', error)
    throw error
  }
}

/**
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É —Å—Ç—Ä–∏–∫–∞
 */
export async function useStreakFreezeAPI(
  params: UseStreakFreezeParams
): Promise<UseStreakFreezeResponse> {
  try {
    const response = await apiPost<{
      success: boolean
      data: UseStreakFreezeResponse
      error?: string
    }>('/api/user?action=use-streak-freeze', params)

    if (!response.success || !response.data) {
      throw new Error(response.error ?? 'Failed to use streak freeze')
    }

    return response.data
  } catch (error) {
    console.error('Error using streak freeze:', error)
    throw error
  }
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫ (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–æ–∫)
 */
export async function resetStreak(
  params: ResetStreakParams
): Promise<ResetStreakResponse> {
  try {
    const response = await apiPost<{
      success: boolean
      data: ResetStreakResponse
      error?: string
    }>('/api/user?action=reset-streak', params)

    if (!response.success || !response.data) {
      throw new Error(response.error ?? 'Failed to reset streak')
    }

    return response.data
  } catch (error) {
    console.error('Error resetting streak:', error)
    throw error
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞ —Å—Ç—Ä–∏–∫–∞
 * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π (0 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∞)
 */
export function checkMissedDays(
  lastMoodDate: Date | null,
  currentDate: Date = new Date()
): number {
  if (!lastMoodDate) return 0

  const lastMood = new Date(lastMoodDate)
  lastMood.setHours(0, 0, 0, 0)

  const today = new Date(currentDate)
  today.setHours(0, 0, 0, 0)

  const diffTime = today.getTime() - lastMood.getTime()
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è - –≤—Å—ë –û–ö
  if (diffDays <= 1) return 0

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π (–±–µ–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ)
  return diffDays - 1
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–∫
 */
export function canRecoverStreak(missedDays: number): boolean {
  return missedDays > 0 && missedDays <= 7
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–≤—Ç–æ > –æ–±—ã—á–Ω–∞—è
 */
export function getRecommendedFreezeType(
  missedDays: number,
  availableFreezes: { manual: number; auto: number }
): 'auto' | 'manual' | null {
  // –ê–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è 1 –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è
  if (missedDays === 1 && availableFreezes.auto > 0) {
    return 'auto'
  }

  // –û–±—ã—á–Ω–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
  if (availableFreezes.manual >= missedDays) {
    return 'manual'
  }

  return null
}
