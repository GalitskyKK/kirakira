/**
 * üå± Garden API Service Layer
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–∞–¥–æ–º
 */

import { authenticatedFetch } from '@/utils/apiClient'
import type {
  GardenElement,
  Position2D,
  MoodType,
  ElementType,
  RarityLevel,
  SeasonalVariant,
} from '@/types'
import type {
  DatabaseGardenElement,
  StandardApiResponse,
  ProfileApiGetProfileResponse,
} from '@/types/api'
import {
  getElementName,
  getElementDescription,
  getElementEmoji,
  getElementColor,
  getElementScale,
} from '@/utils/elementNames'
import { getCurrentSeason } from '@/utils/elementGeneration'

// ============================================
// –¢–ò–ü–´ –î–õ–Ø API –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í
// ============================================

export interface GardenSyncRequest {
  readonly telegramId: number
  readonly forceSync?: boolean
}

export interface GardenHistoryResponse {
  readonly success: boolean
  readonly data?: {
    readonly gardenElements: readonly DatabaseGardenElement[]
  }
  readonly error?: string
}

export interface AddElementRequest {
  readonly telegramId: number
  readonly element: {
    readonly type: ElementType
    readonly position: Position2D
    readonly unlockDate: string
    readonly moodInfluence: MoodType
    readonly rarity: RarityLevel
    readonly seasonalVariant: SeasonalVariant
  }
  readonly telegramUserData: {
    readonly userId: string
    readonly firstName: string
    readonly lastName?: string
    readonly username?: string
    readonly languageCode: string
    readonly photoUrl?: string
  }
}

export interface AddElementResponse {
  readonly success: boolean
  readonly data?: {
    readonly id: string
    readonly element_type: string
    readonly rarity: string
    [key: string]: unknown
  }
  readonly error?: string
}

export interface UpdatePositionRequest {
  readonly telegramId: number
  readonly elementId: string
  readonly position: Position2D
}

export interface UpdatePositionResponse {
  readonly success: boolean
  readonly error?: string
}

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –î–ê–ù–ù–´–•
// ============================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
 */
export function convertServerElementToClient(
  serverElement: DatabaseGardenElement
): GardenElement {
  const moodInfluence = (serverElement.mood_influence ?? 'joy') as MoodType
  const elementType = serverElement.element_type as ElementType
  const rarity = serverElement.rarity as RarityLevel
  const characteristicsSeed = serverElement.id || `temp_${Date.now()}`

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ element.id
  const name = getElementName(elementType, rarity, characteristicsSeed)
  const description = getElementDescription(elementType, rarity, name)
  const emoji = getElementEmoji(elementType)
  const color = getElementColor(elementType, moodInfluence, characteristicsSeed)
  const scale = getElementScale(characteristicsSeed)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∑–æ–Ω –∏–∑ –ë–î –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–∞—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const seasonalVariant = serverElement.seasonal_variant
    ? (serverElement.seasonal_variant as SeasonalVariant)
    : getCurrentSeason(new Date(serverElement.unlock_date))

  return {
    id: characteristicsSeed,
    type: elementType,
    position: {
      x: serverElement.position_x,
      y: serverElement.position_y,
    },
    unlockDate: new Date(serverElement.unlock_date),
    moodInfluence,
    rarity,
    seasonalVariant,
    name,
    description,
    emoji,
    color,
    scale,
  }
}

// ============================================
// API –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∞–¥–∞
 */
export async function getUserProfile(
  telegramId: number
): Promise<ProfileApiGetProfileResponse | null> {
  try {
    const response = await authenticatedFetch(
      `/api/profile?action=get_profile&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch user data: ${response.status}`)
    }

    const result =
      (await response.json()) as StandardApiResponse<ProfileApiGetProfileResponse>

    if (!result.success || !result.data) {
      return null
    }

    return result.data
  } catch (error) {
    console.error('Failed to get user profile:', error)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function getGardenHistory(
  telegramId: number
): Promise<readonly GardenElement[]> {
  try {
    const response = await authenticatedFetch(
      `/api/garden?action=history&telegramId=${telegramId}`
    )

    if (!response.ok) {
      throw new Error(`Failed to fetch garden history: ${response.status}`)
    }

    const result = (await response.json()) as GardenHistoryResponse

    if (!result.success || !result.data?.gardenElements) {
      return []
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    return result.data.gardenElements.map(convertServerElementToClient)
  } catch (error) {
    console.error('Failed to get garden history:', error)
    throw error
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–∞–¥
 */
export async function addGardenElement(
  request: AddElementRequest
): Promise<{ id: string; element: GardenElement } | null> {
  try {
    const response = await authenticatedFetch(
      '/api/garden?action=add-element',
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(request),
      }
    )

    if (!response.ok) {
      throw new Error(`Failed to add garden element: ${response.status}`)
    }

    const result = (await response.json()) as AddElementResponse

    if (!result.success || !result.data?.id) {
      return null
    }

    const serverUUID = result.data.id

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ UUID
    const name = getElementName(
      request.element.type,
      request.element.rarity,
      serverUUID
    )
    const description = getElementDescription(
      request.element.type,
      request.element.rarity,
      name
    )
    const emoji = getElementEmoji(request.element.type)
    const color = getElementColor(
      request.element.type,
      request.element.moodInfluence,
      serverUUID
    )
    const scale = getElementScale(serverUUID)

    const finalElement: GardenElement = {
      id: serverUUID,
      type: request.element.type,
      position: request.element.position,
      unlockDate: new Date(request.element.unlockDate),
      moodInfluence: request.element.moodInfluence,
      rarity: request.element.rarity,
      seasonalVariant: getCurrentSeason(new Date(request.element.unlockDate)),
      name,
      description,
      emoji,
      color,
      scale,
    }

    return { id: serverUUID, element: finalElement }
  } catch (error) {
    console.error('Failed to add garden element:', error)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥—É
 */
export async function updateElementPosition(
  request: UpdatePositionRequest
): Promise<boolean> {
  try {
    const response = await authenticatedFetch(
      '/api/garden?action=update-position',
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(request),
      }
    )

    if (!response.ok) {
      console.warn(
        '‚ö†Ô∏è Failed to sync element position to server:',
        response.status
      )
      return false
    }

    console.log('‚úÖ Element position synced to server successfully')
    return true
  } catch (error) {
    console.warn('‚ö†Ô∏è Server position sync failed:', error)
    return false
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–∞–¥ —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å + –∏—Å—Ç–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
 */
export async function syncGarden(telegramId: number): Promise<{
  streak: number
  elements: readonly GardenElement[]
}> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è streak
    const profile = await getUserProfile(telegramId)

    if (!profile) {
      return { streak: 0, elements: [] }
    }

    const streak = profile.stats?.currentStreak ?? 0

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = await getGardenHistory(telegramId)

    return { streak, elements }
  } catch (error) {
    console.error('Failed to sync garden:', error)
    throw error
  }
}
