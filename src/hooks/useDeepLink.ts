import { useEffect, useCallback, useRef } from 'react'
import { useTelegram } from './useTelegram'

export interface DeepLinkData {
  type: 'friend_invite' | 'challenge' | 'garden_share' | 'unknown'
  payload?: string
  originalParam?: string
}

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ Telegram
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç start –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
 */
export function useDeepLink() {
  const { webApp, isReady } = useTelegram()
  const processedParam = useRef<string | null>(null)

  const parseStartParam = useCallback((startParam: string): DeepLinkData => {
    console.log('üîó Parsing start param:', startParam)

    // –§–æ—Ä–º–∞—Ç: friend_CODE123, challenge_ID456, garden_USER123, etc.
    const parts = startParam.split('_')

    if (parts.length < 2) {
      return {
        type: 'unknown',
        originalParam: startParam,
      }
    }

    const [type, ...payloadParts] = parts
    const payload = payloadParts.join('_') // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ _

    if (!type || !payload) {
      return {
        type: 'unknown',
        originalParam: startParam,
      }
    }

    switch (type.toLowerCase()) {
      case 'friend':
        return {
          type: 'friend_invite',
          payload: payload.toUpperCase(), // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –≤—Å–µ–≥–¥–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
          originalParam: startParam,
        }

      case 'challenge':
        return {
          type: 'challenge',
          payload,
          originalParam: startParam,
        }

      case 'garden':
        return {
          type: 'garden_share',
          payload,
          originalParam: startParam,
        }

      default:
        return {
          type: 'unknown',
          payload,
          originalParam: startParam,
        }
    }
  }, [])

  const getStartParam = useCallback((): string | null => {
    if (!webApp?.initDataUnsafe) {
      console.log('üîó No initDataUnsafe available')
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º start_param –∏–∑ initDataUnsafe
    const startParam = webApp.initDataUnsafe.start_param

    if (!startParam) {
      console.log('üîó No start_param in initDataUnsafe')
      return null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (processedParam.current === startParam) {
      console.log('üîó Start param already processed:', startParam)
      return null
    }

    console.log('üîó Found new start param:', startParam)
    return startParam
  }, [webApp])

  const processDeepLink = useCallback((): DeepLinkData | null => {
    const startParam = getStartParam()

    if (!startParam) {
      return null
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processedParam.current = startParam

    const deepLinkData = parseStartParam(startParam)
    console.log('üîó Processed deep link:', deepLinkData)

    return deepLinkData
  }, [getStartParam, parseStartParam])

  const handleFriendInvite = useCallback((referralCode: string): boolean => {
    console.log('ü§ù Handling friend invite with code:', referralCode)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ localStorage –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º FriendsList
    try {
      localStorage.setItem('pending_friend_invite', referralCode)
      console.log('‚úÖ Friend invite code saved to localStorage')
      return true
    } catch (error) {
      console.error('‚ùå Failed to save friend invite code:', error)
      return false
    }
  }, [])

  const checkPendingInvite = useCallback((): string | null => {
    try {
      const pendingCode = localStorage.getItem('pending_friend_invite')
      if (pendingCode) {
        console.log('üì• Found pending friend invite:', pendingCode)
        return pendingCode
      }
    } catch (error) {
      console.error('‚ùå Failed to check pending invite:', error)
    }
    return null
  }, [])

  const clearPendingInvite = useCallback((): void => {
    try {
      localStorage.removeItem('pending_friend_invite')
      console.log('üßπ Cleared pending friend invite')
    } catch (error) {
      console.error('‚ùå Failed to clear pending invite:', error)
    }
  }, [])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram WebApp
  useEffect(() => {
    if (!isReady) {
      return
    }

    const deepLinkData = processDeepLink()

    if (!deepLinkData) {
      return
    }

    console.log('üîó Processing deep link on app ready:', deepLinkData)

    switch (deepLinkData.type) {
      case 'friend_invite':
        if (deepLinkData.payload) {
          handleFriendInvite(deepLinkData.payload)
        }
        break

      case 'challenge':
        console.log('üèÜ Challenge deep link detected:', deepLinkData.payload)
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        break

      case 'garden_share':
        console.log('üå∏ Garden share deep link detected:', deepLinkData.payload)
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º
        break

      default:
        console.log('‚ùì Unknown deep link type:', deepLinkData)
        break
    }
  }, [isReady, processDeepLink, handleFriendInvite])

  return {
    processDeepLink,
    parseStartParam,
    handleFriendInvite,
    checkPendingInvite,
    clearPendingInvite,
  }
}
