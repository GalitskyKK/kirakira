import { useState, useEffect, useCallback } from 'react'
import { useTelegramSync } from './useTelegramSync'
import { useStoresSync } from './useStoresSync'
import { useUserStore } from '@/stores'
import {
  InitializationState,
  InitializationStage,
  InitializationConfig,
  UseAppInitializationReturn,
} from '@/types/initialization'

const DEFAULT_CONFIG: InitializationConfig = {
  enableTelegram: true,
  enableStoresSync: true,
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  isDevelopment: import.meta.env.DEV,
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 */
export function useAppInitialization(
  config: Partial<InitializationConfig> = {}
): UseAppInitializationReturn {
  const finalConfig = { ...DEFAULT_CONFIG, ...config }

  const [state, setState] = useState<InitializationState>({
    stage: InitializationStage.IDLE,
    isLoading: false,
    error: null,
    progress: 0,
  })

  const { syncTelegramUser, hasTelegramUser, telegramReady } = useTelegramSync()
  const { syncStores } = useStoresSync()
  const { currentUser, createAnonymousUser } = useUserStore()

  const updateProgress = useCallback(
    (stage: InitializationStage, progress: number, error?: string | null) => {
      setState(prev => ({
        ...prev,
        stage,
        progress,
        error: error ?? null,
        isLoading:
          stage !== InitializationStage.COMPLETED &&
          stage !== InitializationStage.FAILED,
      }))
    },
    []
  )

  const logIfDev = useCallback(
    (message: string, data?: unknown) => {
      if (finalConfig.isDevelopment) {
        console.log(message, data || '')
      }
    },
    [finalConfig.isDevelopment]
  )

  const ensureBrowserUser = useCallback(async () => {
    if (!currentUser) {
      logIfDev('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...')
      await createAnonymousUser()
      logIfDev('‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω')
    } else {
      logIfDev('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', {
        id: currentUser.id,
        isAnonymous: currentUser.isAnonymous,
      })
    }
  }, [currentUser, createAnonymousUser, logIfDev])

  const initialize = useCallback(async () => {
    if (state.isLoading) return // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏

    logIfDev('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    try {
      updateProgress(InitializationStage.TELEGRAM_SETUP, 10)

      // –≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      let telegramUserId: number | undefined
      let workingMode: 'telegram' | 'browser' = 'browser'

      if (finalConfig.enableTelegram) {
        logIfDev('üì± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã...')

        const telegramResult = await syncTelegramUser()

        if (!telegramResult.success) {
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Telegram
          throw new Error(`Telegram sync failed: ${telegramResult.error}`)
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–∏—Å–∫–ª—é—á–∞–µ–º 'error' —Å–ª—É—á–∞–π)
        if (
          telegramResult.mode === 'telegram' ||
          telegramResult.mode === 'browser'
        ) {
          workingMode = telegramResult.mode
        }
        telegramUserId = telegramResult.user?.telegramId

        if (workingMode === 'telegram') {
          logIfDev('‚úÖ Telegram —Ä–µ–∂–∏–º - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
            telegramUserId,
          })
        } else {
          logIfDev('üåê –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')

          // –í –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
          await ensureBrowserUser()
        }
      }

      updateProgress(InitializationStage.STORES_SYNC, 60)

      // –≠—Ç–∞–ø 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è stores (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      if (finalConfig.enableStoresSync) {
        logIfDev('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è stores...', { workingMode, telegramUserId })

        // –í Telegram —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–¥–∞–µ–º telegramUserId –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        // –í –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
        const storesResult = await syncStores(
          workingMode === 'telegram' ? telegramUserId : undefined
        )

        if (!storesResult.success) {
          throw new Error(`Stores sync failed: ${storesResult.error}`)
        }

        logIfDev('‚úÖ Stores —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { mode: workingMode })
      }

      updateProgress(InitializationStage.COMPLETED, 100)
      logIfDev('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown initialization error'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      updateProgress(InitializationStage.FAILED, 0, errorMessage)
    }
  }, [
    state.isLoading,
    finalConfig.enableTelegram,
    finalConfig.enableStoresSync,
    hasTelegramUser,
    telegramReady,
    syncTelegramUser,
    syncStores,
    updateProgress,
    logIfDev,
    ensureBrowserUser,
  ])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (state.stage === InitializationStage.IDLE) {
      const timeoutId = setTimeout(() => {
        void initialize()
      }, 100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

      // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const safetyTimeoutId = setTimeout(() => {
        if (state.isLoading) {
          logIfDev('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ')
          updateProgress(
            InitializationStage.FAILED,
            0,
            'Initialization timeout'
          )
        }
      }, finalConfig.timeout)

      return () => {
        clearTimeout(timeoutId)
        clearTimeout(safetyTimeoutId)
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é cleanup —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    return () => {}
  }, [
    state.stage,
    state.isLoading,
    initialize,
    updateProgress,
    logIfDev,
    finalConfig.timeout,
  ])

  return {
    stage: state.stage,
    isLoading: state.isLoading,
    error: state.error,
    progress: state.progress,
    initialize,
    isCompleted: state.stage === InitializationStage.COMPLETED,
    isFailed: state.stage === InitializationStage.FAILED,
    canRetry: state.stage === InitializationStage.FAILED,
  }
}
