/**
 * üìä Profile React Query Hooks
 * –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –æ–ø—ã—Ç–æ–º —á–µ—Ä–µ–∑ React Query
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import {
  getProfile,
  addExperience,
  getFriendProfile,
  type AddExperienceRequest,
} from '@/api'
import { saveUser, loadUser } from '@/utils/storage'
import type { ProfileApiGetProfileResponse } from '@/types/api'
import type { User } from '@/types'

// ============================================
// QUERY KEYS - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è React Query
// ============================================

export const profileKeys = {
  all: ['profile'] as const,
  own: (telegramId: number) => [...profileKeys.all, 'own', telegramId] as const,
  friend: (telegramId: number, friendId: number) =>
    [...profileKeys.all, 'friend', telegramId, friendId] as const,
}

// ============================================
// QUERY HOOKS - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
export function useOwnProfile(telegramId: number | undefined, enabled = true) {
  return useQuery({
    queryKey: profileKeys.own(telegramId ?? 0),
    queryFn: async () => {
      if (!telegramId) {
        throw new Error('Telegram ID is required')
      }
      return getProfile(telegramId)
    },
    enabled: enabled && !!telegramId,
    staleTime: 1000 * 60, // 1 –º–∏–Ω—É—Ç–∞
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
    refetchOnWindowFocus: true,
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∞
 */
export function useFriendProfile(
  telegramId: number | undefined,
  friendTelegramId: number | undefined,
  enabled = true
) {
  return useQuery({
    queryKey: profileKeys.friend(telegramId ?? 0, friendTelegramId ?? 0),
    queryFn: async () => {
      if (!telegramId || !friendTelegramId) {
        throw new Error('Telegram ID and Friend ID are required')
      }
      return getFriendProfile({ telegramId, friendTelegramId })
    },
    enabled: enabled && !!telegramId && !!friendTelegramId,
    staleTime: 1000 * 60 * 2, // 2 –º–∏–Ω—É—Ç—ã
    gcTime: 1000 * 60 * 15, // 15 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
  })
}

// ============================================
// MUTATION HOOKS - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
 * –í–∫–ª—é—á–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */
export function useAddExperience() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: addExperience,
    onMutate: async (request: AddExperienceRequest) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await queryClient.cancelQueries({
        queryKey: profileKeys.own(request.telegramId),
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const previousProfile = queryClient.getQueryData(
        profileKeys.own(request.telegramId)
      )

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º—ã –Ω–µ –∑–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π level –¥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞,
      // –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º experience
      queryClient.setQueryData(
        profileKeys.own(request.telegramId),
        (old: ProfileApiGetProfileResponse | undefined) =>
          old
            ? {
                ...old,
                user: {
                  ...old.user,
                  experience: old.user.experience + request.experiencePoints,
                },
              }
            : old
      )

      return { previousProfile }
    },
    onSuccess: (result, request) => {
      if (result) {
        // –û–±–Ω–æ–≤–ª—è–µ–º profile query —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        queryClient.setQueryData(
          profileKeys.own(request.telegramId),
          (old: ProfileApiGetProfileResponse | undefined) =>
            old
              ? {
                  ...old,
                  user: {
                    ...old.user,
                    experience: result.experience,
                    level: result.level,
                  },
                }
              : old
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const currentUser = loadUser()
        if (currentUser) {
          const updatedUser: User = {
            ...currentUser,
            experience: result.experience,
            level: result.level,
          }
          saveUser(updatedUser)
        }

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        queryClient.invalidateQueries({
          queryKey: profileKeys.own(request.telegramId),
        })

        console.log(
          `‚úÖ Added ${request.experiencePoints} XP for ${request.reason}`
        )

        if (result.leveledUp) {
          console.log(`üéâ Level up! New level: ${result.level}`)
        }
      }
    },
    onError: (error, request, context) => {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousProfile) {
        queryClient.setQueryData(
          profileKeys.own(request.telegramId),
          context.previousProfile
        )
      }
      console.error('‚ùå Failed to add experience:', error)
    },
  })
}
