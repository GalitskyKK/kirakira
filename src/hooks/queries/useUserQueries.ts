/**
 * üë§ User React Query Hooks
 * –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ React Query
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import {
  syncUserFromSupabase,
  updatePrivacySettings,
  updateUserPhoto,
} from '@/api'
import type { User } from '@/types'

// ============================================
// QUERY KEYS - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è React Query
// ============================================

export const userKeys = {
  all: ['user'] as const,
  sync: (telegramId: number) => [...userKeys.all, 'sync', telegramId] as const,
  profile: (telegramId: number) =>
    [...userKeys.all, 'profile', telegramId] as const,
}

// ============================================
// QUERY HOOKS - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */
export function useUserSync(telegramId: number | undefined, enabled = true) {
  return useQuery({
    queryKey: userKeys.sync(telegramId ?? 0),
    queryFn: async () => {
      if (!telegramId) {
        throw new Error('Telegram ID is required')
      }
      return syncUserFromSupabase(telegramId)
    },
    enabled: enabled && !!telegramId,
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
    gcTime: 1000 * 60 * 30, // 30 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
    refetchOnWindowFocus: true,
    refetchOnReconnect: true,
  })
}

// ============================================
// MUTATION HOOKS - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
 */
export function useUpdatePrivacySettings() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({
      telegramId,
      privacySettings,
    }: {
      telegramId: number
      privacySettings: Record<string, boolean>
    }) => updatePrivacySettings(telegramId, privacySettings),
    onSuccess: (_result, variables) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      queryClient.invalidateQueries({
        queryKey: userKeys.sync(variables.telegramId),
      })

      console.log('‚úÖ Privacy settings updated successfully')
    },
    onError: error => {
      console.error('‚ùå Failed to update privacy settings:', error)
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
export function useUpdateUserPhoto() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({
      telegramId,
      photoUrl,
    }: {
      telegramId: number
      photoUrl: string
    }) => updateUserPhoto(telegramId, photoUrl),
    onMutate: async ({ telegramId, photoUrl }) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
      await queryClient.cancelQueries({
        queryKey: userKeys.sync(telegramId),
      })

      const previousData = queryClient.getQueryData(userKeys.sync(telegramId))

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
      queryClient.setQueryData(
        userKeys.sync(telegramId),
        (old: { user: User; stats: any }) => {
          if (!old) return old
          return {
            ...old,
            user: {
              ...old.user,
              photoUrl,
            },
          }
        }
      )

      return { previousData }
    },
    onSuccess: (_result, variables) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      queryClient.invalidateQueries({
        queryKey: userKeys.sync(variables.telegramId),
      })

      console.log('‚úÖ User photo updated successfully')
    },
    onError: (error, variables, context) => {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousData) {
        queryClient.setQueryData(
          userKeys.sync(variables.telegramId),
          context.previousData
        )
      }
      console.error('‚ùå Failed to update user photo:', error)
    },
  })
}
