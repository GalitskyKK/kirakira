/**
 * üå± Garden React Query Hooks
 * –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∞–¥–∞ —á–µ—Ä–µ–∑ React Query
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import {
  syncGarden,
  getGardenHistory,
  addGardenElement,
  updateElementPosition,
  upgradeElement,
  getElementUpgradeInfo,
  type AddElementRequest,
  type UpdatePositionRequest,
} from '@/api'
import type { GardenElement } from '@/types'
import { saveGarden, loadGarden } from '@/utils/storage'

// ============================================
// QUERY KEYS - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è React Query
// ============================================

export const gardenKeys = {
  all: ['garden'] as const,
  sync: (telegramId: number) =>
    [...gardenKeys.all, 'sync', telegramId] as const,
  history: (telegramId: number) =>
    [...gardenKeys.all, 'history', telegramId] as const,
  upgradeInfo: (telegramId: number, elementId: string) =>
    [...gardenKeys.all, 'upgradeInfo', telegramId, elementId] as const,
}

// ============================================
// QUERY HOOKS - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∞–¥–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 * –ü–æ–ª—É—á–∞–µ—Ç streak –∏ –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
export function useGardenSync(telegramId: number | undefined, enabled = true) {
  return useQuery({
    queryKey: gardenKeys.sync(telegramId ?? 0),
    queryFn: async () => {
      if (!telegramId) {
        throw new Error('Telegram ID is required')
      }
      return syncGarden(telegramId)
    },
    enabled: enabled && !!telegramId,
    staleTime: 1000 * 30, // 30 —Å–µ–∫—É–Ω–¥ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    gcTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
    refetchOnWindowFocus: true,
    refetchOnReconnect: true,
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–¥–∞
 */
export function useGardenHistory(
  telegramId: number | undefined,
  enabled = true
) {
  return useQuery({
    queryKey: gardenKeys.history(telegramId ?? 0),
    queryFn: async () => {
      if (!telegramId) {
        throw new Error('Telegram ID is required')
      }
      return getGardenHistory(telegramId)
    },
    enabled: enabled && !!telegramId,
    staleTime: 1000 * 60, // 1 –º–∏–Ω—É—Ç–∞
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
  })
}

// ============================================
// MUTATION HOOKS - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ============================================

/**
 * –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥
 * –í–∫–ª—é—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */
export function useAddGardenElement() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: addGardenElement,
    onMutate: async (request: AddElementRequest) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await queryClient.cancelQueries({
        queryKey: gardenKeys.sync(request.telegramId),
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
      const previousData = queryClient.getQueryData(
        gardenKeys.sync(request.telegramId)
      )

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–¥–µ—Å—å –º—ã –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º query data –Ω–∞–ø—Ä—è–º—É—é,
      // —Ç.–∫. –Ω–∞–º –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä–Ω—ã–π UUID –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

      return { previousData }
    },
    onSuccess: (result, request) => {
      if (result) {
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
        queryClient.invalidateQueries({
          queryKey: gardenKeys.sync(request.telegramId),
        })
        queryClient.invalidateQueries({
          queryKey: gardenKeys.history(request.telegramId),
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const currentGarden = loadGarden()
        if (currentGarden) {
          const updatedGarden = {
            ...currentGarden,
            elements: [...currentGarden.elements, result.element],
            lastVisited: new Date(),
          }
          saveGarden(updatedGarden)
        }

        console.log('‚úÖ Garden element added successfully')
      }
    },
    onError: (error, _request, context) => {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousData) {
        queryClient.setQueryData(
          gardenKeys.sync(_request.telegramId),
          context.previousData
        )
      }
      console.error('‚ùå Failed to add garden element:', error)
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥—É
 * –í–∫–ª—é—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export function useUpdateElementPosition() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: updateElementPosition,
    onMutate: async (request: UpdatePositionRequest) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
      await queryClient.cancelQueries({
        queryKey: gardenKeys.sync(request.telegramId),
      })

      const previousData = queryClient.getQueryData(
        gardenKeys.sync(request.telegramId)
      )

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
      queryClient.setQueryData(
        gardenKeys.sync(request.telegramId),
        (old: { streak: number; elements: readonly GardenElement[] }) => {
          if (!old) return old

          return {
            ...old,
            elements: old.elements.map(element =>
              element.id === request.elementId
                ? { ...element, position: request.position }
                : element
            ),
          }
        }
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const currentGarden = loadGarden()
      if (currentGarden) {
        const updatedGarden = {
          ...currentGarden,
          elements: currentGarden.elements.map(element =>
            element.id === request.elementId
              ? { ...element, position: request.position }
              : element
          ),
          lastVisited: new Date(),
        }
        saveGarden(updatedGarden)
      }

      return { previousData }
    },
    onError: (error, request, context) => {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousData) {
        queryClient.setQueryData(
          gardenKeys.sync(request.telegramId),
          context.previousData
        )
      }
      console.error('‚ùå Failed to update element position:', error)

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (context?.previousData) {
        const garden = loadGarden()
        if (garden) {
          saveGarden(garden)
        }
      }
    },
    onSuccess: (_result, request) => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log('‚úÖ Element position updated successfully')

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      queryClient.invalidateQueries({
        queryKey: gardenKeys.sync(request.telegramId),
      })
    },
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export function useElementUpgradeInfo(
  telegramId: number | undefined,
  elementId: string | undefined,
  enabled = true
) {
  return useQuery({
    queryKey: gardenKeys.upgradeInfo(telegramId ?? 0, elementId ?? ''),
    queryFn: async () => {
      if (!telegramId || !elementId) {
        throw new Error('Telegram ID and Element ID are required')
      }
      return getElementUpgradeInfo(telegramId, elementId)
    },
    enabled: enabled && !!telegramId && !!elementId,
    staleTime: 0, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç –≤ –∫–µ—à–µ
    refetchOnMount: 'always', // üîÑ –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    refetchOnWindowFocus: true, // üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –æ–∫–Ω–µ
  })
}

/**
 * –•—É–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∞–¥–∞
 */
export function useUpgradeElement() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: ({
      telegramId,
      elementId,
      useFree = false,
    }: {
      telegramId: number
      elementId: string
      useFree?: boolean
    }) => upgradeElement(telegramId, elementId, useFree),
    onSuccess: (result, variables) => {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ queries –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      queryClient.invalidateQueries({
        queryKey: gardenKeys.sync(variables.telegramId),
      })
      queryClient.invalidateQueries({
        queryKey: gardenKeys.history(variables.telegramId),
      })
      queryClient.invalidateQueries({
        queryKey: gardenKeys.upgradeInfo(
          variables.telegramId,
          variables.elementId
        ),
      })

      // üîë –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö (freeUpgrades)
      queryClient.invalidateQueries({
        queryKey: ['profile', 'own', variables.telegramId],
      })
      queryClient.invalidateQueries({
        queryKey: ['user', 'sync', variables.telegramId],
      })

      console.log('‚úÖ Element upgrade completed:', result)
    },
    onError: error => {
      console.error('‚ùå Failed to upgrade element:', error)
    },
  })
}
