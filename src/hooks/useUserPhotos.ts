import { useCallback, useState } from 'react'
import { useTelegram } from './useTelegram'
import { authenticatedFetch } from '@/utils/apiClient'

interface PhotoUpdateResult {
  success: boolean
  photoUrl?: string
  message?: string
  error?: string
}

interface BulkPhotoUpdateResult {
  success: boolean
  total?: number
  updated?: number
  skipped?: number
  errors?: number
  message?: string
  error?: string
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export function useUserPhotos() {
  const { user, isTelegramEnv } = useTelegram()
  const [isUpdatingPhoto, setIsUpdatingPhoto] = useState(false)
  const [isUpdatingFriendsPhotos, setIsUpdatingFriendsPhotos] = useState(false)

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateCurrentUserPhoto = useCallback(
    async (forceUpdate = false): Promise<PhotoUpdateResult> => {
      if (!isTelegramEnv || !user?.telegramId) {
        return {
          success: false,
          error: 'Telegram environment not available',
        }
      }

      try {
        setIsUpdatingPhoto(true)

        const response = await authenticatedFetch(
          '/api/user?action=update-photo',
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              telegramId: user.telegramId,
              forceUpdate,
            }),
          }
        )

        const result = await response.json()

        if (result.success) {
          return {
            success: true,
            photoUrl: result.data.photoUrl,
            message: result.data.message,
          }
        } else {
          return {
            success: false,
            error: result.error || 'Failed to update photo',
          }
        }
      } catch (error) {
        console.error('Error updating user photo:', error)
        return {
          success: false,
          error: 'Network error occurred',
        }
      } finally {
        setIsUpdatingPhoto(false)
      }
    },
    [user?.telegramId, isTelegramEnv]
  )

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateFriendsPhotos =
    useCallback(async (): Promise<BulkPhotoUpdateResult> => {
      if (!isTelegramEnv || !user?.telegramId) {
        return {
          success: false,
          error: 'Telegram environment not available',
        }
      }

      try {
        setIsUpdatingFriendsPhotos(true)

        const response = await authenticatedFetch(
          '/api/friends?action=update-photos',
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              telegramId: user.telegramId,
            }),
          }
        )

        const result = await response.json()

        if (result.success) {
          const { total, updated, skipped, errors } = result.data

          // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let message: string
          if (errors > 0) {
            message = `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∏–∑ ${total} –∞–≤–∞—Ç–∞—Ä–æ–∫. –û—à–∏–±–æ–∫: ${errors}`
          } else if (updated > 0) {
            message = `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∞–≤–∞—Ç–∞—Ä${updated === 1 ? '–∫–∞' : updated < 5 ? '–∫–∏' : '–æ–∫'}`
          } else {
            message = '–í—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã'
          }

          return {
            success: true,
            total,
            updated,
            skipped,
            errors,
            message,
          }
        } else {
          return {
            success: false,
            error: result.error || 'Failed to update friends photos',
          }
        }
      } catch (error) {
        console.error('Error updating friends photos:', error)
        return {
          success: false,
          error: 'Network error occurred',
        }
      } finally {
        setIsUpdatingFriendsPhotos(false)
      }
    }, [user?.telegramId, isTelegramEnv])

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  const updateCurrentUserPhotoWithAlert = useCallback(
    async (forceUpdate = false) => {
      // üî• –£–ë–†–ê–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –Ω—É–∂–Ω—ã - —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
      const result = await updateCurrentUserPhoto(forceUpdate)
      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (result.success) {
        console.log('‚úÖ User photo updated:', result.message)
      } else {
        console.error('‚ùå Failed to update user photo:', result.error)
      }
      return result
    },
    [updateCurrentUserPhoto]
  )

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥—Ä—É–∑–µ–π (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
   */
  const updateFriendsPhotosWithAlert = useCallback(async () => {
    // üî• –£–ë–†–ê–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –Ω—É–∂–Ω—ã - —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    const result = await updateFriendsPhotos()
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (result.success) {
      console.log('‚úÖ Friends photos updated:', result.message)
    } else {
      console.error('‚ùå Failed to update friends photos:', result.error)
    }
    return result
  }, [updateFriendsPhotos])

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const getCurrentUserPhotoUrl = useCallback((): string | undefined => {
    return user?.photoUrl
  }, [user?.photoUrl])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isUpdatingPhoto,
    isUpdatingFriendsPhotos,

    // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateCurrentUserPhoto,
    updateFriendsPhotos,
    updateCurrentUserPhotoWithAlert,
    updateFriendsPhotosWithAlert,

    // –£—Ç–∏–ª–∏—Ç—ã
    getCurrentUserPhotoUrl,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    canUpdatePhotos: isTelegramEnv && !!user?.telegramId,
  }
}
