import { useState, useCallback, useEffect } from 'react'
import { useUserSync } from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import { useQueryClient } from '@tanstack/react-query'
import { userKeys } from '@/hooks/queries/useUserQueries'
import {
  applyStreakFreeze,
  resetStreak as resetStreakAPI,
  checkStreak, // üî• –ù–û–í–´–ô –°–ï–†–í–ò–°
  getStreakFreezes,
  type StreakFreezeData,
  getRecommendedFreezeType,
} from '@/api/streakFreezeService'

/**
 * üßä –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏ —Å—Ç—Ä–∏–∫–∞ (V2 - –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ + React Query)
 */
export function useStreakFreeze() {
  const queryClient = useQueryClient()

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ React Query
  const telegramId = useTelegramId()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const currentUser = userData?.user

  const [freezeData, setFreezeData] = useState<StreakFreezeData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [showModal, setShowModal] = useState(false)
  const [missedDays, setMissedDays] = useState(0)
  const [autoUsedMessage, setAutoUsedMessage] = useState<string | null>(null)
  const [hasProcessedStreakCheck, setHasProcessedStreakCheck] = useState(false)

  // üî• –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const checkAndHandleStreak = useCallback(async () => {
    if (currentUser?.telegramId == null || hasProcessedStreakCheck) return

    console.log(`üßê [V2] Checking streak for user ${currentUser.telegramId}`)
    setIsLoading(true)

    try {
      const streakStatus = await checkStreak(currentUser.telegramId)
      setHasProcessedStreakCheck(true)

      console.log('‚úÖ [V2] Server streak status:', streakStatus)

      if (streakStatus.streakState === 'at_risk') {
        setMissedDays(streakStatus.missedDays)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–º–æ—Ä–æ–∑–∫–∞—Ö
        const freezes = await getStreakFreezes(currentUser.telegramId)
        setFreezeData(freezes)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫—É
        const recommendedType = getRecommendedFreezeType(
          streakStatus.missedDays,
          freezes
        )
        if (recommendedType === 'auto') {
          console.log('üßä [V2] Auto-freeze recommended, applying...')
          // –ê–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ–≤–Ω–æ 1 –¥–µ–Ω—å
          void performFreeze('auto', 1)
        } else {
          console.log('üßä [V2] Manual freeze or reset required, showing modal.')
          setShowModal(true)
        }
      } else if (streakStatus.streakState === 'broken') {
        setMissedDays(streakStatus.missedDays)
        setShowModal(true) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞
      }
    } catch (error) {
      console.error('‚ùå [V2] Failed to check streak status:', error)
    } finally {
      setIsLoading(false)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentUser?.telegramId, hasProcessedStreakCheck])
  // performFreeze —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å - —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ

  useEffect(() => {
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã currentUser —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    const timer = setTimeout(() => {
      void checkAndHandleStreak()
    }, 500)
    return () => clearTimeout(timer)
  }, [checkAndHandleStreak])

  // üî• –®–ê–ì 2: –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç API)
  const performFreeze = useCallback(
    async (freezeType: 'auto' | 'manual', daysToCover: number) => {
      if (currentUser?.telegramId == null) return

      try {
        setIsLoading(true)
        const result = await applyStreakFreeze({
          telegramId: currentUser.telegramId,
          freezeType,
          missedDays: daysToCover,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        setShowModal(false)
        setFreezeData({
          manual: result.remaining.manual,
          auto: result.remaining.auto,
          max: freezeData?.max ?? 3,
          canAccumulate: result.remaining.manual < (freezeData?.max ?? 3),
        })
        setAutoUsedMessage(
          `–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞! –°—Ç—Ä–∏–∫ ${result.currentStreak} –¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`
        )
        setTimeout(() => setAutoUsedMessage(null), 5000)

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º React Query –∫–µ—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await queryClient.invalidateQueries({
          queryKey: userKeys.all,
        })

        console.log('‚úÖ [V2] User data invalidated, streak updated:', {
          currentStreak: result.currentStreak,
          streakFreezes: result.remaining.manual,
          autoFreezes: result.remaining.auto,
        })
      } catch (error) {
        console.error(`‚ùå [V2] Error using ${freezeType} freeze:`, error)
        setAutoUsedMessage(
          `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
      } finally {
        setIsLoading(false)
      }
    },
    [currentUser?.telegramId, freezeData?.max, queryClient]
  )

  const useFreeze = (freezeType: 'auto' | 'manual') =>
    performFreeze(freezeType, missedDays)

  // üî• –®–ê–ì 3: –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç API)
  const resetStreak = useCallback(async () => {
    if (currentUser?.telegramId == null) return
    try {
      setIsLoading(true)
      const result = await resetStreakAPI({
        telegramId: currentUser.telegramId,
      })

      setShowModal(false)
      setAutoUsedMessage('–°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é!')
      setTimeout(() => setAutoUsedMessage(null), 5000)

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º React Query –∫–µ—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await queryClient.invalidateQueries({
        queryKey: userKeys.all,
      })

      console.log('‚úÖ [V2] Streak reset, user data invalidated:', {
        currentStreak: result.currentStreak,
        longestStreak: result.longestStreak,
      })
    } catch (error) {
      console.error('‚ùå [V2] Failed to reset streak:', error)
    } finally {
      setIsLoading(false)
    }
  }, [currentUser?.telegramId, queryClient])

  return {
    freezeData,
    missedDays,
    showModal,
    isLoading,
    autoUsedMessage,
    useFreeze,
    resetStreak,
    closeModal: () => setShowModal(false),
  }
}
