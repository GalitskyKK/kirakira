import { useState, useCallback, useEffect } from 'react'
import { useUserStore } from '@/stores'
import { useMoodStore } from '@/stores/moodStore'
import {
  getStreakFreezes,
  applyStreakFreeze,
  resetStreak as resetStreakAPI,
  checkMissedDays,
  canRecoverStreak,
  getRecommendedFreezeType,
  type StreakFreezeData,
} from '@/api/streakFreezeService'

/**
 * üßä –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏ —Å—Ç—Ä–∏–∫–∞
 */
export function useStreakFreeze() {
  const { currentUser } = useUserStore()

  const [freezeData, setFreezeData] = useState<StreakFreezeData | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [showModal, setShowModal] = useState(false)
  const [missedDays, setMissedDays] = useState(0)
  const [autoUsedMessage, setAutoUsedMessage] = useState<string | null>(null)
  const [hasProcessedMissedDays, setHasProcessedMissedDays] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–æ—Ä–æ–∑–æ–∫
  const loadFreezes = useCallback(async () => {
    if (!currentUser?.telegramId) return

    try {
      setIsLoading(true)
      const data = await getStreakFreezes(currentUser.telegramId)
      setFreezeData(data)
    } catch (error) {
      console.error('Failed to load streak freezes:', error)
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ currentUser.stats
      setFreezeData({
        manual: currentUser.stats.streakFreezes ?? 0,
        auto: currentUser.stats.autoFreezes ?? 0,
        max: 3, // default –¥–ª—è —É—Ä–æ–≤–Ω—è 1
        canAccumulate: true,
      })
    } finally {
      setIsLoading(false)
    }
  }, [
    currentUser?.telegramId,
    currentUser?.stats.streakFreezes,
    currentUser?.stats.autoFreezes,
  ])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è)
  const performFreeze = useCallback(
    async (freezeType: 'auto' | 'manual') => {
      if (!currentUser?.telegramId) return

      try {
        console.log(
          `üßä Using ${freezeType} freeze for user ${currentUser.telegramId}`
        )
        setIsLoading(true)

        const result = await applyStreakFreeze({
          telegramId: currentUser.telegramId,
          freezeType,
          missedDays,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setFreezeData(prev => {
          if (!prev) return null
          return {
            ...prev,
            manual: result.remaining.manual,
            auto: result.remaining.auto,
          }
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ –≤ userStore
        const { updateStats } = useUserStore.getState()
        await updateStats({
          currentStreak: result.currentStreak,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º lastCheckin –≤ moodStore, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã "—Å–±—Ä–æ—Å–∏—Ç—å" –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
        const { setLastCheckin } = useMoodStore.getState()
        const today = new Date()
        setLastCheckin(today)

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setShowModal(false)
        setMissedDays(0)
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasProcessedMissedDays - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (freezeType === 'manual') {
          setAutoUsedMessage(
            `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∞! –°—Ç—Ä–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ ${result.currentStreak} –¥–Ω–µ–π üßä`
          )
          setTimeout(() => setAutoUsedMessage(null), 5000)
        }

        console.log(
          `‚úÖ ${freezeType} freeze used successfully. New streak: ${result.currentStreak}`
        )
      } catch (error) {
        console.error(`‚ùå Error using ${freezeType} freeze:`, error)
        setAutoUsedMessage(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        )
        setTimeout(() => setAutoUsedMessage(null), 5000)
      } finally {
        setIsLoading(false)
      }
    },
    [currentUser?.telegramId, missedDays]
  )

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É
  const useFreeze = useCallback(
    async (freezeType: 'auto' | 'manual') => {
      if (!currentUser?.telegramId || missedDays === 0) return
      await performFreeze(freezeType)
    },
    [currentUser?.telegramId, missedDays, performFreeze]
  )

  // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫ (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–æ–∫)
  const resetStreak = useCallback((): Promise<void> => {
    if (!currentUser?.telegramId) return Promise.resolve()

    const performReset = async () => {
      try {
        console.log(
          'üîÑ Starting streak reset for user:',
          currentUser.telegramId
        )
        setIsLoading(true)

        const result = await resetStreakAPI({
          telegramId: currentUser.telegramId!,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ –≤ userStore
        const { updateStats } = useUserStore.getState()
        await updateStats({
          currentStreak: result.currentStreak,
          longestStreak: result.longestStreak,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º lastCheckin –≤ moodStore, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã "—Å–±—Ä–æ—Å–∏—Ç—å" –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
        const { setLastCheckin } = useMoodStore.getState()
        const today = new Date()
        setLastCheckin(today)

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setShowModal(false)
        setMissedDays(0)
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasProcessedMissedDays - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        setAutoUsedMessage(`–°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é üå±`)
        setTimeout(() => setAutoUsedMessage(null), 5000)

        console.log('‚úÖ Streak reset successfully:', result)
      } catch (error) {
        console.error('Failed to reset streak:', error)
        throw error
      } finally {
        setIsLoading(false)
      }
    }

    return performReset()
  }, [currentUser?.telegramId])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const checkAndHandleMissedDays = useCallback(async () => {
    if (!currentUser?.telegramId || hasProcessedMissedDays) return

    const { lastCheckin } = useMoodStore.getState()
    const missed = checkMissedDays(lastCheckin)

    console.log('üîç Checking missed days:', {
      lastCheckin: lastCheckin?.toISOString(),
      missed,
      hasProcessedMissedDays,
      currentStreak: currentUser?.stats?.currentStreak,
    })

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π - –≤—Å—ë –û–ö
    if (missed === 0) {
      console.log('‚úÖ No missed days, user is up to date')
      setHasProcessedMissedDays(true)
      return
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–∏–∫ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω (currentStreak = 0) –∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
    // –∑–Ω–∞—á–∏—Ç —Å—Ç—Ä–∏–∫ —É–∂–µ –ø–æ—Ç–µ—Ä—è–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    if (currentUser?.stats?.currentStreak === 0 && missed > 0) {
      console.log(
        'üîç Streak already reset (currentStreak = 0), skipping freeze modal'
      )
      setHasProcessedMissedDays(true)
      return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –ò –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–∫
    if (missed > 0 && canRecoverStreak(missed)) {
      setMissedDays(missed)
      setHasProcessedMissedDays(true)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–æ—Ä–æ–∑–∫–∏
      const freezes = await getStreakFreezes(currentUser.telegramId)
      setFreezeData(freezes)

      const recommendedType = getRecommendedFreezeType(missed, freezes)

      if (recommendedType === 'auto') {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫—É
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ —Ö—É–∫
        await performFreeze('auto')
        // –ü–æ—Å–ª–µ –∞–≤—Ç–æ–∑–∞–º–æ—Ä–æ–∑–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å hasProcessedMissedDays
        // —Ç–∞–∫ –∫–∞–∫ performFreeze —É–∂–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        setShowModal(true)
      }
    } else if (missed > 7) {
      // –°—Ç—Ä–∏–∫ –ø–æ—Ç–µ—Ä—è–Ω –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ
      setMissedDays(missed)
      setHasProcessedMissedDays(true)
      setShowModal(true)
    }
  }, [currentUser?.telegramId, useFreeze, hasProcessedMissedDays])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (currentUser?.telegramId && !hasProcessedMissedDays) {
      console.log(
        'üîÑ Initializing streak freeze check for user:',
        currentUser.telegramId
      )
      void loadFreezes()
      void checkAndHandleMissedDays()
    }
  }, [
    currentUser?.telegramId,
    hasProcessedMissedDays,
    loadFreezes,
    checkAndHandleMissedDays,
  ])

  return {
    // –î–∞–Ω–Ω—ã–µ
    freezeData,
    missedDays,
    showModal,
    isLoading,
    autoUsedMessage,

    // –î–µ–π—Å—Ç–≤–∏—è
    loadFreezes,
    useFreeze,
    resetStreak,
    checkMissedDays: checkAndHandleMissedDays,
    setShowModal,
    closeModal: () => {
      setShowModal(false)
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasProcessedMissedDays –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
      // —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
    },
  }
}
