import { useState, useCallback, useEffect } from 'react'
import { useUserStore } from '@/stores'
import { useMoodStore } from '@/stores/moodStore'
import {
  getStreakFreezes,
  useStreakFreeze as useStreakFreezeAPI,
  checkMissedDays,
  canRecoverStreak,
  getRecommendedFreezeType,
  type StreakFreezeData,
} from '@/api/streakFreezeService'

/**
 * üßä –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏ —Å—Ç—Ä–∏–∫–∞
 */
export function useStreakFreeze() {
  const { currentUser } = useUserStore()

  const [freezeData, setFreezeData] = useState<StreakFreezeData | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [showModal, setShowModal] = useState(false)
  const [missedDays, setMissedDays] = useState(0)
  const [autoUsedMessage, setAutoUsedMessage] = useState<string | null>(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–æ—Ä–æ–∑–æ–∫
  const loadFreezes = useCallback(async () => {
    if (!currentUser?.telegramId) return

    try {
      setIsLoading(true)
      const data = await getStreakFreezes(currentUser.telegramId)
      setFreezeData(data)
    } catch (error) {
      console.error('Failed to load streak freezes:', error)
    } finally {
      setIsLoading(false)
    }
  }, [currentUser?.telegramId])

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É
  const useFreeze = useCallback(
    async (freezeType: 'auto' | 'manual') => {
      if (!currentUser?.telegramId || missedDays === 0) return

      try {
        setIsLoading(true)

        const result = await useStreakFreezeAPI({
          telegramId: currentUser.telegramId,
          freezeType,
          missedDays,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setFreezeData(prev => {
          if (!prev) return null
          return {
            ...prev,
            manual: result.remaining.manual,
            auto: result.remaining.auto,
          }
        })

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        setShowModal(false)
        setMissedDays(0)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (freezeType === 'auto') {
          setAutoUsedMessage(
            `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∞! –°—Ç—Ä–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (${result.currentStreak} –¥–Ω–µ–π) üßä`
          )
          setTimeout(() => setAutoUsedMessage(null), 5000)
        }

        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º result, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∏–ø—É Promise<void>
      } catch (error) {
        console.error('Failed to use streak freeze:', error)
        throw error
      } finally {
        setIsLoading(false)
      }
    },
    [currentUser?.telegramId, missedDays]
  )

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const checkAndHandleMissedDays = useCallback(async () => {
    if (!currentUser?.telegramId) return

    const { lastCheckin } = useMoodStore.getState()
    const missed = checkMissedDays(lastCheckin)

    if (missed > 0 && canRecoverStreak(missed)) {
      setMissedDays(missed)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–æ—Ä–æ–∑–∫–∏
      await loadFreezes()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫—É
      const freezes =
        freezeData ?? (await getStreakFreezes(currentUser.telegramId))
      const recommendedType = getRecommendedFreezeType(missed, freezes)

      if (recommendedType === 'auto') {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ-–∑–∞–º–æ—Ä–æ–∑–∫—É
        await useFreeze('auto')
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        setShowModal(true)
      }
    } else if (missed > 7) {
      // –°—Ç—Ä–∏–∫ –ø–æ—Ç–µ—Ä—è–Ω –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ
      setMissedDays(missed)
      setShowModal(true)
    }
  }, [currentUser?.telegramId, loadFreezes, freezeData, useFreeze])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    void loadFreezes()
  }, [loadFreezes])

  return {
    // –î–∞–Ω–Ω—ã–µ
    freezeData,
    missedDays,
    showModal,
    isLoading,
    autoUsedMessage,

    // –î–µ–π—Å—Ç–≤–∏—è
    loadFreezes,
    useFreeze,
    checkMissedDays: checkAndHandleMissedDays,
    setShowModal,
    closeModal: () => setShowModal(false),
  }
}
