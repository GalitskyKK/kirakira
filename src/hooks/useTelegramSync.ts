import { useCallback } from 'react'
import { useUserStore } from '@/stores'
import { useTelegram } from '@/hooks'
import { telegramStorage } from '@/utils/telegramStorage'
import { isOnboardingCompleted } from '@/utils/storage'
import type { TelegramSyncResult } from '@/types/initialization'

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram
 */
export function useTelegramSync() {
  const { user: telegramUser, isReady: telegramReady } = useTelegram()
  const {
    currentUser,
    clearAllUserData,
    clearUserDataOnly,
    syncFromSupabase,
    createTelegramUser,
  } = useUserStore()

  const syncTelegramUser =
    useCallback(async (): Promise<TelegramSyncResult> => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        const isTelegramEnv = !!window.Telegram?.WebApp

        if (!isTelegramEnv) {
          // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –æ—à–∏–±–∫–∞
          return {
            success: true,
            mode: 'browser',
          }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ª—å–∫–æ –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        telegramStorage.initialize()

        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram WebApp —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if (!telegramReady) {
          await Promise.race([
            new Promise<void>(resolve => {
              const checkReady = () => {
                if (telegramReady) {
                  resolve()
                } else {
                  setTimeout(checkReady, 100)
                }
              }
              checkReady()
            }),
            new Promise<void>((_, reject) => {
              setTimeout(
                () => reject(new Error('Telegram WebApp timeout')),
                5000
              )
            }),
          ])
        }

        if (!telegramUser) {
          // –í Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –Ω–æ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º
          return {
            success: true,
            mode: 'browser',
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        const needsSync =
          !currentUser || currentUser.telegramId !== telegramUser.telegramId

        if (needsSync) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π
          const hadCompletedOnboarding = isOnboardingCompleted()

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (hadCompletedOnboarding) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            await clearUserDataOnly()
          } else {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            await clearAllUserData()
          }

          console.log(
            'üîÑ –í—ã–∑—ã–≤–∞–µ–º syncFromSupabase –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (clear):',
            telegramUser.telegramId
          )

          // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
          const telegramUserData: Partial<import('@/types/api').DatabaseUser> =
            {
              first_name: telegramUser.firstName,
              ...(telegramUser.lastName != null && telegramUser.lastName !== ''
                ? { last_name: telegramUser.lastName }
                : {}),
              ...(telegramUser.username != null && telegramUser.username !== ''
                ? { username: telegramUser.username }
                : {}),
              ...(telegramUser.photoUrl != null && telegramUser.photoUrl !== ''
                ? { photo_url: telegramUser.photoUrl }
                : {}),
              ...(telegramUser.languageCode != null &&
              telegramUser.languageCode !== ''
                ? { language_code: telegramUser.languageCode }
                : {}),
            }

          await syncFromSupabase(telegramUser.telegramId, telegramUserData)

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - —Å–æ–∑–¥–∞–µ–º
          const { currentUser: syncedUser } = useUserStore.getState()
          if (!syncedUser) {
            createTelegramUser({
              telegramId: telegramUser.telegramId,
              firstName: telegramUser.firstName,
              lastName: telegramUser.lastName ?? undefined,
              username: telegramUser.username ?? undefined,
              photoUrl: telegramUser.photoUrl ?? undefined,
              authDate: new Date(),
              hash: 'telegram_miniapp',
            })
          }
        } else {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          console.log(
            'üîÑ –í—ã–∑—ã–≤–∞–µ–º syncFromSupabase –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            telegramUser.telegramId
          )

          // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const telegramUserData: Partial<import('@/types/api').DatabaseUser> =
            {
              first_name: telegramUser.firstName,
              ...(telegramUser.lastName != null && telegramUser.lastName !== ''
                ? { last_name: telegramUser.lastName }
                : {}),
              ...(telegramUser.username != null && telegramUser.username !== ''
                ? { username: telegramUser.username }
                : {}),
              ...(telegramUser.photoUrl != null && telegramUser.photoUrl !== ''
                ? { photo_url: telegramUser.photoUrl }
                : {}),
              ...(telegramUser.languageCode != null &&
              telegramUser.languageCode !== ''
                ? { language_code: telegramUser.languageCode }
                : {}),
            }

          await syncFromSupabase(telegramUser.telegramId, telegramUserData)
        }

        return { success: true, mode: 'telegram', user: telegramUser }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : 'Unknown error'
        return { success: false, mode: 'error', error: errorMessage }
      }
    }, [
      telegramUser,
      telegramReady,
      currentUser,
      clearAllUserData,
      clearUserDataOnly,
      syncFromSupabase,
      createTelegramUser,
    ])

  return {
    syncTelegramUser,
    telegramUser,
    telegramReady,
    hasTelegramUser: !!telegramUser,
  }
}
