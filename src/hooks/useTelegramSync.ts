import { useCallback } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { useTelegram } from '@/hooks'
import { telegramStorage } from '@/utils/telegramStorage'
import { isOnboardingCompleted } from '@/utils/storage'
import {
  useClearUserData,
  useSyncUserWithData,
  useUserSync,
  userKeys,
  moodKeys,
  gardenKeys,
} from '@/hooks/queries'
import { clearAllData } from '@/utils/storage'
import type { TelegramSyncResult } from '@/types/initialization'

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram (v2 - React Query)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Query –º—É—Ç–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö stores
 */
export function useTelegramSync() {
  const { user: telegramUser, isReady: telegramReady } = useTelegram()
  const queryClient = useQueryClient()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const telegramId = telegramUser?.telegramId
  const { data: userData } = useUserSync(
    telegramId ?? undefined,
    telegramId != null
  )
  const currentUser = userData?.user

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const clearUserDataMutation = useClearUserData()
  const syncUserMutation = useSyncUserWithData()

  const syncTelegramUser =
    useCallback(async (): Promise<TelegramSyncResult> => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        const isTelegramEnv = !!window.Telegram?.WebApp

        if (!isTelegramEnv) {
          // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –æ—à–∏–±–∫–∞
          return {
            success: true,
            mode: 'browser',
          }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ª—å–∫–æ –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        telegramStorage.initialize()

        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram WebApp —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if (!telegramReady) {
          await Promise.race([
            new Promise<void>(resolve => {
              const checkReady = () => {
                if (telegramReady) {
                  resolve()
                } else {
                  setTimeout(checkReady, 100)
                }
              }
              checkReady()
            }),
            new Promise<void>((_, reject) => {
              setTimeout(
                () => reject(new Error('Telegram WebApp timeout')),
                5000
              )
            }),
          ])
        }

        if (!telegramUser) {
          // –í Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –Ω–æ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º
          return {
            success: true,
            mode: 'browser',
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        const needsSync =
          !currentUser || currentUser.telegramId !== telegramUser.telegramId

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const telegramUserData: Partial<import('@/types/api').DatabaseUser> = {
          first_name: telegramUser.firstName,
          ...(telegramUser.lastName != null && telegramUser.lastName !== ''
            ? { last_name: telegramUser.lastName }
            : {}),
          ...(telegramUser.username != null && telegramUser.username !== ''
            ? { username: telegramUser.username }
            : {}),
          ...(telegramUser.photoUrl != null && telegramUser.photoUrl !== ''
            ? { photo_url: telegramUser.photoUrl }
            : {}),
          ...(telegramUser.languageCode != null &&
          telegramUser.languageCode !== ''
            ? { language_code: telegramUser.languageCode }
            : {}),
        }

        if (needsSync) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π
          const hadCompletedOnboarding = isOnboardingCompleted()

          console.log(
            `üîÑ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (onboarding: ${hadCompletedOnboarding}):`,
            telegramUser.telegramId
          )

          // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∫—Ä–æ–º–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          if (hadCompletedOnboarding) {
            // –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            clearAllData()
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            if (typeof Storage !== 'undefined') {
              localStorage.setItem(
                'kirakira_onboarding_completed',
                String(true)
              )
            }
          } else {
            // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clearAllData()
          }

          // –û—á–∏—â–∞–µ–º Telegram CloudStorage
          if (telegramStorage.isAvailable) {
            if (hadCompletedOnboarding) {
              // –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ CloudStorage (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥)
              await telegramStorage.clearUserData()
            } else {
              await telegramStorage.clearAllData()
            }
          }

          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ queries –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          await Promise.all([
            queryClient.invalidateQueries({ queryKey: userKeys.all }),
            queryClient.invalidateQueries({ queryKey: moodKeys.all }),
            queryClient.invalidateQueries({ queryKey: gardenKeys.all }),
          ])

          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          await clearUserDataMutation.mutateAsync({
            telegramId: telegramUser.telegramId,
          })

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
          await syncUserMutation.mutateAsync({
            telegramId: telegramUser.telegramId,
            userData: telegramUserData,
          })

          console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω')
        } else {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          console.log(
            'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            telegramUser.telegramId
          )

          await syncUserMutation.mutateAsync({
            telegramId: telegramUser.telegramId,
            userData: telegramUserData,
          })

          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω')
        }

        return { success: true, mode: 'telegram', user: telegramUser }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : 'Unknown error'
        console.error('‚ùå Telegram sync error:', error)
        return { success: false, mode: 'error', error: errorMessage }
      }
    }, [
      telegramUser,
      telegramReady,
      currentUser,
      clearUserDataMutation,
      syncUserMutation,
      queryClient,
    ])

  return {
    syncTelegramUser,
    telegramUser,
    telegramReady,
    hasTelegramUser: !!telegramUser,
  }
}
