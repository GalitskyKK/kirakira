import { useCallback } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { userKeys, moodKeys, gardenKeys } from '@/hooks/queries'
import type { StoresSyncResult } from '@/types/initialization'

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ stores —Å —Å–µ—Ä–≤–µ—Ä–æ–º (v2 - React Query)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Query invalidate –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö stores
 */
export function useStoresSync() {
  const queryClient = useQueryClient()

  const syncStores = useCallback(
    async (telegramId?: number): Promise<StoresSyncResult> => {
      try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å Telegram ID - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º queries –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (telegramId != null && telegramId > 0) {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è stores –¥–ª—è:', telegramId)

          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ queries —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          await Promise.all([
            queryClient.invalidateQueries({
              queryKey: userKeys.sync(telegramId),
              refetchType: 'active', // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ queries
            }),
            queryClient.invalidateQueries({
              queryKey: moodKeys.sync(telegramId),
              refetchType: 'active',
            }),
            queryClient.invalidateQueries({
              queryKey: gardenKeys.sync(telegramId),
              refetchType: 'active',
            }),
          ])

          console.log('‚úÖ Stores —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ React Query')
        } else {
          console.log('‚ÑπÔ∏è Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞')
        }

        return { success: true }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : 'Stores sync failed'
        console.error('‚ùå Stores sync error:', error)
        return { success: false, error: errorMessage }
      }
    },
    [queryClient]
  )

  return {
    syncStores,
  }
}
