/**
 * üìä Profile Hook (v2 - Refactored)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Query –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä—è–º—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –≤ —Ö—É–∫–µ
 */

import {
  useOwnProfile,
  useFriendProfile,
  useAddExperience,
} from '@/hooks/queries'
import { useUserSync } from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import type { ProfileData } from '@/types/api'

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Query –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */
export function useProfile() {
  const telegramId = useTelegramId()
  useUserSync(telegramId, !!telegramId)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  const {
    data: profileData,
    isLoading,
    error: queryError,
    refetch: reloadProfile,
  } = useOwnProfile(telegramId, !!telegramId)

  // Mutation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
  const addExperienceMutation = useAddExperience()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–æ—Å—Ç–æ refetch query)
  const loadProfile = async (
    customTelegramId?: number
  ): Promise<ProfileData | null> => {
    if (customTelegramId && customTelegramId !== telegramId) {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥—Ä—É–≥–æ–π ID - —ç—Ç–æ –Ω–µ –Ω–∞—à –ø—Ä–æ—Ñ–∏–ª—å
      console.warn('Use useFriendProfile hook for friend profiles')
      return null
    }

    const result = await reloadProfile()
    return result.data ?? null
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
  const addExperience = async (
    experiencePoints: number,
    reason: string = 'Manual'
  ) => {
    if (!telegramId) {
      console.error('‚ùå No user logged in')
      return null
    }

    try {
      const result = await addExperienceMutation.mutateAsync({
        telegramId,
        experiencePoints,
        reason,
      })

      if (result) {
        console.log(`‚úÖ Added ${experiencePoints} XP for ${reason}`)
        if (result.leveledUp) {
          console.log(`üéâ Level up! New level: ${result.level}`)
        }
      }

      return result
    } catch (error) {
      console.error('‚ùå Failed to add experience:', error)
      return null
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = () => {
    // –í React Query –æ—à–∏–±–∫–∞ –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    // –ù–æ –º–æ–∂–Ω–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å refetch –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    reloadProfile()
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    profile: profileData ?? null,
    isLoading: isLoading || addExperienceMutation.isPending,
    error: queryError?.message ?? addExperienceMutation.error?.message ?? null,

    // Actions
    loadProfile,
    addExperience,
    clearError,
  }
}

/**
 * –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∞
 */
export function useFriendProfileData(friendTelegramId: number | undefined) {
  const currentUserTelegramId = useTelegramId()
  useUserSync(currentUserTelegramId, !!currentUserTelegramId)

  const {
    data: friendProfile,
    isLoading,
    error: queryError,
    refetch: reloadFriendProfile,
  } = useFriendProfile(
    currentUserTelegramId,
    friendTelegramId,
    !!currentUserTelegramId && !!friendTelegramId
  )

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∞
  const loadFriendProfile = async (
    customFriendId: number
  ): Promise<ProfileData | null> => {
    if (!currentUserTelegramId) {
      console.error('‚ùå No user logged in')
      return null
    }

    if (customFriendId !== friendTelegramId) {
      console.warn('Friend ID mismatch')
      return null
    }

    const result = await reloadFriendProfile()
    return result.data ?? null
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    friendProfile: friendProfile ?? null,
    isLoading,
    error: queryError?.message ?? null,

    // Actions
    loadFriendProfile,
  }
}
