/**
 * Hook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∞–¥–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { useCallback, useRef, useEffect } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import type { ChallengeMetric, GardenElement, MoodEntry } from '@/types'
import {
  useGardenSync,
  useMoodSync,
  useUpdateChallengeProgress,
  useChallengeList,
} from '@/hooks/queries'
import { useUserSync } from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import { authenticatedFetch } from '@/utils/apiClient'

export function useChallengeIntegration() {
  const telegramId = useTelegramId()
  const queryClient = useQueryClient()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const userId = userData?.user?.id

  // ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º currentUser –∏–∑ React Query –≤–º–µ—Å—Ç–æ Zustand
  const currentUser = userData?.user

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º v2 —Ö—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { data: gardenData } = useGardenSync(telegramId, !!telegramId)
  const { data: moodData } = useMoodSync(
    telegramId,
    userId,
    !!telegramId && !!userId
  )

  // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ —á–µ—Ä–µ–∑ React Query –≤–º–µ—Å—Ç–æ Zustand
  const { data: challengesData } = useChallengeList(telegramId, !!telegramId)
  const challenges = challengesData?.challenges ?? []
  const userParticipations = challengesData?.userParticipations ?? []

  const updateProgressMutation = useUpdateChallengeProgress()

  // üîë –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ mutation –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è callbacks
  const updateProgressMutationRef = useRef(updateProgressMutation)
  updateProgressMutationRef.current = updateProgressMutation

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
  const calculateChallengeMetrics = useCallback(
    (challengeStartDate: Date): Record<ChallengeMetric, number> => {
      const startTime = challengeStartDate.getTime()

      // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂
      const gardenElementsAfterStart =
        gardenData?.elements.filter((el: GardenElement) => {
          const elTime = new Date(el.unlockDate).getTime()
          return elTime >= startTime
        }) || []

      // –ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
      const moodEntriesAfterStart =
        moodData?.moods.filter((mood: MoodEntry) => {
          const moodTime = new Date(mood.date).getTime()
          return moodTime >= startTime
        }) || []

      const metrics = {
        garden_elements_count: gardenElementsAfterStart.length,
        rare_elements_count: gardenElementsAfterStart.filter(
          (el: GardenElement) =>
            ['rare', 'epic', 'legendary'].includes(el.rarity)
        ).length,
        garden_diversity: new Set(
          gardenElementsAfterStart.map((el: GardenElement) => el.type)
        ).size,
        mood_entries_count: moodEntriesAfterStart.length,
        streak_days: Math.max(
          0,
          Math.floor((Date.now() - startTime) / (1000 * 60 * 60 * 24))
        ),
        friend_interactions: 0,
      }

      return metrics
    },
    [gardenData, moodData]
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
  const getActiveParticipations = useCallback(() => {
    return userParticipations.filter(
      participation =>
        participation.status === 'joined' || participation.status === 'active'
    )
  }, [userParticipations])

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  const updateChallengeProgress = useCallback(async () => {
    if (!currentUser?.telegramId) {
      return
    }

    const activeParticipations = getActiveParticipations()

    if (activeParticipations.length === 0) {
      return false
    }

    try {
      console.log(
        `üßÆ Requesting server calculation for ${activeParticipations.length} challenges`
      )

      // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      const response = await authenticatedFetch(
        '/api/challenges?action=calculate-all-progress',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            telegramId: currentUser.telegramId,
            challengeIds: activeParticipations.map(p => p.challengeId),
          }),
        }
      )

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()

      if (result.success) {
        console.log(
          `‚úÖ Server calculated progress for ${result.data.updatedChallenges} challenges`
        )

        // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        queryClient.invalidateQueries({
          queryKey: ['challenges', currentUser.telegramId],
        })

        return true
      } else {
        console.error(`‚ùå Server calculation failed: ${result.error}`)
        return false
      }
    } catch (error) {
      console.error(`‚ùå Failed to request server calculation:`, error)
      // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
      if (error instanceof Error) {
        console.error(`Network error: ${error.message}`)
      }
      return false
    }
  }, [currentUser, getActiveParticipations, queryClient])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  const forceUpdateAllChallenges = useCallback(async () => {
    if (!currentUser?.telegramId) return

    const activeParticipations = getActiveParticipations()

    for (const participation of activeParticipations) {
      const challenge = challenges.find(c => c.id === participation.challengeId)
      if (!challenge) {
        console.warn(`‚ö†Ô∏è Challenge ${participation.challengeId} not found`)
        continue
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
      const startDate = participation.joinedAt

      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const cappedValue = Math.min(currentValue, targetValue)

      // –ù–µ —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (cappedValue >= participation.currentProgress) {
        try {
          await updateProgressMutationRef.current.mutateAsync({
            challengeId: participation.challengeId,
            telegramId: currentUser.telegramId,
            metric,
            value: cappedValue,
          })

          console.log(
            `üîÑ Force updated challenge: ${participation.challengeId} - ${metric}: ${cappedValue}/${targetValue}`
          )
        } catch (error) {
          console.error(`‚ùå Failed to force update challenge:`, error)
        }
      } else {
        console.log(
          `‚ö†Ô∏è Force update skipped for challenge ${participation.challengeId}: would decrease progress ${participation.currentProgress} ‚Üí ${cappedValue}`
        )
      }
    }
  }, [
    currentUser,
    calculateChallengeMetrics,
    getActiveParticipations,
    challenges,
  ])

  // ‚ùå –£–î–ê–õ–ï–ù–´: useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  // –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª:
  // 1. updateChallengeProgress() ‚Üí mutate
  // 2. mutate ‚Üí invalidate cache
  // 3. cache invalidate ‚Üí refetch
  // 4. refetch ‚Üí –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí useEffect —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–Ω–æ–≤–∞
  // 5. GOTO 1
  //
  // ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑:
  // - onMoodEntryAdded() (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
  // - onGardenElementAdded() (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞)
  // - forceUpdateAllChallenges() (—Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á—ë—Ç)

  // React Query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∏ —á–µ—Ä–µ–∑ useChallengeList
  // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Zustand loadChallenges

  // ‚ùå –£–î–ê–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  // React Query –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º refetch, –Ω–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ refetchInterval –≤ useChallengeList

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  const recalculateAllChallenges = useCallback(async () => {
    if (!currentUser?.telegramId) return

    console.log('üîÑ Manual recalculation of all challenges...')

    const activeParticipations = getActiveParticipations()
    console.log(`üìã Found ${activeParticipations.length} active participations`)

    for (const participation of activeParticipations) {
      const challenge = challenges.find(c => c.id === participation.challengeId)
      if (!challenge) {
        console.warn(`‚ö†Ô∏è Challenge ${participation.challengeId} not found`)
        continue
      }

      const startDate = participation.joinedAt

      console.log(`üîÑ Recalculating ${challenge.title}`)
      console.log(`üîÑ Joined time: ${participation.joinedAt.getTime()}`)
      console.log(`üîÑ Challenge start time: ${challenge.startDate.getTime()}`)
      console.log(`üîÑ Start date: ${startDate.toISOString()}`)

      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      const cappedValue = Math.min(currentValue, targetValue)

      console.log(
        `üîÑ Recalculating ${challenge.title}: ${cappedValue}/${targetValue}`
      )

      try {
        await updateProgressMutationRef.current.mutateAsync({
          challengeId: participation.challengeId,
          telegramId: currentUser.telegramId,
          metric,
          value: cappedValue,
        })
        console.log(`‚úÖ Recalculated ${challenge.title}: ${cappedValue}`)
      } catch (error) {
        console.error(`‚ùå Failed to recalculate ${challenge.title}:`, error)
      }
    }
  }, [
    currentUser,
    getActiveParticipations,
    calculateChallengeMetrics,
    challenges,
  ])

  return {
    updateChallengeProgress,
    forceUpdateAllChallenges,
    recalculateAllChallenges,
    calculateChallengeMetrics,
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
export function useChallengeGardenIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()

  // üîë –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è callback
  const updateProgressRef = useRef(updateChallengeProgress)
  useEffect(() => {
    updateProgressRef.current = updateChallengeProgress
  }, [updateChallengeProgress])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥
  const onGardenElementAdded = useCallback(async () => {
    try {
      await updateProgressRef.current()
    } catch (error) {
      // –û—à–∏–±–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, —Ç.–∫. –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }
  }, []) // üîë –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞

  return {
    onGardenElementAdded,
  }
}

export function useChallengeMoodIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()

  // üîë –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è callback
  const updateProgressRef = useRef(updateChallengeProgress)
  useEffect(() => {
    updateProgressRef.current = updateChallengeProgress
  }, [updateChallengeProgress])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const onMoodEntryAdded = useCallback(async () => {
    try {
      await updateProgressRef.current()
    } catch (error) {
      // –û—à–∏–±–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, —Ç.–∫. –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }
  }, []) // üîë –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞

  return {
    onMoodEntryAdded,
  }
}
