/**
 * Hook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∞–¥–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { useEffect, useCallback } from 'react'
import { useGardenStore } from '@/stores'
import { useMoodStore } from '@/stores'
import { useChallengeStore } from '@/stores/challengeStore'
import { useUserStore } from '@/stores'
import type { ChallengeMetric } from '@/types/challenges'

interface ChallengeProgressUpdate {
  readonly challengeId: string
  readonly metric: ChallengeMetric
  readonly newValue: number
}

export function useChallengeIntegration() {
  const { currentGarden } = useGardenStore()
  const { moodHistory } = useMoodStore()
  const { userParticipations, updateProgress, loadChallenges } =
    useChallengeStore()
  const { currentUser } = useUserStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
  const calculateChallengeMetrics = useCallback(
    (challengeStartDate: Date): Record<ChallengeMetric, number> => {
      const startTime = challengeStartDate.getTime()

      return {
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        garden_elements_count:
          currentGarden?.elements.filter(
            el => el.unlockDate.getTime() >= startTime
          ).length || 0,

        // –†–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        rare_elements_count:
          currentGarden?.elements.filter(
            el =>
              el.unlockDate.getTime() >= startTime &&
              ['rare', 'epic', 'legendary'].includes(el.rarity)
          ).length || 0,

        // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∞–¥–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞)
        garden_diversity: new Set(
          currentGarden?.elements
            .filter(el => el.unlockDate.getTime() >= startTime)
            .map(el => el.type) || []
        ).size,

        // –ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        mood_entries_count: moodHistory.filter(
          mood => mood.date.getTime() >= startTime
        ).length,

        // –°—Ç—Ä–∏–∫ –¥–Ω–µ–π (—Å—á–∏—Ç–∞–µ–º —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
        streak_days: Math.max(
          0,
          Math.floor((Date.now() - startTime) / (1000 * 60 * 60 * 24))
        ),

        // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        friend_interactions: 0,
      }
    },
    [currentGarden, moodHistory]
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
  const getActiveParticipations = useCallback(() => {
    return userParticipations.filter(
      participation =>
        participation.status === 'joined' || participation.status === 'active'
    )
  }, [userParticipations])

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const updateChallengeProgress = useCallback(async () => {
    if (!currentUser?.telegramId) return

    const activeParticipations = getActiveParticipations()
    const updates: ChallengeProgressUpdate[] = []

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–∏—è–º
    for (const participation of activeParticipations) {
      // –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–ª–µ–Ω–¥–∂ –≤ store
      const challenge = useChallengeStore
        .getState()
        .challenges.find(c => c.id === participation.challengeId)
      if (!challenge) continue

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
      const startDate = new Date(
        Math.max(
          participation.joinedAt.getTime(),
          challenge.startDate.getTime()
        )
      )

      // –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const cappedValue = Math.min(currentValue, targetValue)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
      if (cappedValue !== participation.currentProgress) {
        updates.push({
          challengeId: participation.challengeId,
          metric,
          newValue: cappedValue,
        })

        console.log(
          `üìä Challenge ${challenge.title}: ${cappedValue}/${targetValue} (${Math.round(
            (cappedValue / targetValue) * 100
          )}%)`
        )
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for (const update of updates) {
      try {
        await updateProgress(
          update.challengeId,
          currentUser.telegramId,
          update.metric,
          update.newValue
        )

        console.log(
          `‚úÖ Updated challenge progress: ${update.challengeId} - ${update.metric}: ${update.newValue}`
        )
      } catch (error) {
        console.error(`‚ùå Failed to update challenge progress:`, error)
      }
    }

    return updates.length > 0
  }, [
    currentUser,
    calculateChallengeMetrics,
    getActiveParticipations,
    updateProgress,
  ])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  const forceUpdateAllChallenges = useCallback(async () => {
    if (!currentUser?.telegramId) return

    const activeParticipations = getActiveParticipations()

    for (const participation of activeParticipations) {
      const challenge = useChallengeStore
        .getState()
        .challenges.find(c => c.id === participation.challengeId)
      if (!challenge) continue

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
      const startDate = new Date(
        Math.max(
          participation.joinedAt.getTime(),
          challenge.startDate.getTime()
        )
      )

      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const cappedValue = Math.min(currentValue, targetValue)

      try {
        await updateProgress(
          participation.challengeId,
          currentUser.telegramId,
          metric,
          cappedValue
        )

        console.log(
          `üîÑ Force updated challenge: ${participation.challengeId} - ${metric}: ${cappedValue}/${targetValue}`
        )
      } catch (error) {
        console.error(`‚ùå Failed to force update challenge:`, error)
      }
    }
  }, [
    currentUser,
    calculateChallengeMetrics,
    getActiveParticipations,
    updateProgress,
  ])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∞–¥—É
  useEffect(() => {
    if (!currentGarden || !currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∞–¥–∞
    void updateChallengeProgress()
  }, [currentGarden?.elements.length, updateChallengeProgress, currentUser])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (!currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    void updateChallengeProgress()
  }, [moodHistory.length, updateChallengeProgress, currentUser])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä–∏–∫–µ
  useEffect(() => {
    if (!currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∏–∫–∞
    void updateChallengeProgress()
  }, [currentUser?.stats.currentStreak, updateChallengeProgress])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  useEffect(() => {
    if (currentUser?.telegramId && userParticipations.length === 0) {
      void loadChallenges(currentUser.telegramId)
    }
  }, [currentUser?.telegramId, userParticipations.length, loadChallenges])

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  useEffect(() => {
    if (!currentUser?.telegramId) return

    const interval = setInterval(
      () => {
        void updateChallengeProgress()
      },
      5 * 60 * 1000
    ) // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval)
  }, [currentUser?.telegramId, updateChallengeProgress])

  return {
    updateChallengeProgress,
    forceUpdateAllChallenges,
    calculateChallengeMetrics,
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
export function useChallengeGardenIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()
  const { currentUser } = useUserStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥
  const onGardenElementAdded = useCallback(async () => {
    if (!currentUser?.telegramId) return

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    setTimeout(async () => {
      await updateChallengeProgress()
    }, 1000)
  }, [currentUser?.telegramId, updateChallengeProgress])

  return {
    onGardenElementAdded,
  }
}

export function useChallengeMoodIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()
  const { currentUser } = useUserStore()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const onMoodEntryAdded = useCallback(async () => {
    if (!currentUser?.telegramId) return

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    setTimeout(async () => {
      await updateChallengeProgress()
    }, 1000)
  }, [currentUser?.telegramId, updateChallengeProgress])

  return {
    onMoodEntryAdded,
  }
}
