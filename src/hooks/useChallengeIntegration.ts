/**
 * Hook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∞–¥–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { useEffect, useCallback } from 'react'
import type { ChallengeMetric, GardenElement, MoodEntry } from '@/types'
import {
  useGardenSync,
  useMoodSync,
  useUpdateChallengeProgress,
  useChallengeList,
} from '@/hooks/queries'
import { useUserSync } from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'

interface ChallengeProgressUpdate {
  readonly challengeId: string
  readonly metric: ChallengeMetric
  readonly newValue: number
}

export function useChallengeIntegration() {
  const telegramId = useTelegramId()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const userId = userData?.user?.id

  // ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º currentUser –∏–∑ React Query –≤–º–µ—Å—Ç–æ Zustand
  const currentUser = userData?.user

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º v2 —Ö—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { data: gardenData } = useGardenSync(telegramId, !!telegramId)
  const { data: moodData } = useMoodSync(
    telegramId,
    userId,
    !!telegramId && !!userId
  )

  // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ —á–µ—Ä–µ–∑ React Query –≤–º–µ—Å—Ç–æ Zustand
  const { data: challengesData } = useChallengeList(telegramId, !!telegramId)
  const challenges = challengesData?.challenges ?? []
  const userParticipations = challengesData?.userParticipations ?? []

  const updateProgressMutation = useUpdateChallengeProgress()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
  const calculateChallengeMetrics = useCallback(
    (challengeStartDate: Date): Record<ChallengeMetric, number> => {
      const startTime = challengeStartDate.getTime()

      console.log(
        `\nüìä Calculating metrics from:`,
        challengeStartDate.toISOString()
      )
      console.log(`üóìÔ∏è Start time (ms):`, startTime)
      console.log(
        `üì¶ Garden data:`,
        gardenData ? `${gardenData.elements.length} elements` : 'null'
      )
      console.log(
        `üòä Mood data:`,
        moodData ? `${moodData.moods.length} moods` : 'null'
      )

      // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–∞–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂
      const gardenElementsAfterStart =
        gardenData?.elements.filter((el: GardenElement) => {
          const elTime = new Date(el.unlockDate).getTime()
          return elTime >= startTime
        }) || []

      // –ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
      const moodEntriesAfterStart =
        moodData?.moods.filter((mood: MoodEntry) => {
          const moodTime = new Date(mood.date).getTime()
          return moodTime >= startTime
        }) || []

      console.log(
        `üå± Garden elements after start:`,
        gardenElementsAfterStart.length
      )
      console.log(`üòä Mood entries after start:`, moodEntriesAfterStart.length)

      const metrics = {
        garden_elements_count: gardenElementsAfterStart.length,
        rare_elements_count: gardenElementsAfterStart.filter(
          (el: GardenElement) =>
            ['rare', 'epic', 'legendary'].includes(el.rarity)
        ).length,
        garden_diversity: new Set(
          gardenElementsAfterStart.map((el: GardenElement) => el.type)
        ).size,
        mood_entries_count: moodEntriesAfterStart.length,
        streak_days: Math.max(
          0,
          Math.floor((Date.now() - startTime) / (1000 * 60 * 60 * 24))
        ),
        friend_interactions: 0,
      }

      console.log(`‚úÖ Calculated metrics:`, metrics)

      return metrics
    },
    [gardenData, moodData]
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
  const getActiveParticipations = useCallback(() => {
    return userParticipations.filter(
      participation =>
        participation.status === 'joined' || participation.status === 'active'
    )
  }, [userParticipations])

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const updateChallengeProgress = useCallback(async () => {
    if (!currentUser?.telegramId) {
      console.warn('‚ö†Ô∏è updateChallengeProgress: No current user')
      return
    }

    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
    console.log('üîÑ updateChallengeProgress called')
    console.log('üë§ User ID:', currentUser.telegramId)
    console.log('üìã Total participations:', userParticipations.length)
    console.log(
      'üìã Participations:',
      userParticipations.map(p => ({
        id: p.id.substring(0, 8),
        challengeId: p.challengeId.substring(0, 8),
        status: p.status,
        currentProgress: p.currentProgress,
      }))
    )
    console.log('üéØ Total challenges loaded:', challenges.length)
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')

    const activeParticipations = getActiveParticipations()
    console.log('‚úÖ Active participations:', activeParticipations.length)

    if (activeParticipations.length === 0) {
      console.log('‚ÑπÔ∏è No active participations found')
      return false
    }

    const updates: ChallengeProgressUpdate[] = []

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–∏—è–º
    for (const participation of activeParticipations) {
      console.log(`\nüîç Processing participation:`, {
        id: participation.id.substring(0, 8),
        challengeId: participation.challengeId,
        status: participation.status,
        currentProgress: participation.currentProgress,
      })

      // –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ React Query –¥–∞–Ω–Ω—ã—Ö
      const challenge = challenges.find(c => c.id === participation.challengeId)
      if (!challenge) {
        console.warn(
          `‚ö†Ô∏è Challenge ${participation.challengeId} not found in loaded challenges`
        )
        console.warn(
          'Available challenge IDs:',
          challenges.map(c => c.id)
        )
        continue
      }

      console.log(`‚úÖ Found challenge:`, {
        id: challenge.id,
        title: challenge.title,
        status: challenge.status,
        metric: challenge.requirements.metric,
        targetValue: challenge.requirements.targetValue,
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
      const joinedTime = participation.joinedAt.getTime()
      const challengeStartTime = challenge.startDate.getTime()
      const maxTime = Math.max(joinedTime, challengeStartTime)
      const startDate = new Date(maxTime)

      console.log(`\nüéØ Processing challenge: ${challenge.title}`)
      console.log(
        `üìÖ Participation joined: ${participation.joinedAt.toISOString()}`
      )
      console.log(`üïê Participation joined time: ${joinedTime}`)
      console.log(`üìÖ Challenge start: ${challenge.startDate.toISOString()}`)
      console.log(`üïê Challenge start time: ${challengeStartTime}`)
      console.log(`üïê Max time: ${maxTime}`)
      console.log(`üìÖ Using start date: ${startDate.toISOString()}`)
      console.log(`üïê Using start time: ${startDate.getTime()}`)
      console.log(`üìä Current DB progress: ${participation.currentProgress}`)

      // –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      console.log(`üìà Metric: ${metric}`)
      console.log(`üî¢ Calculated value: ${currentValue}`)
      console.log(`üéØ Target value: ${targetValue}`)

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const cappedValue = Math.min(currentValue, targetValue)
      console.log(`üß¢ Capped value: ${cappedValue}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω–µ —É–º–µ–Ω—å—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (
        cappedValue !== participation.currentProgress &&
        cappedValue >= participation.currentProgress
      ) {
        updates.push({
          challengeId: participation.challengeId,
          metric,
          newValue: cappedValue,
        })

        console.log(
          `üìä Challenge ${challenge.title}: ${participation.currentProgress} ‚Üí ${cappedValue}/${targetValue} (${Math.round(
            (cappedValue / targetValue) * 100
          )}%)`
        )
      } else if (cappedValue < participation.currentProgress) {
        console.log(
          `‚ö†Ô∏è Challenge ${challenge.title}: Skipping progress decrease ${participation.currentProgress} ‚Üí ${cappedValue}`
        )
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ React Query –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞
    for (const update of updates) {
      try {
        await updateProgressMutation.mutateAsync({
          challengeId: update.challengeId,
          telegramId: currentUser.telegramId,
          metric: update.metric,
          value: update.newValue,
        })

        console.log(
          `‚úÖ Updated challenge progress: ${update.challengeId} - ${update.metric}: ${update.newValue}`
        )
      } catch (error) {
        console.error(`‚ùå Failed to update challenge progress:`, error)
      }
    }

    return updates.length > 0
  }, [
    currentUser,
    calculateChallengeMetrics,
    getActiveParticipations,
    updateProgressMutation,
    challenges,
  ])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  const forceUpdateAllChallenges = useCallback(async () => {
    if (!currentUser?.telegramId) return

    const activeParticipations = getActiveParticipations()

    for (const participation of activeParticipations) {
      const challenge = challenges.find(c => c.id === participation.challengeId)
      if (!challenge) {
        console.warn(`‚ö†Ô∏è Challenge ${participation.challengeId} not found`)
        continue
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
      const startDate = new Date(
        Math.max(
          participation.joinedAt.getTime(),
          challenge.startDate.getTime()
        )
      )

      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const cappedValue = Math.min(currentValue, targetValue)

      // –ù–µ —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (cappedValue >= participation.currentProgress) {
        try {
          await updateProgressMutation.mutateAsync({
            challengeId: participation.challengeId,
            telegramId: currentUser.telegramId,
            metric,
            value: cappedValue,
          })

          console.log(
            `üîÑ Force updated challenge: ${participation.challengeId} - ${metric}: ${cappedValue}/${targetValue}`
          )
        } catch (error) {
          console.error(`‚ùå Failed to force update challenge:`, error)
        }
      } else {
        console.log(
          `‚ö†Ô∏è Force update skipped for challenge ${participation.challengeId}: would decrease progress ${participation.currentProgress} ‚Üí ${cappedValue}`
        )
      }
    }
  }, [
    currentUser,
    calculateChallengeMetrics,
    getActiveParticipations,
    updateProgressMutation,
    challenges,
  ])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∞–¥—É
  useEffect(() => {
    if (!gardenData?.elements || !currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∞–¥–∞
    void updateChallengeProgress()
  }, [gardenData?.elements.length, updateChallengeProgress, currentUser])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (!moodData?.moods || !currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    void updateChallengeProgress()
  }, [moodData?.moods.length, updateChallengeProgress, currentUser])

  // Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä–∏–∫–µ
  useEffect(() => {
    if (!currentUser) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∏–∫–∞
    void updateChallengeProgress()
  }, [currentUser?.stats.currentStreak, updateChallengeProgress])

  // React Query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∏ —á–µ—Ä–µ–∑ useChallengeList
  // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Zustand loadChallenges

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  useEffect(() => {
    if (!currentUser?.telegramId) return

    const interval = setInterval(
      () => {
        void updateChallengeProgress()
      },
      5 * 60 * 1000
    ) // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval)
  }, [currentUser?.telegramId, updateChallengeProgress])

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
  const recalculateAllChallenges = useCallback(async () => {
    if (!currentUser?.telegramId) return

    console.log('üîÑ Manual recalculation of all challenges...')

    const activeParticipations = getActiveParticipations()
    console.log(`üìã Found ${activeParticipations.length} active participations`)

    for (const participation of activeParticipations) {
      const challenge = challenges.find(c => c.id === participation.challengeId)
      if (!challenge) {
        console.warn(`‚ö†Ô∏è Challenge ${participation.challengeId} not found`)
        continue
      }

      const joinedTime = participation.joinedAt.getTime()
      const challengeStartTime = challenge.startDate.getTime()
      const maxTime = Math.max(joinedTime, challengeStartTime)
      const startDate = new Date(maxTime)

      console.log(`üîÑ Recalculating ${challenge.title}`)
      console.log(`üîÑ Joined time: ${joinedTime}`)
      console.log(`üîÑ Challenge start time: ${challengeStartTime}`)
      console.log(`üîÑ Max time: ${maxTime}`)
      console.log(`üîÑ Start date: ${startDate.toISOString()}`)

      const challengeMetrics = calculateChallengeMetrics(startDate)
      const metric = challenge.requirements.metric
      const currentValue = challengeMetrics[metric]
      const targetValue = challenge.requirements.targetValue

      const cappedValue = Math.min(currentValue, targetValue)

      console.log(
        `üîÑ Recalculating ${challenge.title}: ${cappedValue}/${targetValue}`
      )

      try {
        await updateProgressMutation.mutateAsync({
          challengeId: participation.challengeId,
          telegramId: currentUser.telegramId,
          metric,
          value: cappedValue,
        })
        console.log(`‚úÖ Recalculated ${challenge.title}: ${cappedValue}`)
      } catch (error) {
        console.error(`‚ùå Failed to recalculate ${challenge.title}:`, error)
      }
    }
  }, [
    currentUser,
    getActiveParticipations,
    calculateChallengeMetrics,
    updateProgressMutation,
    challenges,
  ])

  return {
    updateChallengeProgress,
    forceUpdateAllChallenges,
    recalculateAllChallenges,
    calculateChallengeMetrics,
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
export function useChallengeGardenIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–¥
  const onGardenElementAdded = useCallback(async () => {
    console.log(
      'üå± Starting challenge progress update after garden element added...'
    )

    try {
      // React Query —É–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à–∏, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ currentUser –≤–Ω—É—Ç—Ä–∏ updateChallengeProgress
      await updateChallengeProgress()
      console.log('‚úÖ Challenge progress updated successfully')
    } catch (error) {
      console.error('‚ùå Failed to update challenge progress:', error)
    }
  }, [updateChallengeProgress])

  return {
    onGardenElementAdded,
  }
}

export function useChallengeMoodIntegration() {
  const { updateChallengeProgress } = useChallengeIntegration()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const onMoodEntryAdded = useCallback(async () => {
    console.log('üèÜ Starting challenge progress update after mood entry...')

    try {
      // React Query —É–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à–∏, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ currentUser –≤–Ω—É—Ç—Ä–∏ updateChallengeProgress
      await updateChallengeProgress()
      console.log('‚úÖ Challenge progress updated successfully')
    } catch (error) {
      console.error('‚ùå Failed to update challenge progress:', error)
    }
  }, [updateChallengeProgress])

  return {
    onMoodEntryAdded,
  }
}
