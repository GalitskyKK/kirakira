/**
 * üòä Mood Tracking Hook (v2 - Refactored)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç React Query –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * –ò Zustand –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

import { useCallback, useMemo } from 'react'
import { useMoodClientStore } from '@/stores/moodStore.v2'
import {
  useMoodSync,
  useAddMoodEntry,
  useCanCheckinToday,
} from '@/hooks/queries'
import { useUserSync } from '@/hooks/index.v2'
import { useTelegramId } from '@/hooks/useTelegramId'
import { useUpdateQuestProgress } from '@/hooks/queries/useDailyQuestQueries'
import type { MoodType, MoodIntensity, MoodEntry, MoodStats } from '@/types'
import { getMoodDisplayProps, getRecommendedMood } from '@/utils/moodMapping'
import { getTimeUntilNextCheckin } from '@/utils/dateHelpers'
import { calculateMoodStats } from '@/utils/moodMapping'
import { loadMoodHistory, saveMoodHistory } from '@/utils/storage'
import { awardMoodRewards } from '@/utils/currencyRewards'

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (React Query) –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (Zustand)
 */
export function useMoodTracking() {
  const telegramId = useTelegramId()
  const { data: userData } = useUserSync(telegramId, !!telegramId)
  const currentUser = userData?.user
  const userId = currentUser?.id

  // –°–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ React Query
  const {
    data: moodData,
    isLoading,
    error: queryError,
    refetch: syncMoodHistory,
  } = useMoodSync(telegramId, userId, !!telegramId && !!userId)

  const addMoodMutation = useAddMoodEntry()
  const updateQuestProgress = useUpdateQuestProgress()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const { canCheckin, todaysMood } = useCanCheckinToday(telegramId, userId)

  // –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ Zustand
  const {
    selectedDateRange,
    isFilterModalOpen,
    selectedMoodFilter,
    setDateRange,
    setFilterModalOpen,
    setSelectedMoodFilter,
    clearFilters,
  } = useMoodClientStore()

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage (–¥–ª—è offline-first –ø–æ–¥—Ö–æ–¥–∞)
  const localMoodHistory = loadMoodHistory()

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º, fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ
  const moodHistory = useMemo(() => {
    if (moodData) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      saveMoodHistory(moodData.moods)
      return moodData.moods
    }
    return localMoodHistory
  }, [moodData, localMoodHistory])

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å—Ç—Ä–∏–∫–∏ –∏–∑ userData –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
  const moodStats: MoodStats = useMemo(() => {
    const localStats = calculateMoodStats(moodHistory)

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–∫–∞—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ!)
    if (userData?.stats) {
      return {
        ...localStats,
        currentStreak: userData.stats.currentStreak ?? localStats.currentStreak,
        longestStreak: userData.stats.longestStreak ?? localStats.longestStreak,
        totalMoodEntries:
          userData.stats.totalMoodEntries ?? localStats.totalEntries,
      }
    }

    return localStats
  }, [moodHistory, userData?.stats])

  // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏
  const timeUntilNextCheckin = useMemo(() => {
    const lastEntry = moodHistory.length > 0 ? moodHistory[0] : null
    return getTimeUntilNextCheckin(lastEntry?.date ?? null)
  }, [moodHistory])

  // –ù–µ–¥–∞–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
  const recentTrend = useMemo((): readonly MoodEntry[] => {
    const sevenDaysAgo = new Date()
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)

    const recent = moodHistory.filter(entry => entry.date >= sevenDaysAgo)
    return [...recent].sort(
      (a: MoodEntry, b: MoodEntry) => a.date.getTime() - b.date.getTime()
    )
  }, [moodHistory])

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const moodRecommendation = useMemo(() => {
    return getRecommendedMood(recentTrend)
  }, [recentTrend])

  // –û—Ç–º–µ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const checkInToday = useCallback(
    async (
      mood: MoodType,
      intensity: MoodIntensity,
      note?: string
    ): Promise<MoodEntry | null> => {
      if (!currentUser?.telegramId || !currentUser?.id) {
        console.error('‚ùå No user available')
        return null
      }

      if (!canCheckin) {
        console.error('‚ùå Already checked in today')
        return null
      }

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ mutation
        const telegramUserData: {
          userId: string
          firstName: string
          lastName?: string
          username?: string
          languageCode: string
          photoUrl?: string
        } = {
          userId: currentUser.id,
          firstName: currentUser.firstName ?? 'User',
          languageCode: currentUser.preferences.language || 'ru',
        }

        if (currentUser.lastName !== undefined) {
          telegramUserData.lastName = currentUser.lastName
        }
        if (currentUser.username !== undefined) {
          telegramUserData.username = currentUser.username
        }
        if (currentUser.photoUrl !== undefined) {
          telegramUserData.photoUrl = currentUser.photoUrl
        }

        const moodRequest: {
          telegramUserId: number
          mood: MoodType
          intensity: MoodIntensity
          note?: string
          date: string
          telegramUserData: typeof telegramUserData
        } = {
          telegramUserId: currentUser.telegramId,
          mood,
          intensity,
          date: new Date().toISOString(),
          telegramUserData,
        }

        if (note !== undefined) {
          moodRequest.note = note
        }

        const entry = await addMoodMutation.mutateAsync(moodRequest)

        console.log('‚úÖ Mood checked in successfully')

        // üí∞ –ù–∞—á–∏—Å–ª—è–µ–º –≤–∞–ª—é—Ç—É –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        const isFirstToday = !todaysMood
        const currencyResult = await awardMoodRewards(
          currentUser.telegramId,
          isFirstToday
        )

        if (currencyResult.success) {
          console.log(
            `üí∞ Awarded ${currencyResult.sprouts} sprouts for mood check-in`
          )
        }

        // üéØ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å daily quests
        if (telegramId) {
          try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
            console.log('üéØ Updating mood-related daily quests...')

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã —Ç–∏–ø–∞ record_specific_mood –∏ record_with_note
            const moodQuests = ['record_specific_mood', 'record_with_note']
            for (const questType of moodQuests) {
              try {
                await updateQuestProgress.mutateAsync({
                  telegramId,
                  questType: questType as any,
                  increment: 1,
                })
              } catch (error) {
                console.warn(`‚ö†Ô∏è Failed to update quest ${questType}:`, error)
              }
            }
          } catch (questError) {
            console.error('‚ùå Failed to update quest progress:', questError)
          }
        }

        return entry
      } catch (error) {
        console.error('‚ùå Failed to check in mood:', error)
        return null
      }
    },
    [currentUser, canCheckin, addMoodMutation]
  )

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const getMoodDisplay = useCallback((mood: MoodType) => {
    return getMoodDisplayProps(mood)
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ—Ç–∫–∏
  const canCheckinNow = useCallback(() => {
    return canCheckin
  }, [canCheckin])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const getTodaysMoodEntry = useCallback(() => {
    return todaysMood
  }, [todaysMood])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  const getRecentMoods = useCallback(
    (days: number): readonly MoodEntry[] => {
      const cutoffDate = new Date()
      cutoffDate.setDate(cutoffDate.getDate() - days)

      return moodHistory.filter(entry => entry.date >= cutoffDate)
    },
    [moodHistory]
  )

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getMoodStatsData = useCallback(() => {
    return moodStats
  }, [moodStats])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ streak
  const getStreakInfo = useCallback(() => {
    return {
      current: moodStats.currentStreak,
      longest: moodStats.longestStreak,
    }
  }, [moodStats])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    todaysMood,
    moodHistory,
    isLoading: isLoading || addMoodMutation.isPending,
    error: queryError?.message ?? addMoodMutation.error?.message ?? null,
    streakCount: moodStats.currentStreak,
    lastCheckin: moodHistory.length > 0 ? (moodHistory[0]?.date ?? null) : null,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    moodStats,
    timeUntilNextCheckin,
    recentTrend,
    moodRecommendation,

    // –§–∏–ª—å—Ç—Ä—ã UI
    selectedDateRange,
    isFilterModalOpen,
    selectedMoodFilter,

    // Actions
    syncMoodHistory,
    checkInToday,
    getMoodDisplay,
    setDateRange,
    setFilterModalOpen,
    setSelectedMoodFilter,
    clearFilters,

    // Utility functions
    canCheckinToday: canCheckinNow,
    getTodaysMood: getTodaysMoodEntry,
    getRecentMoods,
    getMoodStats: getMoodStatsData,
    getStreakInfo,
  }
}
