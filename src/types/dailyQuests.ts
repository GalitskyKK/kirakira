/**
 * üéØ DAILY QUESTS TYPES
 * TypeScript —Ç–∏–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
 */

// ===============================================
// üéØ –ë–ê–ó–û–í–´–ï –¢–ò–ü–´
// ===============================================

export type QuestCategory = 'mood' | 'garden' | 'social' | 'streak'

export type QuestStatus = 'active' | 'completed' | 'claimed' | 'expired'

export type QuestType =
  // Mood Quests (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
  | 'record_specific_mood' // –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  | 'record_with_note' // –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π
  // Garden Quests (–°–∞–¥)
  | 'collect_elements' // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  // Streak Quests (–°—Ç—Ä–∏–∫–∏)
  | 'maintain_streak' // –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–∏–∫ N –¥–Ω–µ–π
  | 'login_streak' // –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// ===============================================
// üìä –ò–ù–¢–ï–†–§–ï–ô–°–´
// ===============================================

export interface DailyQuest {
  readonly id: string
  readonly telegramId: number
  readonly questType: QuestType
  readonly questCategory: QuestCategory
  readonly targetValue: number
  readonly currentProgress: number
  readonly status: QuestStatus
  readonly rewards: QuestRewards
  readonly generatedAt: Date | string
  readonly expiresAt: Date | string
  readonly completedAt?: Date | string
  readonly claimedAt?: Date | string
  readonly metadata?: QuestMetadata
}

export interface QuestRewards {
  readonly sprouts: number
  readonly gems?: number
  readonly experience: number
  readonly description: string
}

export interface QuestMetadata {
  readonly name: string
  readonly emoji: string
  readonly description: string
  readonly [key: string]: unknown
}

export interface QuestTemplate {
  readonly type: QuestType
  readonly category: QuestCategory
  readonly name: string
  readonly description: string
  readonly emoji: string
  readonly getTargetValue: (userLevel: number) => number
  readonly getRewards: (userLevel: number, targetValue?: number) => QuestRewards
  readonly weight: number // –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
}

// ===============================================
// üì° API –¢–ò–ü–´
// ===============================================

export interface DailyQuestsResponse {
  readonly quests: readonly DailyQuest[]
  readonly completedToday: number
  readonly totalToday: number
  readonly canClaimBonus: boolean
  readonly bonusRewards?: QuestRewards
  readonly stats: QuestStats
}

export interface QuestStats {
  readonly activeQuests: number
  readonly completedQuests: number
  readonly claimedQuests: number
  readonly totalQuests: number
  readonly completionRate: number
  readonly totalRewards: QuestRewards
}

export interface ClaimQuestRequest {
  readonly questId: string
  readonly telegramId: number
}

export interface UpdateProgressRequest {
  readonly questId: string
  readonly telegramId: number
  readonly increment?: number
}

export interface UpdateProgressResponse {
  readonly quest: DailyQuest
  readonly isCompleted: boolean
  readonly isNewlyCompleted: boolean
}

export interface ClaimQuestResponse {
  readonly quest: DailyQuest
  readonly newBalance: {
    readonly sprouts: number
    readonly gems: number
  }
  readonly rewards: QuestRewards
}

// ===============================================
// üéÆ UI –¢–ò–ü–´
// ===============================================

export interface QuestProgress {
  readonly quest: DailyQuest
  readonly progressPercentage: number
  readonly isCompleted: boolean
  readonly canClaim: boolean
  readonly timeRemaining: number // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  readonly isExpired: boolean
}

export interface QuestCompletionSummary {
  readonly completedCount: number
  readonly totalCount: number
  readonly completionRate: number
  readonly bonusEligible: boolean
  readonly bonusRewards?: QuestRewards
  readonly expiredQuests: readonly DailyQuest[]
  readonly unclaimedQuests: readonly DailyQuest[]
}

export interface QuestRewardAnimation {
  readonly quest: DailyQuest
  readonly rewards: QuestRewards
  readonly isBonus: boolean
  readonly showConfetti: boolean
}

// ===============================================
// üéØ –ö–û–ù–°–¢–ê–ù–¢–´
// ===============================================

export const QUEST_CATEGORIES: Record<
  QuestCategory,
  {
    readonly name: string
    readonly emoji: string
    readonly color: string
    readonly description: string
  }
> = {
  mood: {
    name: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    emoji: 'üòä',
    color: '#fbbf24',
    description: '–ó–∞–¥–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
  },
  garden: {
    name: '–°–∞–¥',
    emoji: 'üå±',
    color: '#10b981',
    description: '–ó–∞–¥–∞–Ω–∏—è –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é –∏ —É–ª—É—á—à–µ–Ω–∏—é —Å–∞–¥–∞',
  },
  social: {
    name: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ',
    emoji: 'üë•',
    color: '#3b82f6',
    description: '–ó–∞–¥–∞–Ω–∏—è –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –¥—Ä—É–∑—å—è–º–∏',
  },
  streak: {
    name: '–°—Ç—Ä–∏–∫–∏',
    emoji: 'üî•',
    color: '#ef4444',
    description: '–ó–∞–¥–∞–Ω–∏—è –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  },
} as const

export const QUEST_STATUSES: Record<
  QuestStatus,
  {
    readonly name: string
    readonly emoji: string
    readonly color: string
    readonly description: string
  }
> = {
  active: {
    name: '–ê–∫—Ç–∏–≤–Ω–æ',
    emoji: '‚è≥',
    color: '#6b7280',
    description: '–ó–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
  },
  completed: {
    name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    emoji: '‚úÖ',
    color: '#10b981',
    description: '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
  },
  claimed: {
    name: '–ü–æ–ª—É—á–µ–Ω–æ',
    emoji: 'üéÅ',
    color: '#8b5cf6',
    description: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞',
  },
  expired: {
    name: '–ò—Å—Ç–µ–∫–ª–æ',
    emoji: '‚è∞',
    color: '#ef4444',
    description: '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
  },
} as const

// ===============================================
// üéÅ –ù–ê–ì–†–ê–î–´ –ó–ê –ö–û–ú–ë–û
// ===============================================

export const COMBO_REWARDS: Record<number, QuestRewards> = {
  3: {
    sprouts: 50,
    experience: 25,
    description: '–ë–æ–Ω—É—Å –∑–∞ 3 –∫–≤–µ—Å—Ç–∞!',
  },
  4: {
    sprouts: 75,
    experience: 50,
    description: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
  },
  5: {
    sprouts: 100,
    gems: 1,
    experience: 100,
    description: '–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å!',
  },
} as const

// ===============================================
// üéØ –£–¢–ò–õ–ò–¢–´
// ===============================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
 */
export function isQuestCompleted(quest: DailyQuest): boolean {
  return quest.currentProgress >= quest.targetValue
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
 */
export function canClaimQuest(quest: DailyQuest): boolean {
  return quest.status === 'completed' && quest.claimedAt === undefined
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export function getQuestProgress(quest: DailyQuest): number {
  if (quest.targetValue === 0) return 100
  return Math.min(
    Math.round((quest.currentProgress / quest.targetValue) * 100),
    100
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
 */
export function isQuestExpired(quest: DailyQuest): boolean {
  const expiresAt =
    quest.expiresAt instanceof Date
      ? quest.expiresAt
      : new Date(quest.expiresAt)
  return new Date() > expiresAt
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
 */
export function getQuestTimeRemaining(quest: DailyQuest): number {
  const now = new Date()
  const expires =
    quest.expiresAt instanceof Date
      ? quest.expiresAt
      : new Date(quest.expiresAt)
  return Math.max(expires.getTime() - now.getTime(), 0)
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
 */
export function formatTimeRemaining(expiresAt: Date | string): string {
  const now = new Date()
  const expires = expiresAt instanceof Date ? expiresAt : new Date(expiresAt)
  const diff = expires.getTime() - now.getTime()

  if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ'

  const hours = Math.floor(diff / (1000 * 60 * 60))
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))

  if (hours > 0) {
    return `${hours}—á ${minutes}–º`
  }

  return `${minutes}–º`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–≤–µ—Å—Ç–∞
 */
export function formatQuestRewards(rewards: QuestRewards): string {
  const parts = [`${rewards.sprouts}üåø`, `${rewards.experience} XP`]
  if (rewards.gems && rewards.gems > 0) {
    parts.splice(1, 0, `${rewards.gems}üíé`)
  }
  return parts.join(' + ')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
 */
export function getQuestDescription(quest: DailyQuest): string {
  const metadata = quest.metadata
  if (!metadata) return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ'

  const description = metadata.description || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ'
  return description.replace('{target}', quest.targetValue.toString())
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
 */
export function calculateBonusRewards(
  completedCount: number,
  _totalCount: number
): QuestRewards | null {
  if (completedCount < 3) return null
  if (completedCount >= 5) return COMBO_REWARDS[5] ?? null
  if (completedCount >= 4) return COMBO_REWARDS[4] ?? null
  return COMBO_REWARDS[3] ?? null
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏—è
 */
export function getQuestCategoryInfo(category: QuestCategory) {
  return QUEST_CATEGORIES[category]
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞–Ω–∏—è
 */
export function getQuestStatusInfo(status: QuestStatus) {
  return QUEST_STATUSES[status]
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º
 */
export function isSocialQuest(quest: DailyQuest): boolean {
  return quest.questCategory === 'social'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
 */
export function isMoodQuest(quest: DailyQuest): boolean {
  return quest.questCategory === 'mood'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Å–∞–¥–æ–º
 */
export function isGardenQuest(quest: DailyQuest): boolean {
  return quest.questCategory === 'garden'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å–æ —Å—Ç—Ä–∏–∫–∞–º–∏
 */
export function isStreakQuest(quest: DailyQuest): boolean {
  return quest.questCategory === 'streak'
}

// ===============================================
// üéØ TYPE GUARDS
// ===============================================

export function isQuestType(value: string): value is QuestType {
  const validTypes: QuestType[] = [
    'record_specific_mood',
    'record_with_note',
    'collect_elements',
    'maintain_streak',
    'login_streak',
  ]
  return validTypes.includes(value as QuestType)
}

export function isQuestCategory(value: string): value is QuestCategory {
  return ['mood', 'garden', 'social', 'streak'].includes(value)
}

export function isQuestStatus(value: string): value is QuestStatus {
  return ['active', 'completed', 'claimed', 'expired'].includes(value)
}

export function isDailyQuest(value: unknown): value is DailyQuest {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'questType' in value &&
    'questCategory' in value &&
    'targetValue' in value &&
    'currentProgress' in value &&
    'status' in value &&
    'rewards' in value
  )
}

// ===============================================
// üéØ HELPER TYPES
// ===============================================

export type QuestFilter = {
  readonly category?: QuestCategory
  readonly status?: QuestStatus
  readonly type?: QuestType
}

export type QuestSort = 'progress' | 'category' | 'expires' | 'rewards'

export interface QuestListOptions {
  readonly filter?: QuestFilter
  readonly sort?: QuestSort
  readonly limit?: number
  readonly offset?: number
}
