/**
 * üí∞ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –í–ê–õ–Æ–¢–´
 * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
 */

import { useCurrencyStore } from '@/stores/currencyStore'
import {
  type CurrencyType,
  type CurrencyReason,
  type SproutEarnReason,
  type GemEarnReason,
  SPROUT_REWARDS,
  GEM_REWARDS,
  calculateLevelUpReward,
  getReasonDescription,
} from '@/types/currency'
import type { RarityLevel } from '@/types/garden'

// ===============================================
// üí∞ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –í–ê–õ–Æ–¢–´
// ===============================================

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function awardCurrency(
  telegramId: number,
  currencyType: CurrencyType,
  amount: number,
  reason: CurrencyReason,
  description?: string,
  metadata?: Record<string, unknown>
): Promise<{
  success: boolean
  newBalance?: number
  transactionId?: string
  error?: string
}> {
  try {
    const { earnCurrency } = useCurrencyStore.getState()

    const result = await earnCurrency(
      telegramId,
      currencyType,
      amount,
      reason,
      description || getReasonDescription(reason),
      metadata
    )

    if (result.success) {
      console.log(
        `‚úÖ Awarded ${amount} ${currencyType} for ${reason}: ${description}`
      )
    } else {
      console.error(`‚ùå Failed to award currency: ${result.error}`)
    }

    return result
  } catch (error) {
    console.error('‚ùå Error awarding currency:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// ===============================================
// üåø –†–û–°–¢–ö–ò - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–ï
// ===============================================

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å —Ä–æ—Å—Ç–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
 */
export async function awardSprouts(
  telegramId: number,
  reason: SproutEarnReason,
  metadata?: Record<string, unknown>
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  const reward = SPROUT_REWARDS[reason]

  if (!reward) {
    console.error(`‚ùå Unknown sprout reward reason: ${reason}`)
    return {
      success: false,
      amount: 0,
      error: 'Unknown reward reason',
    }
  }

  const result = await awardCurrency(
    telegramId,
    'sprouts',
    reward.amount,
    reason,
    reward.description,
    metadata
  )

  return {
    ...result,
    amount: reward.amount,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å —Ä–æ—Å—Ç–∫–∏ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
 * –§–æ—Ä–º—É–ª–∞: 100 + (level * 50)
 */
export async function awardLevelUpSprouts(
  telegramId: number,
  level: number
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  const amount = calculateLevelUpReward(level)

  const result = await awardCurrency(
    telegramId,
    'sprouts',
    amount,
    'level_up',
    `–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è ${level}`,
    { level }
  )

  return {
    ...result,
    amount,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å —Ä–æ—Å—Ç–∫–∏ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏)
 */
export async function awardElementSprouts(
  telegramId: number,
  rarity: RarityLevel,
  elementId: string
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  const rarityReasonMap: Record<RarityLevel, SproutEarnReason> = {
    common: 'element_common',
    uncommon: 'element_uncommon',
    rare: 'element_rare',
    epic: 'element_epic',
    legendary: 'element_legendary',
  }

  const reason = rarityReasonMap[rarity]
  const reward = SPROUT_REWARDS[reason]

  if (!reward) {
    return {
      success: false,
      amount: 0,
      error: 'Unknown rarity',
    }
  }

  const result = await awardCurrency(
    telegramId,
    'sprouts',
    reward.amount,
    reason,
    `–ü–æ–ª—É—á–µ–Ω ${rarity} —ç–ª–µ–º–µ–Ω—Ç`,
    { elementId, rarity }
  )

  return {
    ...result,
    amount: reward.amount,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å —Ä–æ—Å—Ç–∫–∏ –∑–∞ —Å—Ç—Ä–∏–∫
 */
export async function awardStreakSprouts(
  telegramId: number,
  streakDays: number
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ö–∏ —Å—Ç—Ä–∏–∫–∞
  const streakMilestones: Array<{
    days: number
    reason: SproutEarnReason
  }> = [
    { days: 3, reason: 'streak_3_days' },
    { days: 7, reason: 'streak_7_days' },
    { days: 14, reason: 'streak_14_days' },
    { days: 30, reason: 'streak_30_days' },
    { days: 100, reason: 'streak_100_days' },
    { days: 365, reason: 'streak_365_days' },
  ]

  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–µ—Ö—É
  const milestone = streakMilestones.find(m => m.days === streakDays)

  if (!milestone) {
    // –ù–µ –≤–µ—Ö–∞, –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
    return {
      success: true, // –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–µ—Ö–∞
      amount: 0,
    }
  }

  const reward = SPROUT_REWARDS[milestone.reason]

  const result = await awardCurrency(
    telegramId,
    'sprouts',
    reward.amount,
    milestone.reason,
    `–°—Ç—Ä–∏–∫ ${streakDays} –¥–Ω–µ–π!`,
    { streakDays }
  )

  return {
    ...result,
    amount: reward.amount,
  }
}

// ===============================================
// üíé –ö–†–ò–°–¢–ê–õ–õ–´ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–ï
// ===============================================

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
 */
export async function awardGems(
  telegramId: number,
  reason: GemEarnReason,
  metadata?: Record<string, unknown>
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  const reward = GEM_REWARDS[reason]

  if (!reward) {
    console.error(`‚ùå Unknown gem reward reason: ${reason}`)
    return {
      success: false,
      amount: 0,
      error: 'Unknown reward reason',
    }
  }

  const result = await awardCurrency(
    telegramId,
    'gems',
    reward.amount,
    reason,
    reward.description,
    metadata
  )

  return {
    ...result,
    amount: reward.amount,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–∞ —Å—Ç—Ä–∏–∫ (–Ω–µ–¥–µ–ª—å–Ω—ã–π/–º–µ—Å—è—á–Ω—ã–π)
 */
export async function awardStreakGems(
  telegramId: number,
  streakDays: number
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  if (streakDays === 7) {
    return awardGems(telegramId, 'weekly_streak', { streakDays })
  }

  if (streakDays === 30) {
    return awardGems(telegramId, 'monthly_streak', { streakDays })
  }

  return {
    success: true,
    amount: 0,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–≤–µ—Ö–∏: 5, 10)
 */
export async function awardLevelUpGems(
  telegramId: number,
  level: number
): Promise<{
  success: boolean
  amount: number
  newBalance?: number
  error?: string
}> {
  if (level % 10 === 0) {
    // –ö–∞–∂–¥—ã–µ 10 —É—Ä–æ–≤–Ω–µ–π
    return awardGems(telegramId, 'level_up_milestone_10', { level })
  }

  if (level % 5 === 0) {
    // –ö–∞–∂–¥—ã–µ 5 —É—Ä–æ–≤–Ω–µ–π
    return awardGems(telegramId, 'level_up_milestone_5', { level })
  }

  return {
    success: true,
    amount: 0,
  }
}

// ===============================================
// üéÅ –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–ì–†–ê–î–´
// ===============================================

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
export async function awardMoodRewards(
  telegramId: number,
  isFirstToday: boolean
): Promise<{
  sprouts: number
  gems: number
  success: boolean
}> {
  const sproutsResult = await awardSprouts(
    telegramId,
    isFirstToday ? 'first_mood_of_day' : 'daily_mood'
  )

  return {
    sprouts: sproutsResult.amount,
    gems: 0,
    success: sproutsResult.success,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç—Ä–∏–∫
 */
export async function awardStreakRewards(
  telegramId: number,
  streakDays: number
): Promise<{
  sprouts: number
  gems: number
  success: boolean
}> {
  const [sproutsResult, gemsResult] = await Promise.all([
    awardStreakSprouts(telegramId, streakDays),
    awardStreakGems(telegramId, streakDays),
  ])

  return {
    sprouts: sproutsResult.amount,
    gems: gemsResult.amount,
    success: sproutsResult.success && gemsResult.success,
  }
}

/**
 * –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
 */
export async function awardLevelUpRewards(
  telegramId: number,
  level: number
): Promise<{
  sprouts: number
  gems: number
  success: boolean
}> {
  const [sproutsResult, gemsResult] = await Promise.all([
    awardLevelUpSprouts(telegramId, level),
    awardLevelUpGems(telegramId, level),
  ])

  return {
    sprouts: sproutsResult.amount,
    gems: gemsResult.amount,
    success: sproutsResult.success && gemsResult.success,
  }
}

// ===============================================
// üìä –£–¢–ò–õ–ò–¢–´
// ===============================================

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã (–±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)
 */
export function previewReward(
  reason: CurrencyReason,
  level?: number
): {
  amount: number
  description: string
  currencyType: CurrencyType
} {
  if (reason in SPROUT_REWARDS) {
    const reward =
      reason === 'level_up' && level !== undefined
        ? {
            amount: calculateLevelUpReward(level),
            description: `–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω—è ${level}`,
          }
        : SPROUT_REWARDS[reason as SproutEarnReason]

    return {
      amount: reward.amount,
      description: reward.description,
      currencyType: 'sprouts',
    }
  }

  if (reason in GEM_REWARDS) {
    const reward = GEM_REWARDS[reason as GemEarnReason]
    return {
      amount: reward.amount,
      description: reward.description,
      currencyType: 'gems',
    }
  }

  return {
    amount: 0,
    description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞',
    currencyType: 'sprouts',
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export async function getCurrencyEarnedStats(
  telegramId: number,
  fromDate?: Date,
  toDate?: Date
): Promise<{
  sprouts: number
  gems: number
  transactionCount: number
}> {
  try {
    const { loadTransactions } = useCurrencyStore.getState()
    const transactions = await loadTransactions(telegramId, 1000) // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    const filteredTransactions = transactions.filter(tx => {
      if (tx.transactionType !== 'earn') return false

      const txDate = new Date(tx.createdAt)

      if (fromDate && txDate < fromDate) return false
      if (toDate && txDate > toDate) return false

      return true
    })

    const sprouts = filteredTransactions
      .filter(tx => tx.currencyType === 'sprouts')
      .reduce((sum, tx) => sum + tx.amount, 0)

    const gems = filteredTransactions
      .filter(tx => tx.currencyType === 'gems')
      .reduce((sum, tx) => sum + tx.amount, 0)

    return {
      sprouts,
      gems,
      transactionCount: filteredTransactions.length,
    }
  } catch (error) {
    console.error('‚ùå Error getting currency stats:', error)
    return {
      sprouts: 0,
      gems: 0,
      transactionCount: 0,
    }
  }
}
