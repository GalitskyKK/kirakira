/**
 * üéØ DAILY QUESTS UTILITIES
 * –£—Ç–∏–ª–∏—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
 */

import type {
  QuestTemplate,
  QuestType,
  QuestCategory,
  QuestRewards,
} from '@/types/dailyQuests'

// ===============================================
// üéØ –®–ê–ë–õ–û–ù–´ –ó–ê–î–ê–ù–ò–ô
// ===============================================

export const QUEST_TEMPLATES: Partial<Record<QuestType, QuestTemplate>> = {
  // ===============================================
  // üòä MOOD QUESTS (–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
  // ===============================================

  record_specific_mood: {
    type: 'record_specific_mood',
    category: 'mood',
    name: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è',
    description: '–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
    emoji: 'üòä',
    getTargetValue: () => 1,
    getRewards: (level, targetValue = 1) => ({
      sprouts: 30 * targetValue + level * 2,
      gems: targetValue >= 3 && level >= 10 ? 1 : 0,
      experience: 50 * targetValue + level * 5,
      description: `–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (${targetValue})`,
    }),
    weight: 8,
  },

  record_with_note: {
    type: 'record_with_note',
    category: 'mood',
    name: '–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
    description: '–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π',
    emoji: 'üìù',
    getTargetValue: () => 1,
    getRewards: (level, targetValue = 1) => ({
      sprouts: 30 * targetValue + level * 2,
      gems: targetValue >= 3 && level >= 10 ? 1 : 0,
      experience: 50 * targetValue + level * 5,
      description: `–ó–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π (${targetValue})`,
    }),
    weight: 6,
  },

  // ===============================================
  // üå± GARDEN QUESTS (–°–∞–¥)
  // ===============================================

  collect_elements: {
    type: 'collect_elements',
    category: 'garden',
    name: '–°–∞–¥–æ–≤–æ–¥',
    description: '–°–æ–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç',
    emoji: 'üå±',
    getTargetValue: () => 1,
    getRewards: (level, targetValue = 1) => ({
      sprouts: 30 * targetValue + level * 2,
      gems: targetValue >= 3 && level >= 10 ? 1 : 0,
      experience: 50 * targetValue + level * 5,
      description: `–°–æ–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç (${targetValue})`,
    }),
    weight: 10,
  },

  // ===============================================
  // üî• STREAK QUESTS (–°—Ç—Ä–∏–∫–∏)
  // ===============================================

  maintain_streak: {
    type: 'maintain_streak',
    category: 'streak',
    name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
    description: '–ü–æ–¥–¥–µ—Ä–∂–∏ —Å—Ç—Ä–∏–∫',
    emoji: 'üî•',
    getTargetValue: () => 1,
    getRewards: (level, targetValue = 1) => ({
      sprouts: 30 * targetValue + level * 2,
      gems: targetValue >= 3 && level >= 10 ? 1 : 0,
      experience: 50 * targetValue + level * 5,
      description: `–ü–æ–¥–¥–µ—Ä–∂–∏ —Å—Ç—Ä–∏–∫ (${targetValue})`,
    }),
    weight: 10,
  },
} as const

// ===============================================
// üé≤ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–í–ï–°–¢–û–í
// ===============================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—ã
 */
export function generateDailySeed(userId: string, date: Date): number {
  const dateStr = date.toISOString().split('T')[0] // YYYY-MM-DD
  const combined = `${userId}-${dateStr}`
  let hash = 0
  for (let i = 0; i < combined.length; i++) {
    hash = (hash << 5) - hash + combined.charCodeAt(i)
    hash = hash & hash
  }
  return Math.abs(hash)
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∫–≤–µ—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export function selectQuestTemplates(
  _userLevel: number,
  seed: number,
  maxQuests: number = 5
): QuestTemplate[] {
  const templates = Object.values(QUEST_TEMPLATES)
  const selected: QuestTemplate[] = []
  const usedCategories = new Set<QuestCategory>()

  // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
  const weightedTemplates: QuestTemplate[] = []
  templates.forEach(template => {
    if (template != null) {
      for (let i = 0; i < template.weight; i++) {
        weightedTemplates.push(template)
      }
    }
  })

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed
  const shuffled = [...weightedTemplates]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor((seed + i) % (i + 1))
    const temp = shuffled[i]
    if (temp && shuffled[j]) {
      shuffled[i] = shuffled[j]
      shuffled[j] = temp
    }
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∫–≤–µ—Å—Ç—ã, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  for (const template of shuffled) {
    if (selected.length >= maxQuests) break

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (
      template != null &&
      (!usedCategories.has(template.category) || selected.length < 3)
    ) {
      selected.push(template)
      usedCategories.add(template.category)
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã–µ
  for (const template of shuffled) {
    if (selected.length >= maxQuests) break
    if (template != null && !selected.includes(template)) {
      selected.push(template)
    }
  }

  return selected.slice(0, maxQuests)
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getQuestCount(userLevel: number): number {
  if (userLevel <= 5) return 3
  if (userLevel <= 15) return 4
  return 5
}

// ===============================================
// üéÅ –ù–ê–ì–†–ê–î–´ –ò –ë–û–ù–£–°–´
// ===============================================

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
 */
export function calculateBonusRewards(
  completedCount: number,
  _totalCount: number
): QuestRewards | null {
  if (completedCount < 3) return null

  if (completedCount >= 5) {
    return {
      sprouts: 100,
      gems: 1,
      experience: 100,
      description: '–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å! +100üåø + 1üíé + 100 XP',
    }
  }

  if (completedCount >= 4) {
    return {
      sprouts: 75,
      experience: 50,
      description: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! +75üåø + 50 XP',
    }
  }

  return {
    sprouts: 50,
    experience: 25,
    description: '–ë–æ–Ω—É—Å –∑–∞ 3 –∫–≤–µ—Å—Ç–∞! +50üåø + 25 XP',
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–µ–Ω—å
 */
export function calculateTotalRewards(
  quests: Array<{ rewards: QuestRewards }>
): QuestRewards {
  return quests.reduce(
    (total, quest) => ({
      sprouts: total.sprouts + quest.rewards.sprouts,
      gems: total.gems + (quest.rewards.gems ?? 0),
      experience: total.experience + quest.rewards.experience,
      description: '–û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–µ–Ω—å',
    }),
    { sprouts: 0, gems: 0, experience: 0, description: '' }
  )
}

// ===============================================
// üéØ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –°–û–†–¢–ò–†–û–í–ö–ê
// ===============================================

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function filterQuestsByCategory<
  T extends { questCategory: QuestCategory },
>(quests: T[], category: QuestCategory): T[] {
  return quests.filter(quest => quest.questCategory === category)
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
 */
export function filterQuestsByStatus<T extends { status: string }>(
  quests: T[],
  status: string
): T[] {
  return quests.filter(quest => quest.status === status)
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
 */
export function sortQuestsByProgress<
  T extends { currentProgress: number; targetValue: number },
>(quests: T[]): T[] {
  return [...quests].sort((a, b) => {
    const progressA = a.currentProgress / a.targetValue
    const progressB = b.currentProgress / b.targetValue
    return progressB - progressA
  })
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function sortQuestsByCategory<
  T extends { questCategory: QuestCategory },
>(quests: T[]): T[] {
  const categoryOrder: QuestCategory[] = ['mood', 'garden', 'social', 'streak']
  return [...quests].sort((a, b) => {
    const indexA = categoryOrder.indexOf(a.questCategory)
    const indexB = categoryOrder.indexOf(b.questCategory)
    return indexA - indexB
  })
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
 */
export function sortQuestsByExpiration<T extends { expiresAt: Date | string }>(
  quests: T[]
): T[] {
  return [...quests].sort((a, b) => {
    const aExpires =
      a.expiresAt instanceof Date ? a.expiresAt : new Date(a.expiresAt)
    const bExpires =
      b.expiresAt instanceof Date ? b.expiresAt : new Date(b.expiresAt)
    return aExpires.getTime() - bExpires.getTime()
  })
}

// ===============================================
// üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø
// ===============================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–∏–ø –∫–≤–µ—Å—Ç–∞
 */
export function isValidQuestType(type: string): type is QuestType {
  return type in QUEST_TEMPLATES
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞
 */
export function isValidQuestCategory(
  category: string
): category is QuestCategory {
  return ['mood', 'garden', 'social', 'streak'].includes(category)
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
 */
export function canUpdateQuestProgress(quest: {
  status: string
  expiresAt: Date
  currentProgress: number
  targetValue: number
}): boolean {
  const now = new Date()
  return (
    quest.status === 'active' &&
    quest.expiresAt > now &&
    quest.currentProgress < quest.targetValue
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–≤–µ—Å—Ç
 */
export function canClaimQuestReward(quest: {
  status: string
  expiresAt: Date
  currentProgress: number
  targetValue: number
}): boolean {
  const now = new Date()
  return (
    quest.status === 'completed' &&
    quest.expiresAt > now &&
    quest.currentProgress >= quest.targetValue
  )
}

// ===============================================
// üéØ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï
// ===============================================

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
 */
export function formatQuestProgress(current: number, target: number): string {
  return `${current}/${target}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∫–≤–µ—Å—Ç–∞
 */
export function formatQuestRewards(rewards: QuestRewards): string {
  const parts = [`${rewards.sprouts}üåø`, `${rewards.experience} XP`]
  if (rewards.gems != null && rewards.gems > 0) {
    parts.splice(1, 0, `${rewards.gems}üíé`)
  }
  return parts.join(' + ')
}

// ===============================================
// üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// ===============================================

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤
 */
export function calculateQuestStats<
  T extends { status: string; rewards: QuestRewards },
>(quests: T[]) {
  const stats = {
    total: quests.length,
    active: 0,
    completed: 0,
    claimed: 0,
    expired: 0,
    completionRate: 0,
    totalRewards: {
      sprouts: 0,
      gems: 0,
      experience: 0,
    },
  }

  quests.forEach(quest => {
    switch (quest.status) {
      case 'active':
        stats.active++
        break
      case 'completed':
        stats.completed++
        break
      case 'claimed':
        stats.claimed++
        stats.totalRewards.sprouts += quest.rewards.sprouts
        stats.totalRewards.gems += quest.rewards.gems ?? 0
        stats.totalRewards.experience += quest.rewards.experience
        break
      case 'expired':
        stats.expired++
        break
    }
  })

  const finished = stats.completed + stats.claimed
  stats.completionRate =
    stats.total > 0 ? Math.round((finished / stats.total) * 100) : 0

  return stats
}
