import type { User, MoodStats, Achievement, GardenerLevel } from '@/types'
import { AchievementCategory } from '@/types'
import { GARDENER_LEVELS as LEVELS_DATA } from './levelsData'

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ë–î)
export const ACHIEVEMENTS_CONFIG: Omit<
  Achievement,
  'isUnlocked' | 'unlockedAt' | 'progress'
>[] = [
  {
    id: 'first_steps',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–í—ã—Ä–∞—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
    emoji: 'üå±',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'week_streak',
    name: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
    description: '–°—Ç—Ä–∏–∫ 7 –¥–Ω–µ–π',
    emoji: 'üî•',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'month_streak',
    name: '–ú–µ—Å—è—Ü –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞',
    description: '–°—Ç—Ä–∏–∫ 30 –¥–Ω–µ–π',
    emoji: 'üèÜ',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'gardener',
    name: '–°–∞–¥–æ–≤–Ω–∏–∫',
    description: '10 —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Å–∞–¥—É',
    emoji: 'üåª',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'rare_hunter',
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏',
    description: '–ù–∞–π—Ç–∏ —Ä–µ–¥–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
    emoji: 'üíé',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'mood_analyst',
    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    description: '30 –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    emoji: 'üìä',
    category: AchievementCategory.MOOD,
  },
  {
    id: 'persistence_master',
    name: '–ú–∞—Å—Ç–µ—Ä –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞',
    description: '100 –¥–Ω–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    emoji: 'üéØ',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'ambassador',
    name: '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä',
    description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º 5 —Ä–∞–∑',
    emoji: 'üöÄ',
    category: AchievementCategory.SOCIAL,
  },
]

// üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (50 —É—Ä–æ–≤–Ω–µ–π)
export { GARDENER_LEVELS, calculateExperienceForLevel } from './levelsData'

// üìà –û–ø—ã—Ç –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ —É—Ä–æ–≤–Ω—è 30)
// –¶–µ–ª—å: ~555 –æ–ø—ã—Ç–∞/–¥–µ–Ω—å –ø—Ä–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ ‚Üí 30 —É—Ä–æ–≤–µ–Ω—å –∑–∞ ~6-8 –º–µ—Å—è—Ü–µ–≤
export const EXPERIENCE_REWARDS = {
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ (–±–∞–∑–æ–≤—ã–µ)
  DAILY_MOOD: 50, // –ë—ã–ª–æ 10 ‚Üí 50
  FIRST_MOOD_OF_DAY: 100, // –ë—ã–ª–æ 20 ‚Üí 100
  NEW_PLANT: 75, // –ë—ã–ª–æ 15 ‚Üí 75

  // –°—Ç—Ä–∏–∫–∏
  STREAK_MILESTONE_7: 200, // –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π (–±—ã–ª–æ 50)
  STREAK_MILESTONE_30: 800, // –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π (–Ω–æ–≤–æ–µ)
  STREAK_MILESTONE_100: 2000, // –∫–∞–∂–¥—ã–µ 100 –¥–Ω–µ–π (–Ω–æ–≤–æ–µ)

  // –†–µ–¥–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
  RARE_PLANT: 250, // –ë—ã–ª–æ 50 ‚Üí 250
  EPIC_PLANT: 500, // –ù–æ–≤–æ–µ
  LEGENDARY_PLANT: 1200, // –ù–æ–≤–æ–µ

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
  SHARE_GARDEN: 100, // –ë—ã–ª–æ 25 ‚Üí 100
  VISIT_FRIEND: 30, // –ù–æ–≤–æ–µ
  LIKE_GARDEN: 15, // –ù–æ–≤–æ–µ
  COMMENT_GARDEN: 50, // –ù–æ–≤–æ–µ

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  COMPLETE_ACHIEVEMENT: 500, // –ë—ã–ª–æ 100 ‚Üí 500

  // –ö–≤–µ—Å—Ç—ã (–Ω–æ–≤–æ–µ!)
  COMPLETE_DAILY_QUEST: 100,
  COMPLETE_WEEKLY_QUEST: 500,

  // –ß–µ–ª–ª–µ–Ω–¥–∂–∏
  COMPLETE_CHALLENGE: 800, // –ù–æ–≤–æ–µ
  WEEKLY_ACTIVE: 1000, // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—É—é –Ω–µ–¥–µ–ª—é (–Ω–æ–≤–æ–µ)
} as const

interface AchievementCheck {
  readonly id: string
  readonly condition: (
    user: User,
    moodStats: MoodStats,
    totalElements: number
  ) => boolean
  readonly progress: (
    user: User,
    moodStats: MoodStats,
    totalElements: number
  ) => number
  readonly maxProgress: number
}

// –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENT_CONDITIONS: AchievementCheck[] = [
  {
    id: 'first_steps',
    condition: (_user, _moodStats, totalElements) => totalElements >= 1,
    progress: (_user, _moodStats, totalElements) => totalElements,
    maxProgress: 1,
  },
  {
    id: 'week_streak',
    condition: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak) >= 7,
    progress: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak),
    maxProgress: 7,
  },
  {
    id: 'month_streak',
    condition: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak) >= 30,
    progress: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak),
    maxProgress: 30,
  },
  {
    id: 'gardener',
    condition: (_user, _moodStats, totalElements) => totalElements >= 10,
    progress: (_user, _moodStats, totalElements) => totalElements,
    maxProgress: 10,
  },
  {
    id: 'rare_hunter',
    condition: user => user.stats.rareElementsFound >= 1,
    progress: user => user.stats.rareElementsFound,
    maxProgress: 1,
  },
  {
    id: 'mood_analyst',
    condition: (_user, moodStats) => moodStats.totalEntries >= 30,
    progress: (_user, moodStats) => moodStats.totalEntries,
    maxProgress: 30,
  },
  {
    id: 'persistence_master',
    condition: user => user.stats.totalDays >= 100,
    progress: user => user.stats.totalDays,
    maxProgress: 100,
  },
  {
    id: 'ambassador',
    condition: user => user.stats.gardensShared >= 5,
    progress: user => user.stats.gardensShared,
    maxProgress: 5,
  },
]

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function calculateAchievements(
  user: User,
  moodStats: MoodStats,
  totalElements: number
): Achievement[] {
  return ACHIEVEMENTS_CONFIG.map(config => {
    const condition = ACHIEVEMENT_CONDITIONS.find(c => c.id === config.id)

    if (!condition) {
      return {
        ...config,
        isUnlocked: false,
        progress: 0,
        maxProgress: 1,
      }
    }

    const isUnlocked = condition.condition(user, moodStats, totalElements)
    const progress = condition.progress(user, moodStats, totalElements)

    return {
      ...config,
      isUnlocked,
      progress,
      maxProgress: condition.maxProgress,
      ...(isUnlocked && { unlockedAt: new Date() }), // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç–∞ –∏–∑ –ë–î
    }
  })
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–¥–æ–≤–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
 */
export function calculateGardenerLevel(experience: number): GardenerLevel {
  for (let i = LEVELS_DATA.length - 1; i >= 0; i--) {
    const level = LEVELS_DATA[i]!
    if (experience >= level.minExperience) {
      return level
    }
  }
  return LEVELS_DATA[0]! // –ù–æ–≤–∏—á–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export function calculateLevelProgress(experience: number): {
  currentLevel: GardenerLevel
  nextLevel: GardenerLevel | null
  progress: number // 0-100%
  experienceToNext: number
} {
  const currentLevel = calculateGardenerLevel(experience)
  const nextLevelIndex =
    LEVELS_DATA.findIndex(l => l.level === currentLevel.level) + 1
  const nextLevel =
    nextLevelIndex < LEVELS_DATA.length ? LEVELS_DATA[nextLevelIndex]! : null

  if (!nextLevel) {
    return {
      currentLevel,
      nextLevel: null,
      progress: 100,
      experienceToNext: 0,
    }
  }

  const experienceInCurrentLevel = experience - currentLevel.minExperience
  const experienceNeededForNextLevel =
    nextLevel.minExperience - currentLevel.minExperience
  const progress = Math.min(
    100,
    (experienceInCurrentLevel / experienceNeededForNextLevel) * 100
  )
  const experienceToNext = nextLevel.minExperience - experience

  return {
    currentLevel,
    nextLevel,
    progress,
    experienceToNext: Math.max(0, experienceToNext),
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function calculateExperienceFromStats(
  user: User,
  moodStats: MoodStats,
  totalElements: number
): number {
  let experience = 0

  // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  experience += moodStats.totalEntries * EXPERIENCE_REWARDS.DAILY_MOOD

  // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫–∏
  const streakBonuses =
    Math.floor(user.stats.longestStreak / 7) *
    EXPERIENCE_REWARDS.STREAK_MILESTONE_7
  experience += streakBonuses

  // –û–ø—ã—Ç –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
  experience += totalElements * EXPERIENCE_REWARDS.NEW_PLANT
  experience += user.stats.rareElementsFound * EXPERIENCE_REWARDS.RARE_PLANT

  // –û–ø—ã—Ç –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  experience += user.stats.gardensShared * EXPERIENCE_REWARDS.SHARE_GARDEN

  // –ë–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const achievements = calculateAchievements(user, moodStats, totalElements)
  const unlockedCount = achievements.filter(a => a.isUnlocked).length
  experience += unlockedCount * EXPERIENCE_REWARDS.COMPLETE_ACHIEVEMENT

  return Math.max(0, experience)
}

/**
 * –°–æ–∑–¥–∞–µ—Ç summary –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function createProfileSummary(
  user: User,
  moodStats: MoodStats,
  totalElements: number
) {
  const achievements = calculateAchievements(user, moodStats, totalElements)
  const experience = calculateExperienceFromStats(
    user,
    moodStats,
    totalElements
  )
  const levelInfo = calculateLevelProgress(experience)

  return {
    achievements,
    unlockedAchievements: achievements.filter(a => a.isUnlocked).length,
    totalAchievements: achievements.length,
    experience,
    levelInfo,
    stats: {
      daysSinceRegistration: Math.floor(
        (Date.now() - user.registrationDate.getTime()) / (1000 * 60 * 60 * 24)
      ),
      totalMoodEntries: moodStats.totalEntries,
      averageElementsPerDay:
        totalElements > 0 && user.stats.totalDays > 0
          ? Math.round(
              (totalElements / Math.max(user.stats.totalDays, 1)) * 10
            ) / 10
          : 0,
    },
  }
}
