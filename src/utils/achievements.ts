import type { User, MoodStats, Achievement, GardenerLevel } from '@/types'
import { AchievementCategory } from '@/types'

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ë–î)
export const ACHIEVEMENTS_CONFIG: Omit<
  Achievement,
  'isUnlocked' | 'unlockedAt' | 'progress'
>[] = [
  {
    id: 'first_steps',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–í—ã—Ä–∞—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
    emoji: 'üå±',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'week_streak',
    name: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
    description: '–°—Ç—Ä–∏–∫ 7 –¥–Ω–µ–π',
    emoji: 'üî•',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'month_streak',
    name: '–ú–µ—Å—è—Ü –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞',
    description: '–°—Ç—Ä–∏–∫ 30 –¥–Ω–µ–π',
    emoji: 'üèÜ',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'gardener',
    name: '–°–∞–¥–æ–≤–Ω–∏–∫',
    description: '10 —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Å–∞–¥—É',
    emoji: 'üåª',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'rare_hunter',
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏',
    description: '–ù–∞–π—Ç–∏ —Ä–µ–¥–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
    emoji: 'üíé',
    category: AchievementCategory.GARDEN,
  },
  {
    id: 'mood_analyst',
    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    description: '30 –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
    emoji: 'üìä',
    category: AchievementCategory.MOOD,
  },
  {
    id: 'persistence_master',
    name: '–ú–∞—Å—Ç–µ—Ä –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞',
    description: '100 –¥–Ω–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    emoji: 'üéØ',
    category: AchievementCategory.STREAK,
  },
  {
    id: 'ambassador',
    name: '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä',
    description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º 5 —Ä–∞–∑',
    emoji: 'üöÄ',
    category: AchievementCategory.SOCIAL,
  },
]

// –£—Ä–æ–≤–Ω–∏ —Å–∞–¥–æ–≤–Ω–∏–∫–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ë–î) - 30 —É—Ä–æ–≤–Ω–µ–π
export const GARDENER_LEVELS: GardenerLevel[] = [
  {
    level: 1,
    name: '–†–æ—Å—Ç–æ–∫',
    emoji: 'üå±',
    minExperience: 0,
    maxExperience: 99,
    benefits: [
      '1 –∫–æ–º–Ω–∞—Ç–∞ (16 —Å–ª–æ—Ç–æ–≤)',
      '–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã',
    ],
  },
  {
    level: 2,
    name: '–ü–æ–±–µ–≥',
    emoji: 'üåø',
    minExperience: 100,
    maxExperience: 249,
    benefits: ['2 –∫–æ–º–Ω–∞—Ç—ã (+16 —Å–ª–æ—Ç–æ–≤)', '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∞–¥–æ–º', '+5% –æ–ø—ã—Ç–∞'],
  },
  {
    level: 3,
    name: '–ë—É—Ç–æ–Ω',
    emoji: 'üåº',
    minExperience: 250,
    maxExperience: 499,
    benefits: [
      '3 –∫–æ–º–Ω–∞—Ç—ã (+32 —Å–ª–æ—Ç–æ–≤)',
      '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–¥–æ–≤ –¥—Ä—É–∑–µ–π',
      '1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞/–¥–µ–Ω—å',
    ],
  },
  {
    level: 4,
    name: '–¶–≤–µ—Ç–æ–∫',
    emoji: 'üå∏',
    minExperience: 500,
    maxExperience: 799,
    benefits: [
      '4 –∫–æ–º–Ω–∞—Ç—ã (+48 —Å–ª–æ—Ç–æ–≤)',
      '+5% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–î–∞—Ä–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º',
    ],
  },
  {
    level: 5,
    name: '–°–∞–¥–æ–≤–Ω–∏–∫',
    emoji: 'üåª',
    minExperience: 800,
    maxExperience: 1299,
    benefits: [
      '5 –∫–æ–º–Ω–∞—Ç (+64 —Å–ª–æ—Ç–æ–≤)',
      '+6% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ú–∞–≥–∞–∑–∏–Ω —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è',
    ],
  },
  {
    level: 6,
    name: '–ë–æ—Ç–∞–Ω–∏–∫',
    emoji: 'üçÄ',
    minExperience: 1300,
    maxExperience: 1899,
    benefits: [
      '6 –∫–æ–º–Ω–∞—Ç (+80 —Å–ª–æ—Ç–æ–≤)',
      '+8% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    ],
  },
  {
    level: 7,
    name: '–ó–Ω–∞—Ç–æ–∫',
    emoji: 'üå∫',
    minExperience: 1900,
    maxExperience: 2599,
    benefits: [
      '7 –∫–æ–º–Ω–∞—Ç (+96 —Å–ª–æ—Ç–æ–≤)',
      '+10% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ó–∞—â–∏—Ç–∞ —Å—Ç—Ä–∏–∫–∞ (1 —Ä–∞–∑/–Ω–µ–¥–µ–ª—è)',
    ],
  },
  {
    level: 8,
    name: '–§–ª–æ—Ä–∏—Å—Ç',
    emoji: 'üåπ',
    minExperience: 2600,
    maxExperience: 3399,
    benefits: [
      '8 –∫–æ–º–Ω–∞—Ç (+112 —Å–ª–æ—Ç–æ–≤)',
      '+12% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–∞–¥–∞–º',
    ],
  },
  {
    level: 9,
    name: '–≠–∫—Å–ø–µ—Ä—Ç',
    emoji: 'üå≥',
    minExperience: 3400,
    maxExperience: 4299,
    benefits: [
      '9 –∫–æ–º–Ω–∞—Ç (+128 —Å–ª–æ—Ç–æ–≤)',
      '+14% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏',
    ],
  },
  {
    level: 10,
    name: '–ú–∞—Å—Ç–µ—Ä',
    emoji: 'üéã',
    minExperience: 4300,
    maxExperience: 5399,
    benefits: [
      '10 –∫–æ–º–Ω–∞—Ç (+144 —Å–ª–æ—Ç–æ–≤)',
      '+16% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
    ],
  },
  {
    level: 11,
    name: '–í–∏—Ä—Ç—É–æ–∑',
    emoji: 'ü™¥',
    minExperience: 5400,
    maxExperience: 6699,
    benefits: [
      '11 –∫–æ–º–Ω–∞—Ç (+160 —Å–ª–æ—Ç–æ–≤)',
      '+18% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '3 –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏/–¥–µ–Ω—å',
    ],
  },
  {
    level: 12,
    name: '–ö—É—Ä–∞—Ç–æ—Ä',
    emoji: 'üå¥',
    minExperience: 6700,
    maxExperience: 8199,
    benefits: [
      '12 –∫–æ–º–Ω–∞—Ç (+176 —Å–ª–æ—Ç–æ–≤)',
      '+20% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV',
    ],
  },
  {
    level: 13,
    name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
    emoji: 'üå≤',
    minExperience: 8200,
    maxExperience: 9999,
    benefits: [
      '13 –∫–æ–º–Ω–∞—Ç (+192 —Å–ª–æ—Ç–æ–≤)',
      '+22% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ó–∞—â–∏—Ç–∞ —Å—Ç—Ä–∏–∫–∞ (2 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—è)',
    ],
  },
  {
    level: 14,
    name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä',
    emoji: 'üèõÔ∏è',
    minExperience: 10000,
    maxExperience: 12199,
    benefits: [
      '14 –∫–æ–º–Ω–∞—Ç (+208 —Å–ª–æ—Ç–æ–≤)',
      '+24% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞–∫–µ—Ç—ã –∫–æ–º–Ω–∞—Ç',
    ],
  },
  {
    level: 15,
    name: '–õ–µ–≥–µ–Ω–¥–∞',
    emoji: '‚≠ê',
    minExperience: 12200,
    maxExperience: 14699,
    benefits: [
      '15 –∫–æ–º–Ω–∞—Ç (+224 —Å–ª–æ—Ç–æ–≤)',
      '+26% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ',
    ],
  },
  {
    level: 16,
    name: '–¢–∏—Ç–∞–Ω',
    emoji: 'üóø',
    minExperience: 14700,
    maxExperience: 17599,
    benefits: [
      '16 –∫–æ–º–Ω–∞—Ç (+240 —Å–ª–æ—Ç–æ–≤)',
      '+28% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏',
    ],
  },
  {
    level: 17,
    name: '–§–µ–Ω–∏–∫—Å',
    emoji: 'üî•',
    minExperience: 17600,
    maxExperience: 20999,
    benefits: [
      '17 –∫–æ–º–Ω–∞—Ç (+256 —Å–ª–æ—Ç–æ–≤)',
      '+30% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–æ–π –¥–µ–Ω—å —Å—Ç—Ä–∏–∫–∞',
    ],
  },
  {
    level: 18,
    name: '–û—Ä–∞–∫—É–ª',
    emoji: 'üîÆ',
    minExperience: 21000,
    maxExperience: 24999,
    benefits: [
      '18 –∫–æ–º–Ω–∞—Ç (+272 —Å–ª–æ—Ç–æ–≤)',
      '+32% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è',
    ],
  },
  {
    level: 19,
    name: '–ú–∏—Å—Ç–∏–∫',
    emoji: '‚ú®',
    minExperience: 25000,
    maxExperience: 29499,
    benefits: [
      '19 –∫–æ–º–Ω–∞—Ç (+288 —Å–ª–æ—Ç–æ–≤)',
      '+34% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ê—É—Ä–∞: +10% —Ä–æ—Å—Ç–∫–æ–≤ –¥–ª—è –¥—Ä—É–∑–µ–π',
    ],
  },
  {
    level: 20,
    name: '–ë–æ–∂–µ—Å—Ç–≤–æ',
    emoji: 'üëë',
    minExperience: 29500,
    maxExperience: 34999,
    benefits: [
      '20 –∫–æ–º–Ω–∞—Ç (+304 —Å–ª–æ—Ç–æ–≤)',
      '+36% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º —Ä–∞—Å—Ç–µ–Ω–∏—è',
    ],
  },
  {
    level: 21,
    name: '–ö–æ—Å–º–æ—Å',
    emoji: 'üåå',
    minExperience: 35000,
    maxExperience: 41499,
    benefits: [
      '22 –∫–æ–º–Ω–∞—Ç—ã (+336 —Å–ª–æ—Ç–æ–≤)',
      '+38% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞ —Å–∞–¥–∞',
    ],
  },
  {
    level: 22,
    name: '–í–µ—á–Ω–æ—Å—Ç—å',
    emoji: '‚ôæÔ∏è',
    minExperience: 41500,
    maxExperience: 49499,
    benefits: [
      '24 –∫–æ–º–Ω–∞—Ç—ã (+368 —Å–ª–æ—Ç–æ–≤)',
      '+40% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π —Å—Ç—Ä–∏–∫ (–∑–∞—â–∏—Ç–∞ –Ω–∞–≤—Å–µ–≥–¥–∞)',
    ],
  },
  {
    level: 23,
    name: '–ê–±—Å–æ–ª—é—Ç',
    emoji: 'üí´',
    minExperience: 49500,
    maxExperience: 59499,
    benefits: [
      '26 –∫–æ–º–Ω–∞—Ç (+400 —Å–ª–æ—Ç–æ–≤)',
      '+42% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      'x2 –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—Å—ë',
    ],
  },
  {
    level: 24,
    name: '–¢—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç',
    emoji: 'üå†',
    minExperience: 59500,
    maxExperience: 71999,
    benefits: [
      '28 –∫–æ–º–Ω–∞—Ç (+432 —Å–ª–æ—Ç–æ–≤)',
      '+44% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–°–æ–∑–¥–∞–≤–∞—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
    ],
  },
  {
    level: 25,
    name: '–ê—Ä—Ö–æ–Ω—Ç',
    emoji: 'üåü',
    minExperience: 72000,
    maxExperience: 87999,
    benefits: [
      '30 –∫–æ–º–Ω–∞—Ç (+464 —Å–ª–æ—Ç–æ–≤)',
      '+46% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è',
    ],
  },
  {
    level: 26,
    name: '–ù–µ–±–æ–∂–∏—Ç–µ–ª—å',
    emoji: '‚òÅÔ∏è',
    minExperience: 88000,
    maxExperience: 106999,
    benefits: [
      '32 –∫–æ–º–Ω–∞—Ç—ã (+496 —Å–ª–æ—Ç–æ–≤)',
      '+48% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ù–µ–±–µ—Å–Ω—ã–µ —Å–∞–¥—ã',
    ],
  },
  {
    level: 27,
    name: '–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π',
    emoji: 'ü™ê',
    minExperience: 107000,
    maxExperience: 129999,
    benefits: [
      '34 –∫–æ–º–Ω–∞—Ç—ã (+528 —Å–ª–æ—Ç–æ–≤)',
      '+50% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ê—Å—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è',
    ],
  },
  {
    level: 28,
    name: '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å',
    emoji: 'üåÄ',
    minExperience: 130000,
    maxExperience: 159999,
    benefits: [
      '36 –∫–æ–º–Ω–∞—Ç (+560 —Å–ª–æ—Ç–æ–≤)',
      '+52% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ',
    ],
  },
  {
    level: 29,
    name: '–í—Å–µ–≤–∏–¥—è—â–∏–π',
    emoji: 'üëÅÔ∏è',
    minExperience: 160000,
    maxExperience: 199999,
    benefits: [
      '38 –∫–æ–º–Ω–∞—Ç (+592 —Å–ª–æ—Ç–æ–≤)',
      '+55% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      '–í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æ',
    ],
  },
  {
    level: 30,
    name: '–¢–≤–æ—Ä–µ—Ü',
    emoji: 'üåà',
    minExperience: 200000,
    maxExperience: Infinity,
    benefits: [
      '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã',
      '+60% —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
      'x2 –æ–ø—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞',
      '–í—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ–∏—á–∏ –Ω–∞–≤—Å–µ–≥–¥–∞',
      '–û—Å–æ–±—ã–π —Ç–∏—Ç—É–ª "–¢–≤–æ—Ä–µ—Ü" –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ',
      '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∞—É—Ä—ã',
      '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –±—É–¥—É—â–∏–º —Ñ–∏—á–∞–º',
    ],
  },
]

// –û–ø—ã—Ç –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
export const EXPERIENCE_REWARDS = {
  DAILY_MOOD: 10,
  FIRST_MOOD_OF_DAY: 20,
  STREAK_MILESTONE: 50, // –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π —Å—Ç—Ä–∏–∫–∞
  NEW_PLANT: 15,
  RARE_PLANT: 50,
  SHARE_GARDEN: 25,
  COMPLETE_ACHIEVEMENT: 100,
} as const

interface AchievementCheck {
  readonly id: string
  readonly condition: (
    user: User,
    moodStats: MoodStats,
    totalElements: number
  ) => boolean
  readonly progress: (
    user: User,
    moodStats: MoodStats,
    totalElements: number
  ) => number
  readonly maxProgress: number
}

// –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENT_CONDITIONS: AchievementCheck[] = [
  {
    id: 'first_steps',
    condition: (_user, _moodStats, totalElements) => totalElements >= 1,
    progress: (_user, _moodStats, totalElements) => totalElements,
    maxProgress: 1,
  },
  {
    id: 'week_streak',
    condition: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak) >= 7,
    progress: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak),
    maxProgress: 7,
  },
  {
    id: 'month_streak',
    condition: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak) >= 30,
    progress: user =>
      Math.max(user.stats.currentStreak, user.stats.longestStreak),
    maxProgress: 30,
  },
  {
    id: 'gardener',
    condition: (_user, _moodStats, totalElements) => totalElements >= 10,
    progress: (_user, _moodStats, totalElements) => totalElements,
    maxProgress: 10,
  },
  {
    id: 'rare_hunter',
    condition: user => user.stats.rareElementsFound >= 1,
    progress: user => user.stats.rareElementsFound,
    maxProgress: 1,
  },
  {
    id: 'mood_analyst',
    condition: (_user, moodStats) => moodStats.totalEntries >= 30,
    progress: (_user, moodStats) => moodStats.totalEntries,
    maxProgress: 30,
  },
  {
    id: 'persistence_master',
    condition: user => user.stats.totalDays >= 100,
    progress: user => user.stats.totalDays,
    maxProgress: 100,
  },
  {
    id: 'ambassador',
    condition: user => user.stats.gardensShared >= 5,
    progress: user => user.stats.gardensShared,
    maxProgress: 5,
  },
]

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function calculateAchievements(
  user: User,
  moodStats: MoodStats,
  totalElements: number
): Achievement[] {
  return ACHIEVEMENTS_CONFIG.map(config => {
    const condition = ACHIEVEMENT_CONDITIONS.find(c => c.id === config.id)

    if (!condition) {
      return {
        ...config,
        isUnlocked: false,
        progress: 0,
        maxProgress: 1,
      }
    }

    const isUnlocked = condition.condition(user, moodStats, totalElements)
    const progress = condition.progress(user, moodStats, totalElements)

    return {
      ...config,
      isUnlocked,
      progress,
      maxProgress: condition.maxProgress,
      ...(isUnlocked && { unlockedAt: new Date() }), // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç–∞ –∏–∑ –ë–î
    }
  })
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–¥–æ–≤–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
 */
export function calculateGardenerLevel(experience: number): GardenerLevel {
  for (let i = GARDENER_LEVELS.length - 1; i >= 0; i--) {
    const level = GARDENER_LEVELS[i]!
    if (experience >= level.minExperience) {
      return level
    }
  }
  return GARDENER_LEVELS[0]! // –ù–æ–≤–∏—á–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export function calculateLevelProgress(experience: number): {
  currentLevel: GardenerLevel
  nextLevel: GardenerLevel | null
  progress: number // 0-100%
  experienceToNext: number
} {
  const currentLevel = calculateGardenerLevel(experience)
  const nextLevelIndex =
    GARDENER_LEVELS.findIndex(l => l.level === currentLevel.level) + 1
  const nextLevel =
    nextLevelIndex < GARDENER_LEVELS.length
      ? GARDENER_LEVELS[nextLevelIndex]!
      : null

  if (!nextLevel) {
    return {
      currentLevel,
      nextLevel: null,
      progress: 100,
      experienceToNext: 0,
    }
  }

  const experienceInCurrentLevel = experience - currentLevel.minExperience
  const experienceNeededForNextLevel =
    nextLevel.minExperience - currentLevel.minExperience
  const progress = Math.min(
    100,
    (experienceInCurrentLevel / experienceNeededForNextLevel) * 100
  )
  const experienceToNext = nextLevel.minExperience - experience

  return {
    currentLevel,
    nextLevel,
    progress,
    experienceToNext: Math.max(0, experienceToNext),
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function calculateExperienceFromStats(
  user: User,
  moodStats: MoodStats,
  totalElements: number
): number {
  let experience = 0

  // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  experience += moodStats.totalEntries * EXPERIENCE_REWARDS.DAILY_MOOD

  // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫–∏
  const streakBonuses =
    Math.floor(user.stats.longestStreak / 7) *
    EXPERIENCE_REWARDS.STREAK_MILESTONE
  experience += streakBonuses

  // –û–ø—ã—Ç –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
  experience += totalElements * EXPERIENCE_REWARDS.NEW_PLANT
  experience += user.stats.rareElementsFound * EXPERIENCE_REWARDS.RARE_PLANT

  // –û–ø—ã—Ç –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  experience += user.stats.gardensShared * EXPERIENCE_REWARDS.SHARE_GARDEN

  // –ë–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const achievements = calculateAchievements(user, moodStats, totalElements)
  const unlockedCount = achievements.filter(a => a.isUnlocked).length
  experience += unlockedCount * EXPERIENCE_REWARDS.COMPLETE_ACHIEVEMENT

  return Math.max(0, experience)
}

/**
 * –°–æ–∑–¥–∞–µ—Ç summary –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function createProfileSummary(
  user: User,
  moodStats: MoodStats,
  totalElements: number
) {
  const achievements = calculateAchievements(user, moodStats, totalElements)
  const experience = calculateExperienceFromStats(
    user,
    moodStats,
    totalElements
  )
  const levelInfo = calculateLevelProgress(experience)

  return {
    achievements,
    unlockedAchievements: achievements.filter(a => a.isUnlocked).length,
    totalAchievements: achievements.length,
    experience,
    levelInfo,
    stats: {
      daysSinceRegistration: Math.floor(
        (Date.now() - user.registrationDate.getTime()) / (1000 * 60 * 60 * 24)
      ),
      totalMoodEntries: moodStats.totalEntries,
      averageElementsPerDay:
        totalElements > 0 && user.stats.totalDays > 0
          ? Math.round(
              (totalElements / Math.max(user.stats.totalDays, 1)) * 10
            ) / 10
          : 0,
    },
  }
}
