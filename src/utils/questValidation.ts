/**
 * üéØ QUEST VALIDATION UTILITIES
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤
 */

import type { DailyQuest } from '@/types/dailyQuests'

// ===============================================
// üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –£–°–õ–û–í–ò–ô
// ===============================================

export interface QuestValidationContext {
  readonly moodType?: string
  readonly hasNote?: boolean
  readonly isRareElement?: boolean
  readonly elementType?: string
  readonly friendTelegramId?: number
  readonly streakDays?: number
  readonly isLogin?: boolean
}

export interface QuestValidationResult {
  readonly isValid: boolean
  readonly reason?: string
  readonly shouldIncrement: number
}

// ===============================================
// üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô –ö–í–ï–°–¢–û–í
// ===============================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export function validateQuestCondition(
  quest: DailyQuest,
  context: QuestValidationContext
): QuestValidationResult {
  const { questType, currentProgress, targetValue } = quest

  // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
  if (currentProgress >= targetValue) {
    return {
      isValid: false,
      reason: 'Quest already completed',
      shouldIncrement: 0,
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–≤–µ—Å—Ç–∞
  switch (questType) {
    case 'record_specific_mood':
      return validateMoodQuest(quest, context)

    case 'record_with_note':
      return validateNoteQuest(quest, context)

    case 'collect_elements':
      return validateCollectElementQuest(quest, context)

    case 'maintain_streak':
      return validateMaintainStreakQuest(quest, context)

    default:
      return {
        isValid: false,
        reason: `Unknown quest type: ${questType}`,
        shouldIncrement: 0,
      }
  }
}

// ===============================================
// üéØ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –í–ê–õ–ò–î–ê–¶–ò–ò
// ===============================================

function validateMoodQuest(
  quest: DailyQuest,
  context: QuestValidationContext
): QuestValidationResult {
  // –î–ª—è –∫–≤–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ
  if (!context.moodType) {
    return {
      isValid: false,
      reason: 'No mood recorded',
      shouldIncrement: 0,
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∫–≤–µ—Å—Ç–∞
  const requiredMood = quest.metadata?.['requiredMood']
  if (requiredMood && context.moodType !== requiredMood) {
    return {
      isValid: false,
      reason: `Wrong mood type. Required: ${requiredMood}, got: ${context.moodType}`,
      shouldIncrement: 0,
    }
  }

  return {
    isValid: true,
    shouldIncrement: 1,
  }
}

function validateNoteQuest(
  _quest: DailyQuest,
  context: QuestValidationContext
): QuestValidationResult {
  // –î–ª—è –∫–≤–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–º–µ—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞
  if (!context.hasNote) {
    return {
      isValid: false,
      reason: 'No note provided',
      shouldIncrement: 0,
    }
  }

  return {
    isValid: true,
    shouldIncrement: 1,
  }
}

function validateCollectElementQuest(
  _quest: DailyQuest,
  context: QuestValidationContext
): QuestValidationResult {
  // –î–ª—è –∫–≤–µ—Å—Ç–∞ —Å–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω
  if (!context.elementType) {
    return {
      isValid: false,
      reason: 'No element collected',
      shouldIncrement: 0,
    }
  }

  return {
    isValid: true,
    shouldIncrement: 1,
  }
}

function validateMaintainStreakQuest(
  _quest: DailyQuest,
  context: QuestValidationContext
): QuestValidationResult {
  // –î–ª—è –∫–≤–µ—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç—Ä–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
  if (!context.streakDays || context.streakDays < 1) {
    return {
      isValid: false,
      reason: 'No streak maintained',
      shouldIncrement: 0,
    }
  }

  return {
    isValid: true,
    shouldIncrement: context.streakDays,
  }
}

// ===============================================
// üéØ –£–¢–ò–õ–ò–¢–´
// ===============================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export function validateQuestsForContext(
  quests: readonly DailyQuest[],
  context: QuestValidationContext
): Array<{ quest: DailyQuest; result: QuestValidationResult }> {
  return quests.map(quest => ({
    quest,
    result: validateQuestCondition(quest, context),
  }))
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
 */
export function getValidQuestsForUpdate(
  quests: readonly DailyQuest[],
  context: QuestValidationContext
): Array<{ quest: DailyQuest; increment: number }> {
  return validateQuestsForContext(quests, context)
    .filter(({ result }) => result.isValid)
    .map(({ quest, result }) => ({
      quest,
      increment: result.shouldIncrement,
    }))
}
