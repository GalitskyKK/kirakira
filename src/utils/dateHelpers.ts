import {
  format,
  isToday,
  isYesterday,
  startOfDay,
  endOfDay,
  startOfWeek,
  endOfWeek,
  startOfMonth,
  endOfMonth,
  differenceInDays,
  differenceInWeeks,
  differenceInMonths,
  addDays,
  // subDays,
  parseISO,
  isValid,
} from 'date-fns'
import { ru } from 'date-fns/locale'

/**
 * üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * –ë–ï–ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UTC (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏)
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç UTC
 */
export function getLocalDateString(date: Date): string {
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  return `${year}-${month}-${day}`
}

/**
 * üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ YYYY-MM-DD
 * –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—è –µ—ë –∫–∞–∫ –õ–û–ö–ê–õ–¨–ù–£–Æ –¥–∞—Ç—É, –∞ –Ω–µ UTC
 *
 * –ù–∞–ø—Ä–∏–º–µ—Ä:
 * - "2025-10-06" ‚Üí Date –æ–±—ä–µ–∫—Ç –Ω–∞ 6 –æ–∫—Ç—è–±—Ä—è 00:00:00 –ø–æ –õ–û–ö–ê–õ–¨–ù–û–ú–£ –≤—Ä–µ–º–µ–Ω–∏
 *
 * –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å new Date("2025-10-06"), —Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è UTC –ø–æ–ª–Ω–æ—á—å,
 * —á—Ç–æ –¥–ª—è UTC+5 –±—É–¥–µ—Ç 05:00 —É—Ç—Ä–∞, –∏ getDate() –≤–µ—Ä–Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å.
 * –ù–û –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä UTC-5) —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å!
 */
export function parseLocalDate(dateString: string): Date {
  // –î–æ–±–∞–≤–ª—è–µ–º T00:00:00 –±–µ–∑ Z –≤ –∫–æ–Ω—Ü–µ ‚Üí –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
  const parts = dateString.split('-').map(Number)
  const year = parts[0]
  const month = parts[1]
  const day = parts[2]

  if (
    year === undefined ||
    month === undefined ||
    day === undefined ||
    year === 0 ||
    month === 0 ||
    day === 0 ||
    Number.isNaN(year) ||
    Number.isNaN(month) ||
    Number.isNaN(day)
  ) {
    console.warn('Invalid date string:', dateString)
    return new Date(dateString) // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–º–µ—Å—è—Ü 0-indexed)
  return new Date(year, month - 1, day, 0, 0, 0, 0)
}

/**
 * Formats date for display in the app
 */
export function formatDate(
  date: Date | string,
  formatString: string = 'dd.MM.yyyy',
  locale: 'ru' | 'en' = 'ru'
): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date

  if (!isValid(dateObj)) {
    return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'
  }

  return format(
    dateObj,
    formatString,
    locale === 'ru'
      ? {
          locale: ru,
        }
      : {}
  )
}

/**
 * Returns a human-readable relative time string
 */
export function getRelativeTimeString(date: Date | string): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date

  if (!isValid(dateObj)) {
    return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'
  }

  if (isToday(dateObj)) {
    return '–°–µ–≥–æ–¥–Ω—è'
  }

  if (isYesterday(dateObj)) {
    return '–í—á–µ—Ä–∞'
  }

  const daysAgo = differenceInDays(new Date(), dateObj)

  if (daysAgo < 7) {
    return `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`
  }

  const weeksAgo = differenceInWeeks(new Date(), dateObj)
  if (weeksAgo < 4) {
    return `${weeksAgo} –Ω–µ–¥. –Ω–∞–∑–∞–¥`
  }

  const monthsAgo = differenceInMonths(new Date(), dateObj)
  if (monthsAgo < 12) {
    return `${monthsAgo} –º–µ—Å. –Ω–∞–∑–∞–¥`
  }

  return formatDate(dateObj, 'dd.MM.yyyy')
}

/**
 * Checks if it's time for daily check-in
 * Uses the same date comparison logic as todaysMood to ensure consistency
 *
 * üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –õ–û–ö–ê–õ–¨–ù–£–Æ –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
 * –∞ –Ω–µ UTC, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
 */
export function isTimeForCheckin(lastCheckin: Date | null): boolean {
  if (lastCheckin === null) return true

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –õ–û–ö–ê–õ–¨–ù–£–Æ –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Å–µ—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
  const today = new Date()
  const entryDateStr = getLocalDateString(lastCheckin)
  const todayStr = getLocalDateString(today)

  console.log('üïê isTimeForCheckin check:', {
    lastCheckin: lastCheckin.toISOString(),
    entryDateStr,
    todayStr,
    canCheckin: entryDateStr !== todayStr,
  })

  return entryDateStr !== todayStr // –ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –µ—Å–ª–∏ –¥–∞—Ç—ã —Ä–∞–∑–Ω—ã–µ
}

/**
 * Gets the time until next check-in is available
 */
export function getTimeUntilNextCheckin(lastCheckin: Date | null): {
  hours: number
  minutes: number
  canCheckin: boolean
} {
  if (lastCheckin === null) {
    return { hours: 0, minutes: 0, canCheckin: true }
  }

  const now = new Date()
  const lastCheckinDay = startOfDay(lastCheckin)
  const nextCheckinTime = startOfDay(addDays(lastCheckinDay, 1))

  if (now >= nextCheckinTime) {
    return { hours: 0, minutes: 0, canCheckin: true }
  }

  const timeDiff = nextCheckinTime.getTime() - now.getTime()
  const hours = Math.floor(timeDiff / (1000 * 60 * 60))
  const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60))

  return { hours, minutes, canCheckin: false }
}

/**
 * Generates date range for statistics
 */
export function getDateRange(period: 'week' | 'month' | 'year'): {
  start: Date
  end: Date
} {
  const now = new Date()

  switch (period) {
    case 'week':
      return {
        start: startOfWeek(now, { weekStartsOn: 1 }), // Monday
        end: endOfWeek(now, { weekStartsOn: 1 }),
      }

    case 'month':
      return {
        start: startOfMonth(now),
        end: endOfMonth(now),
      }

    case 'year':
      return {
        start: new Date(now.getFullYear(), 0, 1),
        end: new Date(now.getFullYear(), 11, 31),
      }

    default:
      return {
        start: startOfDay(now),
        end: endOfDay(now),
      }
  }
}

/**
 * Creates an array of dates for a given range
 */
export function createDateArray(
  startDate: Date,
  endDate: Date,
  step: 'day' | 'week' | 'month' = 'day'
): Date[] {
  const dates: Date[] = []
  let currentDate = new Date(startDate)

  while (currentDate <= endDate) {
    dates.push(new Date(currentDate))

    switch (step) {
      case 'day':
        currentDate = addDays(currentDate, 1)
        break
      case 'week':
        currentDate = addDays(currentDate, 7)
        break
      case 'month':
        currentDate = new Date(
          currentDate.getFullYear(),
          currentDate.getMonth() + 1,
          1
        )
        break
    }
  }

  return dates
}

/**
 * Checks if a date is within a specific range
 */
export function isDateInRange(
  date: Date,
  startDate: Date,
  endDate: Date
): boolean {
  const checkDate = startOfDay(date)
  const rangeStart = startOfDay(startDate)
  const rangeEnd = startOfDay(endDate)

  return checkDate >= rangeStart && checkDate <= rangeEnd
}

/**
 * Gets reminder time as Date object for today
 */
export function getReminderTime(timeString: string): Date {
  const [hours, minutes] = timeString.split(':').map(Number)

  if (
    hours === undefined ||
    minutes === undefined ||
    hours < 0 ||
    hours > 23 ||
    minutes < 0 ||
    minutes > 59
  ) {
    throw new Error('Invalid time format. Expected HH:MM')
  }

  const reminderTime = new Date()
  reminderTime.setHours(hours, minutes, 0, 0)

  return reminderTime
}

/**
 * Formats time string for input elements
 */
export function formatTimeForInput(date: Date): string {
  return format(date, 'HH:mm')
}

/**
 * Validates if a date string is valid
 */
export function isValidDateString(dateString: string): boolean {
  const date = parseISO(dateString)
  return isValid(date)
}

/**
 * Gets the number of days since registration
 */
export function getDaysSinceRegistration(registrationDate: Date): number {
  return differenceInDays(new Date(), registrationDate)
}

/**
 * Calculates the progress percentage for the current day
 */
export function getDailyProgress(): number {
  const now = new Date()
  const startOfToday = startOfDay(now)
  const endOfToday = endOfDay(now)

  const totalMinutes = differenceInMinutes(endOfToday, startOfToday)
  const currentMinutes = differenceInMinutes(now, startOfToday)

  return Math.round((currentMinutes / totalMinutes) * 100)
}

/**
 * Helper function to calculate difference in minutes
 */
function differenceInMinutes(laterDate: Date, earlierDate: Date): number {
  return Math.floor((laterDate.getTime() - earlierDate.getTime()) / (1000 * 60))
}
