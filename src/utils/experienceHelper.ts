import { calculateGardenerLevel } from './achievements'
import { EXPERIENCE_REWARDS } from './achievements'

/**
 * üìà –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–ø—ã—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
 *
 * –ë–æ–Ω—É—Å experienceBonus –∏–∑ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º –æ–ø—ã—Ç–∞
 */

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ —Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–∞ –æ—Ç —É—Ä–æ–≤–Ω—è
 *
 * @param baseReward - –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å –±–æ–Ω—É—Å–æ–º
 *
 * @example
 * // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è 10 (experienceBonus: 25%)
 * calculateExperienceReward(100, 5682) // 125 –æ–ø—ã—Ç–∞ (100 * 1.25)
 */
export function calculateExperienceReward(
  baseReward: number,
  userExperience: number
): number {
  const levelInfo = calculateGardenerLevel(userExperience)
  const bonusMultiplier = 1 + levelInfo.experienceBonus / 100
  return Math.floor(baseReward * bonusMultiplier)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param isFirstOfDay - –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ –¥–µ–Ω—å
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateMoodExperience(
  userExperience: number,
  isFirstOfDay: boolean
): number {
  const baseReward = isFirstOfDay
    ? EXPERIENCE_REWARDS.FIRST_MOOD_OF_DAY
    : EXPERIENCE_REWARDS.DAILY_MOOD

  return calculateExperienceReward(baseReward, userExperience)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param rarity - –†–µ–¥–∫–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateElementExperience(
  userExperience: number,
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'
): number {
  let baseReward = EXPERIENCE_REWARDS.NEW_PLANT

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ —Ä–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  switch (rarity) {
    case 'rare':
      baseReward += EXPERIENCE_REWARDS.RARE_PLANT
      break
    case 'epic':
      baseReward += EXPERIENCE_REWARDS.EPIC_PLANT
      break
    case 'legendary':
      baseReward += EXPERIENCE_REWARDS.LEGENDARY_PLANT
      break
  }

  return calculateExperienceReward(baseReward, userExperience)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ —Å—Ç—Ä–∏–∫
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param streakDays - –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –≤ –¥–Ω—è—Ö
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞ (0 –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥)
 */
export function calculateStreakExperience(
  userExperience: number,
  streakDays: number
): number {
  let baseReward = 0

  // –ù–∞–≥—Ä–∞–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö
  if (streakDays === 7) {
    baseReward = EXPERIENCE_REWARDS.STREAK_MILESTONE_7
  } else if (streakDays === 30) {
    baseReward = EXPERIENCE_REWARDS.STREAK_MILESTONE_30
  } else if (streakDays === 100) {
    baseReward = EXPERIENCE_REWARDS.STREAK_MILESTONE_100
  }

  if (baseReward === 0) return 0

  return calculateExperienceReward(baseReward, userExperience)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateSocialExperience(
  userExperience: number,
  action: 'share' | 'visit' | 'like' | 'comment'
): number {
  let baseReward = 0

  switch (action) {
    case 'share':
      baseReward = EXPERIENCE_REWARDS.SHARE_GARDEN
      break
    case 'visit':
      baseReward = EXPERIENCE_REWARDS.VISIT_FRIEND
      break
    case 'like':
      baseReward = EXPERIENCE_REWARDS.LIKE_GARDEN
      break
    case 'comment':
      baseReward = EXPERIENCE_REWARDS.COMMENT_GARDEN
      break
  }

  return calculateExperienceReward(baseReward, userExperience)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateAchievementExperience(userExperience: number): number {
  return calculateExperienceReward(
    EXPERIENCE_REWARDS.COMPLETE_ACHIEVEMENT,
    userExperience
  )
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ –∫–≤–µ—Å—Ç
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param questType - –¢–∏–ø –∫–≤–µ—Å—Ç–∞
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateQuestExperience(
  userExperience: number,
  questType: 'daily' | 'weekly'
): number {
  const baseReward =
    questType === 'daily'
      ? EXPERIENCE_REWARDS.COMPLETE_DAILY_QUEST
      : EXPERIENCE_REWARDS.COMPLETE_WEEKLY_QUEST

  return calculateExperienceReward(baseReward, userExperience)
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateChallengeExperience(userExperience: number): number {
  return calculateExperienceReward(
    EXPERIENCE_REWARDS.COMPLETE_CHALLENGE,
    userExperience
  )
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –æ–ø—ã—Ç–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω—É—é –Ω–µ–¥–µ–ª—é
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞
 */
export function calculateWeeklyActiveBonus(userExperience: number): number {
  return calculateExperienceReward(
    EXPERIENCE_REWARDS.WEEKLY_ACTIVE,
    userExperience
  )
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –æ–ø—ã—Ç —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥
 *
 * @param userExperience - –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param actions - –û–±—ä–µ–∫—Ç —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 * @returns –û–±—â–∏–π –æ–ø—ã—Ç
 */
export function calculateTotalExperience(
  userExperience: number,
  actions: {
    moodEntries?: number
    firstMoodOfDay?: boolean
    newElements?: Array<'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'>
    streakDays?: number
    socialActions?: Array<'share' | 'visit' | 'like' | 'comment'>
    achievements?: number
    dailyQuests?: number
    weeklyQuests?: number
    challenges?: number
    weeklyActiveBonus?: boolean
  }
): number {
  let totalExp = 0

  // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  if (actions.moodEntries) {
    totalExp += calculateMoodExperience(
      userExperience,
      actions.firstMoodOfDay ?? false
    )
  }

  // –≠–ª–µ–º–µ–Ω—Ç—ã
  if (actions.newElements) {
    for (const rarity of actions.newElements) {
      totalExp += calculateElementExperience(userExperience, rarity)
    }
  }

  // –°—Ç—Ä–∏–∫
  if (actions.streakDays) {
    totalExp += calculateStreakExperience(userExperience, actions.streakDays)
  }

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  if (actions.socialActions) {
    for (const action of actions.socialActions) {
      totalExp += calculateSocialExperience(userExperience, action)
    }
  }

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (actions.achievements) {
    totalExp +=
      calculateAchievementExperience(userExperience) * actions.achievements
  }

  // –ö–≤–µ—Å—Ç—ã
  if (actions.dailyQuests) {
    totalExp +=
      calculateQuestExperience(userExperience, 'daily') * actions.dailyQuests
  }
  if (actions.weeklyQuests) {
    totalExp +=
      calculateQuestExperience(userExperience, 'weekly') * actions.weeklyQuests
  }

  // –ß–µ–ª–ª–µ–Ω–¥–∂–∏
  if (actions.challenges) {
    totalExp +=
      calculateChallengeExperience(userExperience) * actions.challenges
  }

  // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—É—é –Ω–µ–¥–µ–ª—é
  if (actions.weeklyActiveBonus) {
    totalExp += calculateWeeklyActiveBonus(userExperience)
  }

  return totalExp
}
